
SiC-LEGS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004ccc  08004ccc  00014ccc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d5c  08004d5c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d64  08004d64  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000113c  20000080  08004dec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011bc  08004dec  000211bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac39  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e86  00000000  00000000  0003ace1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e786  00000000  00000000  0003fb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  0004e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e8  00000000  00000000  0004f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017938  00000000  00000000  00050a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f579  00000000  00000000  00068378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080fca  00000000  00000000  000878f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001088bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003094  00000000  00000000  0010890c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004cb4 	.word	0x08004cb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08004cb4 	.word	0x08004cb4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	0008      	movs	r0, r1
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f834 	bl	80002e4 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_lmul>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	46ce      	mov	lr, r9
 800028c:	4647      	mov	r7, r8
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	4699      	mov	r9, r3
 8000294:	0c3b      	lsrs	r3, r7, #16
 8000296:	469c      	mov	ip, r3
 8000298:	0413      	lsls	r3, r2, #16
 800029a:	0c1b      	lsrs	r3, r3, #16
 800029c:	001d      	movs	r5, r3
 800029e:	000e      	movs	r6, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	0400      	lsls	r0, r0, #16
 80002a4:	0c14      	lsrs	r4, r2, #16
 80002a6:	0c00      	lsrs	r0, r0, #16
 80002a8:	4345      	muls	r5, r0
 80002aa:	434b      	muls	r3, r1
 80002ac:	4360      	muls	r0, r4
 80002ae:	4361      	muls	r1, r4
 80002b0:	18c0      	adds	r0, r0, r3
 80002b2:	0c2c      	lsrs	r4, r5, #16
 80002b4:	1820      	adds	r0, r4, r0
 80002b6:	468c      	mov	ip, r1
 80002b8:	4283      	cmp	r3, r0
 80002ba:	d903      	bls.n	80002c4 <__aeabi_lmul+0x3c>
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	025b      	lsls	r3, r3, #9
 80002c0:	4698      	mov	r8, r3
 80002c2:	44c4      	add	ip, r8
 80002c4:	4649      	mov	r1, r9
 80002c6:	4379      	muls	r1, r7
 80002c8:	4372      	muls	r2, r6
 80002ca:	0c03      	lsrs	r3, r0, #16
 80002cc:	4463      	add	r3, ip
 80002ce:	042d      	lsls	r5, r5, #16
 80002d0:	0c2d      	lsrs	r5, r5, #16
 80002d2:	18c9      	adds	r1, r1, r3
 80002d4:	0400      	lsls	r0, r0, #16
 80002d6:	1940      	adds	r0, r0, r5
 80002d8:	1889      	adds	r1, r1, r2
 80002da:	bcc0      	pop	{r6, r7}
 80002dc:	46b9      	mov	r9, r7
 80002de:	46b0      	mov	r8, r6
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__udivmoddi4>:
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	4657      	mov	r7, sl
 80002e8:	464e      	mov	r6, r9
 80002ea:	4645      	mov	r5, r8
 80002ec:	46de      	mov	lr, fp
 80002ee:	b5e0      	push	{r5, r6, r7, lr}
 80002f0:	0004      	movs	r4, r0
 80002f2:	000d      	movs	r5, r1
 80002f4:	4692      	mov	sl, r2
 80002f6:	4699      	mov	r9, r3
 80002f8:	b083      	sub	sp, #12
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d830      	bhi.n	8000360 <__udivmoddi4+0x7c>
 80002fe:	d02d      	beq.n	800035c <__udivmoddi4+0x78>
 8000300:	4649      	mov	r1, r9
 8000302:	4650      	mov	r0, sl
 8000304:	f000 f8ba 	bl	800047c <__clzdi2>
 8000308:	0029      	movs	r1, r5
 800030a:	0006      	movs	r6, r0
 800030c:	0020      	movs	r0, r4
 800030e:	f000 f8b5 	bl	800047c <__clzdi2>
 8000312:	1a33      	subs	r3, r6, r0
 8000314:	4698      	mov	r8, r3
 8000316:	3b20      	subs	r3, #32
 8000318:	469b      	mov	fp, r3
 800031a:	d433      	bmi.n	8000384 <__udivmoddi4+0xa0>
 800031c:	465a      	mov	r2, fp
 800031e:	4653      	mov	r3, sl
 8000320:	4093      	lsls	r3, r2
 8000322:	4642      	mov	r2, r8
 8000324:	001f      	movs	r7, r3
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	001e      	movs	r6, r3
 800032c:	42af      	cmp	r7, r5
 800032e:	d83a      	bhi.n	80003a6 <__udivmoddi4+0xc2>
 8000330:	42af      	cmp	r7, r5
 8000332:	d100      	bne.n	8000336 <__udivmoddi4+0x52>
 8000334:	e078      	b.n	8000428 <__udivmoddi4+0x144>
 8000336:	465b      	mov	r3, fp
 8000338:	1ba4      	subs	r4, r4, r6
 800033a:	41bd      	sbcs	r5, r7
 800033c:	2b00      	cmp	r3, #0
 800033e:	da00      	bge.n	8000342 <__udivmoddi4+0x5e>
 8000340:	e075      	b.n	800042e <__udivmoddi4+0x14a>
 8000342:	2200      	movs	r2, #0
 8000344:	2300      	movs	r3, #0
 8000346:	9200      	str	r2, [sp, #0]
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	2301      	movs	r3, #1
 800034c:	465a      	mov	r2, fp
 800034e:	4093      	lsls	r3, r2
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	4642      	mov	r2, r8
 8000356:	4093      	lsls	r3, r2
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	e028      	b.n	80003ae <__udivmoddi4+0xca>
 800035c:	4282      	cmp	r2, r0
 800035e:	d9cf      	bls.n	8000300 <__udivmoddi4+0x1c>
 8000360:	2200      	movs	r2, #0
 8000362:	2300      	movs	r3, #0
 8000364:	9200      	str	r2, [sp, #0]
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <__udivmoddi4+0x8e>
 800036e:	601c      	str	r4, [r3, #0]
 8000370:	605d      	str	r5, [r3, #4]
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	b003      	add	sp, #12
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	46bb      	mov	fp, r7
 800037c:	46b2      	mov	sl, r6
 800037e:	46a9      	mov	r9, r5
 8000380:	46a0      	mov	r8, r4
 8000382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000384:	4642      	mov	r2, r8
 8000386:	2320      	movs	r3, #32
 8000388:	1a9b      	subs	r3, r3, r2
 800038a:	4652      	mov	r2, sl
 800038c:	40da      	lsrs	r2, r3
 800038e:	4641      	mov	r1, r8
 8000390:	0013      	movs	r3, r2
 8000392:	464a      	mov	r2, r9
 8000394:	408a      	lsls	r2, r1
 8000396:	0017      	movs	r7, r2
 8000398:	4642      	mov	r2, r8
 800039a:	431f      	orrs	r7, r3
 800039c:	4653      	mov	r3, sl
 800039e:	4093      	lsls	r3, r2
 80003a0:	001e      	movs	r6, r3
 80003a2:	42af      	cmp	r7, r5
 80003a4:	d9c4      	bls.n	8000330 <__udivmoddi4+0x4c>
 80003a6:	2200      	movs	r2, #0
 80003a8:	2300      	movs	r3, #0
 80003aa:	9200      	str	r2, [sp, #0]
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	4643      	mov	r3, r8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0d9      	beq.n	8000368 <__udivmoddi4+0x84>
 80003b4:	07fb      	lsls	r3, r7, #31
 80003b6:	0872      	lsrs	r2, r6, #1
 80003b8:	431a      	orrs	r2, r3
 80003ba:	4646      	mov	r6, r8
 80003bc:	087b      	lsrs	r3, r7, #1
 80003be:	e00e      	b.n	80003de <__udivmoddi4+0xfa>
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d101      	bne.n	80003c8 <__udivmoddi4+0xe4>
 80003c4:	42a2      	cmp	r2, r4
 80003c6:	d80c      	bhi.n	80003e2 <__udivmoddi4+0xfe>
 80003c8:	1aa4      	subs	r4, r4, r2
 80003ca:	419d      	sbcs	r5, r3
 80003cc:	2001      	movs	r0, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	3e01      	subs	r6, #1
 80003d6:	1824      	adds	r4, r4, r0
 80003d8:	414d      	adcs	r5, r1
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d006      	beq.n	80003ec <__udivmoddi4+0x108>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d9ee      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80003e2:	3e01      	subs	r6, #1
 80003e4:	1924      	adds	r4, r4, r4
 80003e6:	416d      	adcs	r5, r5
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d1f8      	bne.n	80003de <__udivmoddi4+0xfa>
 80003ec:	9800      	ldr	r0, [sp, #0]
 80003ee:	9901      	ldr	r1, [sp, #4]
 80003f0:	465b      	mov	r3, fp
 80003f2:	1900      	adds	r0, r0, r4
 80003f4:	4169      	adcs	r1, r5
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db24      	blt.n	8000444 <__udivmoddi4+0x160>
 80003fa:	002b      	movs	r3, r5
 80003fc:	465a      	mov	r2, fp
 80003fe:	4644      	mov	r4, r8
 8000400:	40d3      	lsrs	r3, r2
 8000402:	002a      	movs	r2, r5
 8000404:	40e2      	lsrs	r2, r4
 8000406:	001c      	movs	r4, r3
 8000408:	465b      	mov	r3, fp
 800040a:	0015      	movs	r5, r2
 800040c:	2b00      	cmp	r3, #0
 800040e:	db2a      	blt.n	8000466 <__udivmoddi4+0x182>
 8000410:	0026      	movs	r6, r4
 8000412:	409e      	lsls	r6, r3
 8000414:	0033      	movs	r3, r6
 8000416:	0026      	movs	r6, r4
 8000418:	4647      	mov	r7, r8
 800041a:	40be      	lsls	r6, r7
 800041c:	0032      	movs	r2, r6
 800041e:	1a80      	subs	r0, r0, r2
 8000420:	4199      	sbcs	r1, r3
 8000422:	9000      	str	r0, [sp, #0]
 8000424:	9101      	str	r1, [sp, #4]
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x84>
 8000428:	42a3      	cmp	r3, r4
 800042a:	d8bc      	bhi.n	80003a6 <__udivmoddi4+0xc2>
 800042c:	e783      	b.n	8000336 <__udivmoddi4+0x52>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	2100      	movs	r1, #0
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	2200      	movs	r2, #0
 8000438:	9100      	str	r1, [sp, #0]
 800043a:	9201      	str	r2, [sp, #4]
 800043c:	2201      	movs	r2, #1
 800043e:	40da      	lsrs	r2, r3
 8000440:	9201      	str	r2, [sp, #4]
 8000442:	e786      	b.n	8000352 <__udivmoddi4+0x6e>
 8000444:	4642      	mov	r2, r8
 8000446:	2320      	movs	r3, #32
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	002a      	movs	r2, r5
 800044c:	4646      	mov	r6, r8
 800044e:	409a      	lsls	r2, r3
 8000450:	0023      	movs	r3, r4
 8000452:	40f3      	lsrs	r3, r6
 8000454:	4644      	mov	r4, r8
 8000456:	4313      	orrs	r3, r2
 8000458:	002a      	movs	r2, r5
 800045a:	40e2      	lsrs	r2, r4
 800045c:	001c      	movs	r4, r3
 800045e:	465b      	mov	r3, fp
 8000460:	0015      	movs	r5, r2
 8000462:	2b00      	cmp	r3, #0
 8000464:	dad4      	bge.n	8000410 <__udivmoddi4+0x12c>
 8000466:	4642      	mov	r2, r8
 8000468:	002f      	movs	r7, r5
 800046a:	2320      	movs	r3, #32
 800046c:	0026      	movs	r6, r4
 800046e:	4097      	lsls	r7, r2
 8000470:	1a9b      	subs	r3, r3, r2
 8000472:	40de      	lsrs	r6, r3
 8000474:	003b      	movs	r3, r7
 8000476:	4333      	orrs	r3, r6
 8000478:	e7cd      	b.n	8000416 <__udivmoddi4+0x132>
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzdi2>:
 800047c:	b510      	push	{r4, lr}
 800047e:	2900      	cmp	r1, #0
 8000480:	d103      	bne.n	800048a <__clzdi2+0xe>
 8000482:	f000 f807 	bl	8000494 <__clzsi2>
 8000486:	3020      	adds	r0, #32
 8000488:	e002      	b.n	8000490 <__clzdi2+0x14>
 800048a:	0008      	movs	r0, r1
 800048c:	f000 f802 	bl	8000494 <__clzsi2>
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__clzsi2>:
 8000494:	211c      	movs	r1, #28
 8000496:	2301      	movs	r3, #1
 8000498:	041b      	lsls	r3, r3, #16
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0xe>
 800049e:	0c00      	lsrs	r0, r0, #16
 80004a0:	3910      	subs	r1, #16
 80004a2:	0a1b      	lsrs	r3, r3, #8
 80004a4:	4298      	cmp	r0, r3
 80004a6:	d301      	bcc.n	80004ac <__clzsi2+0x18>
 80004a8:	0a00      	lsrs	r0, r0, #8
 80004aa:	3908      	subs	r1, #8
 80004ac:	091b      	lsrs	r3, r3, #4
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0x22>
 80004b2:	0900      	lsrs	r0, r0, #4
 80004b4:	3904      	subs	r1, #4
 80004b6:	a202      	add	r2, pc, #8	; (adr r2, 80004c0 <__clzsi2+0x2c>)
 80004b8:	5c10      	ldrb	r0, [r2, r0]
 80004ba:	1840      	adds	r0, r0, r1
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	02020304 	.word	0x02020304
 80004c4:	01010101 	.word	0x01010101
	...

080004d0 <msp_crc32>:
 * allocating any lookup tables. Otherwise a 256-byte lookup table will be
 * added to the global data, but the calculation of the checksum will be
 * faster.
 */
unsigned long msp_crc32(const unsigned char *data, unsigned long len, unsigned long start_remainder)
{
 80004d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
/* Computes CRC32 */
static unsigned long msp_crc32_lookup(const unsigned char *data, unsigned long len, unsigned long start_remainder)
{
	unsigned long crc;
	unsigned long i;
	if (msp_have_table_crc32 == 0)
 80004d2:	4c17      	ldr	r4, [pc, #92]	; (8000530 <msp_crc32+0x60>)
{
 80004d4:	9000      	str	r0, [sp, #0]
	if (msp_have_table_crc32 == 0)
 80004d6:	7823      	ldrb	r3, [r4, #0]
{
 80004d8:	9101      	str	r1, [sp, #4]
	if (msp_have_table_crc32 == 0)
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d115      	bne.n	800050a <msp_crc32+0x3a>
			if (rem & 1) {
 80004de:	2601      	movs	r6, #1
				rem ^= MSP_CRC32_POLYNOMIAL;
 80004e0:	4f14      	ldr	r7, [pc, #80]	; (8000534 <msp_crc32+0x64>)
		rem = i;  /* remainder from polynomial division */
 80004e2:	0019      	movs	r1, r3
 80004e4:	2008      	movs	r0, #8
			if (rem & 1) {
 80004e6:	000d      	movs	r5, r1
				rem >>= 1;
 80004e8:	0849      	lsrs	r1, r1, #1
			if (rem & 1) {
 80004ea:	4035      	ands	r5, r6
 80004ec:	d000      	beq.n	80004f0 <msp_crc32+0x20>
				rem ^= MSP_CRC32_POLYNOMIAL;
 80004ee:	4079      	eors	r1, r7
		for (j = 0; j < 8; j++) {
 80004f0:	3801      	subs	r0, #1
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d1f7      	bne.n	80004e6 <msp_crc32+0x16>
		msp_table_crc32[i] = rem;
 80004f6:	4d10      	ldr	r5, [pc, #64]	; (8000538 <msp_crc32+0x68>)
 80004f8:	0098      	lsls	r0, r3, #2
 80004fa:	5029      	str	r1, [r5, r0]
	for (i = 0; i < 256; i++) {
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	3301      	adds	r3, #1
 8000500:	0049      	lsls	r1, r1, #1
 8000502:	428b      	cmp	r3, r1
 8000504:	d1ed      	bne.n	80004e2 <msp_crc32+0x12>
	msp_have_table_crc32 = 1;
 8000506:	2301      	movs	r3, #1
 8000508:	7023      	strb	r3, [r4, #0]
		msp_calculate_table_crc32();
	
	/* We need to mask out the 32 least significant bits since a long can be
	 * larger than 32 bits. */
	crc = (~start_remainder) & 0xFFFFFFFF;
 800050a:	43d2      	mvns	r2, r2
 
	for (i = 0; i < len; i++)
		crc = (crc >> 8) ^ msp_table_crc32[data[i] ^ (crc & 0xff)];
 800050c:	24ff      	movs	r4, #255	; 0xff
 800050e:	9b01      	ldr	r3, [sp, #4]
 8000510:	9800      	ldr	r0, [sp, #0]
 8000512:	18c1      	adds	r1, r0, r3
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <msp_crc32+0x68>)
	for (i = 0; i < len; i++)
 8000516:	4281      	cmp	r1, r0
 8000518:	d101      	bne.n	800051e <msp_crc32+0x4e>

	return (~crc) & 0xFFFFFFFF;
 800051a:	43d0      	mvns	r0, r2
}
 800051c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		crc = (crc >> 8) ^ msp_table_crc32[data[i] ^ (crc & 0xff)];
 800051e:	7806      	ldrb	r6, [r0, #0]
 8000520:	0a15      	lsrs	r5, r2, #8
 8000522:	4022      	ands	r2, r4
 8000524:	4072      	eors	r2, r6
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	58d2      	ldr	r2, [r2, r3]
 800052a:	3001      	adds	r0, #1
 800052c:	406a      	eors	r2, r5
	for (i = 0; i < len; i++)
 800052e:	e7f2      	b.n	8000516 <msp_crc32+0x46>
 8000530:	2000009c 	.word	0x2000009c
 8000534:	edb88320 	.word	0xedb88320
 8000538:	200000a0 	.word	0x200000a0

0800053c <msp_to_bigendian32>:
 * big-endian byte-order. The bytes will be stored at the location pointed to
 * by the dest argument.
 */
void msp_to_bigendian32(unsigned char *dest, unsigned long number)
{
	dest[0] = (unsigned char) (number >> 24) & 0xff;
 800053c:	0e0b      	lsrs	r3, r1, #24
 800053e:	7003      	strb	r3, [r0, #0]
	dest[1] = (unsigned char) (number >> 16) & 0xff;
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	7043      	strb	r3, [r0, #1]
	dest[2] = (unsigned char) (number >> 8)  & 0xff;
 8000544:	0a0b      	lsrs	r3, r1, #8
 8000546:	7083      	strb	r3, [r0, #2]
	dest[3] = (unsigned char) (number >> 0)  & 0xff;
 8000548:	70c1      	strb	r1, [r0, #3]
}
 800054a:	4770      	bx	lr

0800054c <msp_from_bigendian32>:
 *
 * Converts a sequence of 4 bytes from big-endian into a 4 byte unsigned
 * integer with the native platform endianness.
 */
unsigned long msp_from_bigendian32(const unsigned char *src)
{
 800054c:	0003      	movs	r3, r0
 800054e:	1d02      	adds	r2, r0, #4
	unsigned long res = 0;
 8000550:	2000      	movs	r0, #0
	unsigned char i;
	for (i = 0; i < 4; i++) {
		res = res << 8;
		res += *(src + i);
 8000552:	7819      	ldrb	r1, [r3, #0]
		res = res << 8;
 8000554:	0200      	lsls	r0, r0, #8
	for (i = 0; i < 4; i++) {
 8000556:	3301      	adds	r3, #1
		res += *(src + i);
 8000558:	1808      	adds	r0, r1, r0
	for (i = 0; i < 4; i++) {
 800055a:	4293      	cmp	r3, r2
 800055c:	d1f9      	bne.n	8000552 <msp_from_bigendian32+0x6>
	}

	return res;
}
 800055e:	4770      	bx	lr

08000560 <ensure_ready_state>:
/*
 * Ensures that MSP is in the ready state. This means that if a current
 * transaction is active, it will be aborted.
 */
static void ensure_ready_state(void)
{
 8000560:	b510      	push	{r4, lr}
	switch (msp_exp_state.type) {
 8000562:	4c0d      	ldr	r4, [pc, #52]	; (8000598 <ensure_ready_state+0x38>)
 8000564:	7822      	ldrb	r2, [r4, #0]
 8000566:	b2d3      	uxtb	r3, r2
 8000568:	2a01      	cmp	r2, #1
 800056a:	d00a      	beq.n	8000582 <ensure_ready_state+0x22>
 800056c:	3b03      	subs	r3, #3
 800056e:	2b01      	cmp	r3, #1
 8000570:	d804      	bhi.n	800057c <ensure_ready_state+0x1c>
		if (MSP_OP_TYPE(msp_exp_state.opcode) != MSP_OP_TYPE_SYS)
			msp_exprecv_error(msp_exp_state.opcode, MSP_EXP_ERR_TRANSACTION_ABORTED);
		break;
	case MSP_EXP_STATE_OBC_REQ_RESPONSE:
	case MSP_EXP_STATE_OBC_REQ_TX:
		msp_expsend_error(msp_exp_state.opcode, MSP_EXP_ERR_TRANSACTION_ABORTED);
 8000572:	79e0      	ldrb	r0, [r4, #7]
 8000574:	2102      	movs	r1, #2
 8000576:	b2c0      	uxtb	r0, r0
 8000578:	f000 fa5f 	bl	8000a3a <msp_expsend_error>
		/* If we were in a state of a duplicate transaction or simply in the
		 * ready state, we don't need to report any errors. */
		break;
	}

	msp_exp_state.type = MSP_EXP_STATE_READY;
 800057c:	2300      	movs	r3, #0
 800057e:	7023      	strb	r3, [r4, #0]
}
 8000580:	bd10      	pop	{r4, pc}
		if (MSP_OP_TYPE(msp_exp_state.opcode) != MSP_OP_TYPE_SYS)
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	79e3      	ldrb	r3, [r4, #7]
 8000586:	4013      	ands	r3, r2
 8000588:	2b10      	cmp	r3, #16
 800058a:	d0f7      	beq.n	800057c <ensure_ready_state+0x1c>
			msp_exprecv_error(msp_exp_state.opcode, MSP_EXP_ERR_TRANSACTION_ABORTED);
 800058c:	79e0      	ldrb	r0, [r4, #7]
 800058e:	2102      	movs	r1, #2
 8000590:	b2c0      	uxtb	r0, r0
 8000592:	f000 fa56 	bl	8000a42 <msp_exprecv_error>
 8000596:	e7f1      	b.n	800057c <ensure_ready_state+0x1c>
 8000598:	200004a0 	.word	0x200004a0

0800059c <msp_recv_callback>:
{
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!msp_exp_state.initialized) /* Check that we are initialized */
 800059e:	4c7b      	ldr	r4, [pc, #492]	; (800078c <msp_recv_callback+0x1f0>)
{
 80005a0:	b089      	sub	sp, #36	; 0x24
 80005a2:	9000      	str	r0, [sp, #0]
	if (!msp_exp_state.initialized) /* Check that we are initialized */
 80005a4:	7863      	ldrb	r3, [r4, #1]
{
 80005a6:	000e      	movs	r6, r1
 80005a8:	0015      	movs	r5, r2
	if (!msp_exp_state.initialized) /* Check that we are initialized */
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d13e      	bne.n	800062c <msp_recv_callback+0x90>
		msp_exp_state_initialize(msp_seqflags_init());
 80005ae:	a804      	add	r0, sp, #16
 80005b0:	f000 fab4 	bl	8000b1c <msp_seqflags_init>
 80005b4:	9804      	ldr	r0, [sp, #16]
 80005b6:	9905      	ldr	r1, [sp, #20]
 80005b8:	9a06      	ldr	r2, [sp, #24]
 80005ba:	9b07      	ldr	r3, [sp, #28]
 80005bc:	f000 f9f4 	bl	80009a8 <msp_exp_state_initialize>
	if (!msp_exp_frame_fcs_valid(data, 1, len, addr))
 80005c0:	002b      	movs	r3, r5
 80005c2:	0032      	movs	r2, r6
 80005c4:	2101      	movs	r1, #1
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	f000 f9ba 	bl	8000940 <msp_exp_frame_fcs_valid>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d100      	bne.n	80005d2 <msp_recv_callback+0x36>
 80005d0:	e0da      	b.n	8000788 <msp_recv_callback+0x1ec>
	msp_exp_state.busy = 1;
 80005d2:	2301      	movs	r3, #1
	opcode = frame[0] & 0x7F;
 80005d4:	257f      	movs	r5, #127	; 0x7f
	msp_exp_state.busy = 1;
 80005d6:	70a3      	strb	r3, [r4, #2]
	opcode = frame[0] & 0x7F;
 80005d8:	9b00      	ldr	r3, [sp, #0]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	401d      	ands	r5, r3
	frame_id = (frame[0] >> 7) & 0x1;
 80005e0:	09df      	lsrs	r7, r3, #7
	if (opcode == MSP_OP_DATA_FRAME) {
 80005e2:	2d01      	cmp	r5, #1
 80005e4:	d128      	bne.n	8000638 <msp_recv_callback+0x9c>
		if (len < 6 || len > MSP_EXP_MAX_FRAME_SIZE)
 80005e6:	22fd      	movs	r2, #253	; 0xfd
 80005e8:	1fb3      	subs	r3, r6, #6
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d900      	bls.n	80005f2 <msp_recv_callback+0x56>
 80005f0:	e0c6      	b.n	8000780 <msp_recv_callback+0x1e4>
			return handle_incoming_data_frame(frame + 1, frame_id, len - 5);
 80005f2:	9900      	ldr	r1, [sp, #0]
	if (msp_exp_state.type != MSP_EXP_STATE_OBC_SEND_RX)
 80005f4:	7823      	ldrb	r3, [r4, #0]
			return handle_incoming_data_frame(frame + 1, frame_id, len - 5);
 80005f6:	3101      	adds	r1, #1
 80005f8:	3e05      	subs	r6, #5
	if (msp_exp_state.type != MSP_EXP_STATE_OBC_SEND_RX)
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d000      	beq.n	8000600 <msp_recv_callback+0x64>
 80005fe:	e0ba      	b.n	8000776 <msp_recv_callback+0x1da>
	if (frame_id == msp_exp_state.last_received_frame_id)
 8000600:	79a3      	ldrb	r3, [r4, #6]
 8000602:	429f      	cmp	r7, r3
 8000604:	d100      	bne.n	8000608 <msp_recv_callback+0x6c>
 8000606:	e0b9      	b.n	800077c <msp_recv_callback+0x1e0>
	if (msp_exp_state.processed_length + len > msp_exp_state.total_length)
 8000608:	69e3      	ldr	r3, [r4, #28]
 800060a:	69a2      	ldr	r2, [r4, #24]
 800060c:	18f3      	adds	r3, r6, r3
 800060e:	4293      	cmp	r3, r2
 8000610:	d900      	bls.n	8000614 <msp_recv_callback+0x78>
 8000612:	e0b5      	b.n	8000780 <msp_recv_callback+0x1e4>
	msp_exprecv_data(msp_exp_state.opcode, data, len, msp_exp_state.processed_length);
 8000614:	79e0      	ldrb	r0, [r4, #7]
 8000616:	0032      	movs	r2, r6
 8000618:	69e3      	ldr	r3, [r4, #28]
 800061a:	b2c0      	uxtb	r0, r0
 800061c:	f000 fa0f 	bl	8000a3e <msp_exprecv_data>
	msp_exp_state.processed_length += len;
 8000620:	69e1      	ldr	r1, [r4, #28]
 8000622:	1876      	adds	r6, r6, r1
 8000624:	61e6      	str	r6, [r4, #28]
	msp_exp_state.last_received_frame_id = frame_id;
 8000626:	71a7      	strb	r7, [r4, #6]
		code = handle_incoming_send_frame(opcode, frame_id, dl);
 8000628:	2700      	movs	r7, #0
 800062a:	e071      	b.n	8000710 <msp_recv_callback+0x174>
	else if (msp_exp_state.busy) /* If we are busy, just return */
 800062c:	78a3      	ldrb	r3, [r4, #2]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0c6      	beq.n	80005c0 <msp_recv_callback+0x24>
		return MSP_EXP_ERR_IS_BUSY;
 8000632:	2701      	movs	r7, #1
		return MSP_EXP_ERR_FCS_MISMATCH;
 8000634:	427f      	negs	r7, r7
 8000636:	e06d      	b.n	8000714 <msp_recv_callback+0x178>
		if (len != 9) {
 8000638:	2e09      	cmp	r6, #9
 800063a:	d000      	beq.n	800063e <msp_recv_callback+0xa2>
 800063c:	e0a2      	b.n	8000784 <msp_recv_callback+0x1e8>
			dl = msp_from_bigendian32(frame + 1);
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	3001      	adds	r0, #1
 8000642:	f7ff ff83 	bl	800054c <msp_from_bigendian32>
 8000646:	2330      	movs	r3, #48	; 0x30
 8000648:	9a01      	ldr	r2, [sp, #4]
 800064a:	0006      	movs	r6, r0
	switch (MSP_OP_TYPE(opcode)) {
 800064c:	401a      	ands	r2, r3
 800064e:	2a20      	cmp	r2, #32
 8000650:	d100      	bne.n	8000654 <msp_recv_callback+0xb8>
 8000652:	e078      	b.n	8000746 <msp_recv_callback+0x1aa>
 8000654:	d805      	bhi.n	8000662 <msp_recv_callback+0xc6>
 8000656:	2a00      	cmp	r2, #0
 8000658:	d01b      	beq.n	8000692 <msp_recv_callback+0xf6>
 800065a:	2a10      	cmp	r2, #16
 800065c:	d05d      	beq.n	800071a <msp_recv_callback+0x17e>
			code = MSP_EXP_ERR_FAULTY_FRAME;
 800065e:	2707      	movs	r7, #7
 8000660:	e08a      	b.n	8000778 <msp_recv_callback+0x1dc>
	switch (MSP_OP_TYPE(opcode)) {
 8000662:	2a30      	cmp	r2, #48	; 0x30
 8000664:	d1fb      	bne.n	800065e <msp_recv_callback+0xc2>
	ensure_ready_state();
 8000666:	f7ff ff7b 	bl	8000560 <ensure_ready_state>
	msp_exp_state.processed_length = 0;
 800066a:	2300      	movs	r3, #0
	if (msp_seqflags_is_set(&msp_exp_state.seqflags, opcode, frame_id)) {
 800066c:	003a      	movs	r2, r7
 800066e:	0029      	movs	r1, r5
 8000670:	4847      	ldr	r0, [pc, #284]	; (8000790 <msp_recv_callback+0x1f4>)
	msp_exp_state.transaction_id = frame_id;
 8000672:	7127      	strb	r7, [r4, #4]
	msp_exp_state.last_received_frame_id = frame_id;
 8000674:	71a7      	strb	r7, [r4, #6]
	msp_exp_state.opcode = opcode;
 8000676:	71e5      	strb	r5, [r4, #7]
	msp_exp_state.total_length = dl;
 8000678:	61a6      	str	r6, [r4, #24]
	msp_exp_state.processed_length = 0;
 800067a:	61e3      	str	r3, [r4, #28]
	if (msp_seqflags_is_set(&msp_exp_state.seqflags, opcode, frame_id)) {
 800067c:	f000 fa84 	bl	8000b88 <msp_seqflags_is_set>
 8000680:	1e07      	subs	r7, r0, #0
 8000682:	d15b      	bne.n	800073c <msp_recv_callback+0x1a0>
		msp_exp_state.type = MSP_EXP_STATE_OBC_SEND_RX;
 8000684:	2301      	movs	r3, #1
		msp_exprecv_start(opcode, dl);
 8000686:	0031      	movs	r1, r6
 8000688:	0028      	movs	r0, r5
		msp_exp_state.type = MSP_EXP_STATE_OBC_SEND_RX;
 800068a:	7023      	strb	r3, [r4, #0]
		msp_exprecv_start(opcode, dl);
 800068c:	f000 f9d6 	bl	8000a3c <msp_exprecv_start>
 8000690:	e03e      	b.n	8000710 <msp_recv_callback+0x174>
	switch (opcode) {
 8000692:	2d02      	cmp	r5, #2
 8000694:	d006      	beq.n	80006a4 <msp_recv_callback+0x108>
 8000696:	2d03      	cmp	r5, #3
 8000698:	d025      	beq.n	80006e6 <msp_recv_callback+0x14a>
 800069a:	2d00      	cmp	r5, #0
 800069c:	d1df      	bne.n	800065e <msp_recv_callback+0xc2>
		ensure_ready_state();
 800069e:	f7ff ff5f 	bl	8000560 <ensure_ready_state>
		break;
 80006a2:	e7c1      	b.n	8000628 <msp_recv_callback+0x8c>
		if (msp_exp_state.processed_length + msp_exp_state.prev_data_length >= msp_exp_state.total_length) {
 80006a4:	69e3      	ldr	r3, [r4, #28]
 80006a6:	6a21      	ldr	r1, [r4, #32]
 80006a8:	69a2      	ldr	r2, [r4, #24]
 80006aa:	185b      	adds	r3, r3, r1
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d2d6      	bcs.n	800065e <msp_recv_callback+0xc2>
		} else if (frame_id != msp_exp_state.frame_id) {
 80006b0:	7963      	ldrb	r3, [r4, #5]
 80006b2:	429f      	cmp	r7, r3
 80006b4:	d1d3      	bne.n	800065e <msp_recv_callback+0xc2>
		} else if (msp_exp_state.type == MSP_EXP_STATE_OBC_REQ_RESPONSE) {
 80006b6:	7823      	ldrb	r3, [r4, #0]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d108      	bne.n	80006ce <msp_recv_callback+0x132>
			msp_exp_state.processed_length = 0;
 80006bc:	2700      	movs	r7, #0
 80006be:	61e7      	str	r7, [r4, #28]
			msp_exp_state.frame_id ^= 1;
 80006c0:	7962      	ldrb	r2, [r4, #5]
 80006c2:	3b02      	subs	r3, #2
 80006c4:	4053      	eors	r3, r2
 80006c6:	7163      	strb	r3, [r4, #5]
			msp_exp_state.type = MSP_EXP_STATE_OBC_REQ_TX;
 80006c8:	2304      	movs	r3, #4
		msp_exp_state.type = MSP_EXP_STATE_OBC_SEND_RX;
 80006ca:	7023      	strb	r3, [r4, #0]
 80006cc:	e020      	b.n	8000710 <msp_recv_callback+0x174>
		} else if (msp_exp_state.type == MSP_EXP_STATE_OBC_REQ_TX) {
 80006ce:	7823      	ldrb	r3, [r4, #0]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d1c4      	bne.n	800065e <msp_recv_callback+0xc2>
			msp_exp_state.processed_length += msp_exp_state.prev_data_length;
 80006d4:	6a23      	ldr	r3, [r4, #32]
 80006d6:	69e2      	ldr	r2, [r4, #28]
 80006d8:	189b      	adds	r3, r3, r2
 80006da:	61e3      	str	r3, [r4, #28]
			msp_exp_state.frame_id ^= 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	7962      	ldrb	r2, [r4, #5]
 80006e0:	4053      	eors	r3, r2
 80006e2:	7163      	strb	r3, [r4, #5]
			code = 0;
 80006e4:	e7a0      	b.n	8000628 <msp_recv_callback+0x8c>
		if (!(msp_exp_state.type == MSP_EXP_STATE_OBC_REQ_RESPONSE ||
 80006e6:	7823      	ldrb	r3, [r4, #0]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d002      	beq.n	80006f2 <msp_recv_callback+0x156>
			  msp_exp_state.type == MSP_EXP_STATE_OBC_REQ_TX)) {
 80006ec:	7823      	ldrb	r3, [r4, #0]
		if (!(msp_exp_state.type == MSP_EXP_STATE_OBC_REQ_RESPONSE ||
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d1b5      	bne.n	800065e <msp_recv_callback+0xc2>
		} else if (frame_id != msp_exp_state.transaction_id) {
 80006f2:	7923      	ldrb	r3, [r4, #4]
 80006f4:	429f      	cmp	r7, r3
 80006f6:	d1b2      	bne.n	800065e <msp_recv_callback+0xc2>
			msp_expsend_complete(msp_exp_state.opcode);
 80006f8:	79e0      	ldrb	r0, [r4, #7]
 80006fa:	b2c0      	uxtb	r0, r0
 80006fc:	f000 f992 	bl	8000a24 <msp_expsend_complete>
			msp_seqflags_set(&msp_exp_state.seqflags, msp_exp_state.opcode, frame_id);
 8000700:	003a      	movs	r2, r7
			msp_exp_state.type = MSP_EXP_STATE_READY;
 8000702:	2700      	movs	r7, #0
			msp_seqflags_set(&msp_exp_state.seqflags, msp_exp_state.opcode, frame_id);
 8000704:	79e1      	ldrb	r1, [r4, #7]
 8000706:	4822      	ldr	r0, [pc, #136]	; (8000790 <msp_recv_callback+0x1f4>)
 8000708:	b2c9      	uxtb	r1, r1
 800070a:	f000 fa5c 	bl	8000bc6 <msp_seqflags_set>
			msp_exp_state.type = MSP_EXP_STATE_READY;
 800070e:	7027      	strb	r7, [r4, #0]
	msp_exp_state.busy = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	70a3      	strb	r3, [r4, #2]
}
 8000714:	0038      	movs	r0, r7
 8000716:	b009      	add	sp, #36	; 0x24
 8000718:	bdf0      	pop	{r4, r5, r6, r7, pc}
	msp_exp_state.total_length = 0;
 800071a:	2600      	movs	r6, #0
	ensure_ready_state();
 800071c:	f7ff ff20 	bl	8000560 <ensure_ready_state>
	if (msp_seqflags_is_set(&msp_exp_state.seqflags, opcode, frame_id)) {
 8000720:	003a      	movs	r2, r7
 8000722:	0029      	movs	r1, r5
 8000724:	481a      	ldr	r0, [pc, #104]	; (8000790 <msp_recv_callback+0x1f4>)
	msp_exp_state.transaction_id = frame_id;
 8000726:	7127      	strb	r7, [r4, #4]
	msp_exp_state.last_received_frame_id = frame_id;
 8000728:	71a7      	strb	r7, [r4, #6]
	msp_exp_state.opcode = opcode;
 800072a:	71e5      	strb	r5, [r4, #7]
	msp_exp_state.total_length = 0;
 800072c:	61a6      	str	r6, [r4, #24]
	msp_exp_state.processed_length = 0;
 800072e:	61e6      	str	r6, [r4, #28]
	msp_exp_state.prev_data_length = 0;
 8000730:	6226      	str	r6, [r4, #32]
	if (msp_seqflags_is_set(&msp_exp_state.seqflags, opcode, frame_id)) {
 8000732:	f000 fa29 	bl	8000b88 <msp_seqflags_is_set>
 8000736:	0007      	movs	r7, r0
 8000738:	42b0      	cmp	r0, r6
 800073a:	d002      	beq.n	8000742 <msp_recv_callback+0x1a6>
		msp_exp_state.type = MSP_EXP_STATE_OBC_SEND_RX_DUPLICATE;
 800073c:	2302      	movs	r3, #2
 800073e:	7023      	strb	r3, [r4, #0]
 8000740:	e772      	b.n	8000628 <msp_recv_callback+0x8c>
		msp_exp_state.type = MSP_EXP_STATE_OBC_SEND_RX;
 8000742:	2301      	movs	r3, #1
 8000744:	e7c1      	b.n	80006ca <msp_recv_callback+0x12e>
	ensure_ready_state();
 8000746:	f7ff ff0b 	bl	8000560 <ensure_ready_state>
	msp_exp_state.transaction_id = msp_seqflags_get_next(&msp_exp_state.seqflags, opcode);
 800074a:	0029      	movs	r1, r5
 800074c:	4810      	ldr	r0, [pc, #64]	; (8000790 <msp_recv_callback+0x1f4>)
 800074e:	f000 fa02 	bl	8000b56 <msp_seqflags_get_next>
	msp_exp_state.processed_length = 0;
 8000752:	2700      	movs	r7, #0
	msp_exp_state.transaction_id = msp_seqflags_get_next(&msp_exp_state.seqflags, opcode);
 8000754:	b2c0      	uxtb	r0, r0
 8000756:	7120      	strb	r0, [r4, #4]
	msp_exp_state.frame_id = msp_exp_state.transaction_id;
 8000758:	7923      	ldrb	r3, [r4, #4]
	msp_expsend_start(opcode, &data_to_send);
 800075a:	0028      	movs	r0, r5
	msp_exp_state.frame_id = msp_exp_state.transaction_id;
 800075c:	b2db      	uxtb	r3, r3
	msp_expsend_start(opcode, &data_to_send);
 800075e:	a903      	add	r1, sp, #12
	msp_exp_state.frame_id = msp_exp_state.transaction_id;
 8000760:	7163      	strb	r3, [r4, #5]
	data_to_send = 0;
 8000762:	9703      	str	r7, [sp, #12]
	msp_exp_state.opcode = opcode;
 8000764:	71e5      	strb	r5, [r4, #7]
	msp_exp_state.processed_length = 0;
 8000766:	61e7      	str	r7, [r4, #28]
	msp_exp_state.prev_data_length = 0;
 8000768:	6227      	str	r7, [r4, #32]
	msp_expsend_start(opcode, &data_to_send);
 800076a:	f000 f93f 	bl	80009ec <msp_expsend_start>
	msp_exp_state.total_length = data_to_send;
 800076e:	9b03      	ldr	r3, [sp, #12]
 8000770:	61a3      	str	r3, [r4, #24]
	msp_exp_state.type = MSP_EXP_STATE_OBC_REQ_RESPONSE;
 8000772:	2303      	movs	r3, #3
 8000774:	e7a9      	b.n	80006ca <msp_recv_callback+0x12e>
		return MSP_EXP_ERR_UNEXPECTED_DATA_FRAME;
 8000776:	2705      	movs	r7, #5
			code = MSP_EXP_ERR_FAULTY_FRAME;
 8000778:	427f      	negs	r7, r7
 800077a:	e7c9      	b.n	8000710 <msp_recv_callback+0x174>
		return MSP_EXP_ERR_DUPLICATE_FRAME;
 800077c:	2706      	movs	r7, #6
 800077e:	e7fb      	b.n	8000778 <msp_recv_callback+0x1dc>
			return MSP_EXP_ERR_INVALID_DATA_FRAME;
 8000780:	2704      	movs	r7, #4
 8000782:	e7f9      	b.n	8000778 <msp_recv_callback+0x1dc>
			return MSP_EXP_ERR_INVALID_HEADER_FRAME;
 8000784:	2703      	movs	r7, #3
 8000786:	e7f7      	b.n	8000778 <msp_recv_callback+0x1dc>
		return MSP_EXP_ERR_FCS_MISMATCH;
 8000788:	2702      	movs	r7, #2
 800078a:	e753      	b.n	8000634 <msp_recv_callback+0x98>
 800078c:	200004a0 	.word	0x200004a0
 8000790:	200004a8 	.word	0x200004a8

08000794 <msp_send_callback>:
{
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!msp_exp_state.initialized) {
 8000796:	4c5c      	ldr	r4, [pc, #368]	; (8000908 <msp_send_callback+0x174>)
{
 8000798:	0005      	movs	r5, r0
	if (!msp_exp_state.initialized) {
 800079a:	7863      	ldrb	r3, [r4, #1]
{
 800079c:	000e      	movs	r6, r1
 800079e:	0017      	movs	r7, r2
 80007a0:	b089      	sub	sp, #36	; 0x24
	if (!msp_exp_state.initialized) {
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d113      	bne.n	80007ce <msp_send_callback+0x3a>
		msp_exp_state_initialize(msp_seqflags_init());
 80007a6:	a804      	add	r0, sp, #16
 80007a8:	f000 f9b8 	bl	8000b1c <msp_seqflags_init>
 80007ac:	9804      	ldr	r0, [sp, #16]
 80007ae:	9905      	ldr	r1, [sp, #20]
 80007b0:	9a06      	ldr	r2, [sp, #24]
 80007b2:	9b07      	ldr	r3, [sp, #28]
 80007b4:	f000 f8f8 	bl	80009a8 <msp_exp_state_initialize>
	msp_exp_state.busy = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	70a3      	strb	r3, [r4, #2]
	switch (msp_exp_state.type) {
 80007bc:	7823      	ldrb	r3, [r4, #0]
 80007be:	b2d8      	uxtb	r0, r3
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d828      	bhi.n	8000816 <msp_send_callback+0x82>
 80007c4:	f7ff fca0 	bl	8000108 <__gnu_thumb1_case_uqi>
 80007c8:	1a5c5c0f 	.word	0x1a5c5c0f
 80007cc:	23          	.byte	0x23
 80007cd:	00          	.byte	0x00
	} else if (msp_exp_state.busy) {
 80007ce:	78a3      	ldrb	r3, [r4, #2]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0f1      	beq.n	80007b8 <msp_send_callback+0x24>
		msp_exp_frame_format_empty_header(data, MSP_OP_EXP_BUSY, addr);
 80007d4:	2105      	movs	r1, #5
 80007d6:	f000 f8e0 	bl	800099a <msp_exp_frame_format_empty_header>
		*len = 9; /* length of header frame = 9 */
 80007da:	2309      	movs	r3, #9
		return MSP_EXP_ERR_IS_BUSY;
 80007dc:	2001      	movs	r0, #1
		*len = 9; /* length of header frame = 9 */
 80007de:	6033      	str	r3, [r6, #0]
		return MSP_EXP_ERR_IS_BUSY;
 80007e0:	4240      	negs	r0, r0
}
 80007e2:	b009      	add	sp, #36	; 0x24
 80007e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msp_exp_frame_format_empty_header(buf, MSP_OP_NULL, addr);
 80007e6:	003a      	movs	r2, r7
 80007e8:	2100      	movs	r1, #0
 80007ea:	0028      	movs	r0, r5
 80007ec:	f000 f8d5 	bl	800099a <msp_exp_frame_format_empty_header>
	*len = 9;
 80007f0:	2309      	movs	r3, #9
 80007f2:	6033      	str	r3, [r6, #0]
		code = handle_outgoing_response_frame(buf, len, addr);
 80007f4:	2000      	movs	r0, #0
	msp_exp_state.busy = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	70a3      	strb	r3, [r4, #2]
	return code;
 80007fa:	e7f2      	b.n	80007e2 <msp_send_callback+0x4e>
	msp_exp_frame_format_header(buf, MSP_OP_EXP_SEND, msp_exp_state.transaction_id, msp_exp_state.total_length, addr);
 80007fc:	2104      	movs	r1, #4
 80007fe:	7922      	ldrb	r2, [r4, #4]
 8000800:	69a3      	ldr	r3, [r4, #24]
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	9700      	str	r7, [sp, #0]
 8000806:	0028      	movs	r0, r5
 8000808:	f000 f8ae 	bl	8000968 <msp_exp_frame_format_header>
 800080c:	e7f0      	b.n	80007f0 <msp_send_callback+0x5c>
	if (msp_exp_state.processed_length >= msp_exp_state.total_length) {
 800080e:	69e2      	ldr	r2, [r4, #28]
 8000810:	69a3      	ldr	r3, [r4, #24]
 8000812:	429a      	cmp	r2, r3
 8000814:	d309      	bcc.n	800082a <msp_send_callback+0x96>
		ensure_ready_state();
 8000816:	f7ff fea3 	bl	8000560 <ensure_ready_state>
		msp_exp_frame_format_empty_header(buf, MSP_OP_NULL, addr);
 800081a:	003a      	movs	r2, r7
 800081c:	2100      	movs	r1, #0
 800081e:	0028      	movs	r0, r5
 8000820:	f000 f8bb 	bl	800099a <msp_exp_frame_format_empty_header>
		*len = 9;
 8000824:	2309      	movs	r3, #9
 8000826:	6033      	str	r3, [r6, #0]
 8000828:	e055      	b.n	80008d6 <msp_send_callback+0x142>
	remaining_len = msp_exp_state.total_length - msp_exp_state.processed_length;
 800082a:	69a2      	ldr	r2, [r4, #24]
 800082c:	69e3      	ldr	r3, [r4, #28]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	9302      	str	r3, [sp, #8]
	if (remaining_len < MSP_EXP_MTU) {
 8000832:	23fd      	movs	r3, #253	; 0xfd
 8000834:	9a02      	ldr	r2, [sp, #8]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	429a      	cmp	r2, r3
 800083a:	d902      	bls.n	8000842 <msp_send_callback+0xae>
	send_len = MSP_EXP_MTU;
 800083c:	23fc      	movs	r3, #252	; 0xfc
 800083e:	33ff      	adds	r3, #255	; 0xff
 8000840:	9302      	str	r3, [sp, #8]
	msp_exp_state.prev_data_length = send_len;
 8000842:	9b02      	ldr	r3, [sp, #8]
        msp_expsend_data(msp_exp_state.opcode, buf + 1, send_len, msp_exp_state.processed_length);
 8000844:	1c69      	adds	r1, r5, #1
	msp_exp_state.prev_data_length = send_len;
 8000846:	6223      	str	r3, [r4, #32]
	buf[0] = MSP_OP_DATA_FRAME | (msp_exp_state.frame_id << 7);
 8000848:	2301      	movs	r3, #1
 800084a:	7962      	ldrb	r2, [r4, #5]
 800084c:	01d2      	lsls	r2, r2, #7
 800084e:	4313      	orrs	r3, r2
 8000850:	702b      	strb	r3, [r5, #0]
        msp_expsend_data(msp_exp_state.opcode, buf + 1, send_len, msp_exp_state.processed_length);
 8000852:	79e0      	ldrb	r0, [r4, #7]
 8000854:	9a02      	ldr	r2, [sp, #8]
 8000856:	69e3      	ldr	r3, [r4, #28]
 8000858:	b2c0      	uxtb	r0, r0
 800085a:	f000 f8d4 	bl	8000a06 <msp_expsend_data>
	fcs = msp_exp_frame_generate_fcs(buf, 0, send_len+1, addr);
 800085e:	9b02      	ldr	r3, [sp, #8]
 8000860:	2100      	movs	r1, #0
 8000862:	3301      	adds	r3, #1
 8000864:	9303      	str	r3, [sp, #12]
 8000866:	9a03      	ldr	r2, [sp, #12]
 8000868:	003b      	movs	r3, r7
 800086a:	0028      	movs	r0, r5
 800086c:	f000 f850 	bl	8000910 <msp_exp_frame_generate_fcs>
	msp_to_bigendian32(buf + (send_len + 1), fcs);
 8000870:	9b03      	ldr	r3, [sp, #12]
	fcs = msp_exp_frame_generate_fcs(buf, 0, send_len+1, addr);
 8000872:	0001      	movs	r1, r0
	msp_to_bigendian32(buf + (send_len + 1), fcs);
 8000874:	18e8      	adds	r0, r5, r3
 8000876:	f7ff fe61 	bl	800053c <msp_to_bigendian32>
	*len = send_len+5;
 800087a:	9b02      	ldr	r3, [sp, #8]
 800087c:	3305      	adds	r3, #5
 800087e:	e7b8      	b.n	80007f2 <msp_send_callback+0x5e>
	if (msp_exp_state.type == MSP_EXP_STATE_OBC_SEND_RX_DUPLICATE) {
 8000880:	7823      	ldrb	r3, [r4, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d10c      	bne.n	80008a0 <msp_send_callback+0x10c>
		msp_exp_frame_format_header(buf, MSP_OP_T_ACK, msp_exp_state.transaction_id, 0, addr);
 8000886:	7922      	ldrb	r2, [r4, #4]
 8000888:	2300      	movs	r3, #0
 800088a:	0028      	movs	r0, r5
 800088c:	2103      	movs	r1, #3
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	9700      	str	r7, [sp, #0]
 8000892:	f000 f869 	bl	8000968 <msp_exp_frame_format_header>
		*len = 9;
 8000896:	2309      	movs	r3, #9
		msp_exp_state.type = MSP_EXP_STATE_READY;
 8000898:	2000      	movs	r0, #0
		*len = 9;
 800089a:	6033      	str	r3, [r6, #0]
		msp_exp_state.type = MSP_EXP_STATE_READY;
 800089c:	7020      	strb	r0, [r4, #0]
		return 0;
 800089e:	e7aa      	b.n	80007f6 <msp_send_callback+0x62>
	if (msp_exp_state.processed_length >= msp_exp_state.total_length) {
 80008a0:	69e2      	ldr	r2, [r4, #28]
 80008a2:	69a3      	ldr	r3, [r4, #24]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d328      	bcc.n	80008fa <msp_send_callback+0x166>
		msp_exp_frame_format_header(buf, MSP_OP_T_ACK, msp_exp_state.transaction_id, 0, addr);
 80008a8:	7922      	ldrb	r2, [r4, #4]
 80008aa:	2300      	movs	r3, #0
 80008ac:	0028      	movs	r0, r5
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	9700      	str	r7, [sp, #0]
 80008b2:	2103      	movs	r1, #3
 80008b4:	f000 f858 	bl	8000968 <msp_exp_frame_format_header>
		msp_exp_state.type = MSP_EXP_STATE_READY;
 80008b8:	2500      	movs	r5, #0
		*len = 9;
 80008ba:	2309      	movs	r3, #9
 80008bc:	2230      	movs	r2, #48	; 0x30
 80008be:	6033      	str	r3, [r6, #0]
		msp_exp_state.type = MSP_EXP_STATE_READY;
 80008c0:	7025      	strb	r5, [r4, #0]
		opcode = msp_exp_state.opcode;
 80008c2:	79e6      	ldrb	r6, [r4, #7]
		transaction_id = msp_exp_state.transaction_id;
 80008c4:	7927      	ldrb	r7, [r4, #4]
		switch (MSP_OP_TYPE(msp_exp_state.opcode)) {
 80008c6:	79e3      	ldrb	r3, [r4, #7]
		opcode = msp_exp_state.opcode;
 80008c8:	b2f6      	uxtb	r6, r6
		transaction_id = msp_exp_state.transaction_id;
 80008ca:	b2ff      	uxtb	r7, r7
		switch (MSP_OP_TYPE(msp_exp_state.opcode)) {
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b10      	cmp	r3, #16
 80008d0:	d004      	beq.n	80008dc <msp_send_callback+0x148>
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d00c      	beq.n	80008f0 <msp_send_callback+0x15c>
		code = MSP_EXP_ERR_STATE_ERROR;
 80008d6:	2008      	movs	r0, #8
 80008d8:	4240      	negs	r0, r0
		break;
 80008da:	e78c      	b.n	80007f6 <msp_send_callback+0x62>
			msp_exprecv_syscommand(msp_exp_state.opcode);
 80008dc:	79e0      	ldrb	r0, [r4, #7]
 80008de:	b2c0      	uxtb	r0, r0
 80008e0:	f000 f8b0 	bl	8000a44 <msp_exprecv_syscommand>
			msp_seqflags_set(&msp_exp_state.seqflags, opcode, transaction_id);
 80008e4:	003a      	movs	r2, r7
 80008e6:	0031      	movs	r1, r6
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <msp_send_callback+0x178>)
 80008ea:	f000 f96c 	bl	8000bc6 <msp_seqflags_set>
			break;
 80008ee:	e781      	b.n	80007f4 <msp_send_callback+0x60>
			msp_exprecv_complete(msp_exp_state.opcode);
 80008f0:	79e0      	ldrb	r0, [r4, #7]
 80008f2:	b2c0      	uxtb	r0, r0
 80008f4:	f000 f8a4 	bl	8000a40 <msp_exprecv_complete>
 80008f8:	e7f4      	b.n	80008e4 <msp_send_callback+0x150>
		msp_exp_frame_format_header(buf, MSP_OP_F_ACK, msp_exp_state.last_received_frame_id, 0, addr);
 80008fa:	79a2      	ldrb	r2, [r4, #6]
 80008fc:	2300      	movs	r3, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	9700      	str	r7, [sp, #0]
 8000904:	e77f      	b.n	8000806 <msp_send_callback+0x72>
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	200004a0 	.word	0x200004a0
 800090c:	200004a8 	.word	0x200004a8

08000910 <msp_exp_frame_generate_fcs>:
{
	unsigned char pseudo_header;
	unsigned long remainder;

	/* Format the pseudo header */
	pseudo_header = (addr) << 1;
 8000910:	005b      	lsls	r3, r3, #1
{
 8000912:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pseudo_header = (addr) << 1;
 8000914:	b2db      	uxtb	r3, r3
{
 8000916:	0004      	movs	r4, r0
 8000918:	0015      	movs	r5, r2
	if (!from_obc)
 800091a:	2900      	cmp	r1, #0
 800091c:	d00d      	beq.n	800093a <msp_exp_frame_generate_fcs+0x2a>
		pseudo_header |= 0x01;
 800091e:	466a      	mov	r2, sp
 8000920:	71d3      	strb	r3, [r2, #7]

	remainder = msp_crc32(&pseudo_header, 1, 0);
 8000922:	466b      	mov	r3, sp
 8000924:	2200      	movs	r2, #0
 8000926:	1dd8      	adds	r0, r3, #7
 8000928:	2101      	movs	r1, #1
 800092a:	f7ff fdd1 	bl	80004d0 <msp_crc32>

	/* Now account for the rest of the frame */
	remainder = msp_crc32(data, len, remainder);
 800092e:	0029      	movs	r1, r5
	remainder = msp_crc32(&pseudo_header, 1, 0);
 8000930:	0002      	movs	r2, r0
	remainder = msp_crc32(data, len, remainder);
 8000932:	0020      	movs	r0, r4
 8000934:	f7ff fdcc 	bl	80004d0 <msp_crc32>

	return remainder;
}
 8000938:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		pseudo_header |= 0x01;
 800093a:	2201      	movs	r2, #1
 800093c:	4313      	orrs	r3, r2
 800093e:	e7ee      	b.n	800091e <msp_exp_frame_generate_fcs+0xe>

08000940 <msp_exp_frame_fcs_valid>:
 *            this should have the value 9. In the case of a data frame, this
 *            should have the value 5 + the length of the data field.
 * @return 1 if the FCS is valid, 0 otherwise.
 */
int msp_exp_frame_fcs_valid(const unsigned char *data, int from_obc, unsigned long len, char addr)
{
 8000940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	unsigned long fcs;

	/* FCS is the last 4 bytes of the frame */
	fcs = msp_from_bigendian32(data + (len - 4));
 8000942:	1f15      	subs	r5, r2, #4
{
 8000944:	0004      	movs	r4, r0
	fcs = msp_from_bigendian32(data + (len - 4));
 8000946:	1940      	adds	r0, r0, r5
{
 8000948:	000e      	movs	r6, r1
 800094a:	001f      	movs	r7, r3
	fcs = msp_from_bigendian32(data + (len - 4));
 800094c:	f7ff fdfe 	bl	800054c <msp_from_bigendian32>

	/* Check if the FCS' match up. */
	if (fcs == msp_exp_frame_generate_fcs(data, from_obc, len - 4, addr))
 8000950:	003b      	movs	r3, r7
 8000952:	002a      	movs	r2, r5
 8000954:	0031      	movs	r1, r6
	fcs = msp_from_bigendian32(data + (len - 4));
 8000956:	9001      	str	r0, [sp, #4]
	if (fcs == msp_exp_frame_generate_fcs(data, from_obc, len - 4, addr))
 8000958:	0020      	movs	r0, r4
 800095a:	f7ff ffd9 	bl	8000910 <msp_exp_frame_generate_fcs>
 800095e:	9b01      	ldr	r3, [sp, #4]
 8000960:	1ac0      	subs	r0, r0, r3
 8000962:	4243      	negs	r3, r0
 8000964:	4158      	adcs	r0, r3
		return 1;
	else
		return 0;
}
 8000966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000968 <msp_exp_frame_format_header>:
 *
 * This function formats the entire frame, including the FCS value. The
 * resulting sequence of bytes can be sent directly to the OBC.
 */
void msp_exp_frame_format_header(unsigned char *dest, unsigned char opcode, unsigned char frame_id, unsigned long dl, char addr)
{
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	0004      	movs	r4, r0
 800096c:	0008      	movs	r0, r1
 800096e:	0019      	movs	r1, r3
 8000970:	ab04      	add	r3, sp, #16
 8000972:	781d      	ldrb	r5, [r3, #0]
	unsigned long fcs;

	/* Format OP code and Frame-ID */
	dest[0] = opcode & 0x7F;
 8000974:	237f      	movs	r3, #127	; 0x7f
	dest[0] |= (frame_id & 0x1) << 7;
 8000976:	01d2      	lsls	r2, r2, #7
	dest[0] = opcode & 0x7F;
 8000978:	4018      	ands	r0, r3
	dest[0] |= (frame_id & 0x1) << 7;
 800097a:	4310      	orrs	r0, r2
 800097c:	7020      	strb	r0, [r4, #0]

	/* Format the DL field */
	msp_to_bigendian32(dest + 1, dl);
 800097e:	1c60      	adds	r0, r4, #1
 8000980:	f7ff fddc 	bl	800053c <msp_to_bigendian32>

	/* Format the FCS field */
	fcs = msp_exp_frame_generate_fcs(dest, 0, 5, addr);
 8000984:	002b      	movs	r3, r5
 8000986:	2205      	movs	r2, #5
 8000988:	2100      	movs	r1, #0
 800098a:	0020      	movs	r0, r4
 800098c:	f7ff ffc0 	bl	8000910 <msp_exp_frame_generate_fcs>
 8000990:	0001      	movs	r1, r0
	msp_to_bigendian32(dest + 5, fcs);
 8000992:	1d60      	adds	r0, r4, #5
 8000994:	f7ff fdd2 	bl	800053c <msp_to_bigendian32>
}
 8000998:	bd70      	pop	{r4, r5, r6, pc}

0800099a <msp_exp_frame_format_empty_header>:
 * This function should be used for header frames with opcodes that have traits
 * FID0 and DL0.
 */
void msp_exp_frame_format_empty_header(unsigned char *dest, unsigned char opcode, char addr)
{
	msp_exp_frame_format_header(dest, opcode, 0, 0, addr);
 800099a:	2300      	movs	r3, #0
{
 800099c:	b507      	push	{r0, r1, r2, lr}
	msp_exp_frame_format_header(dest, opcode, 0, 0, addr);
 800099e:	9200      	str	r2, [sp, #0]
 80009a0:	001a      	movs	r2, r3
 80009a2:	f7ff ffe1 	bl	8000968 <msp_exp_frame_format_header>
}
 80009a6:	bd07      	pop	{r0, r1, r2, pc}

080009a8 <msp_exp_state_initialize>:
 * If available, the sequence flags passed as an argument should be the
 * sequence flags that were saved to non-volatile memory/storage before the
 * experiment was restarted/powered off.
 */
void msp_exp_state_initialize(msp_seqflags_t seqflags)
{
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	b085      	sub	sp, #20
 80009ac:	466c      	mov	r4, sp
 80009ae:	6061      	str	r1, [r4, #4]
	msp_exp_state.type = MSP_EXP_STATE_READY;
 80009b0:	4907      	ldr	r1, [pc, #28]	; (80009d0 <msp_exp_state_initialize+0x28>)
{
 80009b2:	9000      	str	r0, [sp, #0]
 80009b4:	60a2      	str	r2, [r4, #8]
	msp_exp_state.type = MSP_EXP_STATE_READY;
 80009b6:	2000      	movs	r0, #0

	msp_exp_state.seqflags = seqflags;
 80009b8:	000a      	movs	r2, r1
	msp_exp_state.type = MSP_EXP_STATE_READY;
 80009ba:	7008      	strb	r0, [r1, #0]
	msp_exp_state.seqflags = seqflags;
 80009bc:	3208      	adds	r2, #8
 80009be:	cce0      	ldmia	r4!, {r5, r6, r7}
 80009c0:	c2e0      	stmia	r2!, {r5, r6, r7}
 80009c2:	6013      	str	r3, [r2, #0]

	msp_exp_state.busy = 0;
	msp_exp_state.initialized = 1;
 80009c4:	2301      	movs	r3, #1
	msp_exp_state.busy = 0;
 80009c6:	7088      	strb	r0, [r1, #2]
	msp_exp_state.initialized = 1;
 80009c8:	704b      	strb	r3, [r1, #1]
}
 80009ca:	b005      	add	sp, #20
 80009cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	200004a0 	.word	0x200004a0

080009d4 <msp_exp_state_get_seqflags>:
 * experiment state on start up. They should retreived at least once before
 * rebooting and also preferably on regular intervals in case the experiment
 * restarts unexpectedly.
 */
msp_seqflags_t msp_exp_state_get_seqflags(void)
{
 80009d4:	b510      	push	{r4, lr}
 80009d6:	0004      	movs	r4, r0
	return msp_exp_state.seqflags;
 80009d8:	4903      	ldr	r1, [pc, #12]	; (80009e8 <msp_exp_state_get_seqflags+0x14>)
 80009da:	2210      	movs	r2, #16
 80009dc:	3108      	adds	r1, #8
 80009de:	f003 fcf7 	bl	80043d0 <memcpy>
}
 80009e2:	0020      	movs	r0, r4
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	200004a0 	.word	0x200004a0

080009ec <msp_expsend_start>:
bool sic_error = false;
int i = 0;


void msp_expsend_start(unsigned char opcode, unsigned long *len)
{
 80009ec:	b510      	push	{r4, lr}
 80009ee:	000c      	movs	r4, r1
  if (opcode == REQ_PIEZO)
 80009f0:	2860      	cmp	r0, #96	; 0x60
 80009f2:	d103      	bne.n	80009fc <msp_expsend_start+0x10>
  {
    *len = piezo_get_data_length();
 80009f4:	f000 fd6e 	bl	80014d4 <piezo_get_data_length>
 80009f8:	6020      	str	r0, [r4, #0]
  }
  else if (opcode == REQ_SIC)
  {
    *len = 64;
  }
}
 80009fa:	bd10      	pop	{r4, pc}
  else if (opcode == REQ_SIC)
 80009fc:	2861      	cmp	r0, #97	; 0x61
 80009fe:	d1fc      	bne.n	80009fa <msp_expsend_start+0xe>
    *len = 64;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	600b      	str	r3, [r1, #0]
}
 8000a04:	e7f9      	b.n	80009fa <msp_expsend_start+0xe>

08000a06 <msp_expsend_data>:

void msp_expsend_data(unsigned char opcode, unsigned char *buf, unsigned long len, unsigned long offset)
{
 8000a06:	b510      	push	{r4, lr}
 8000a08:	0004      	movs	r4, r0
 8000a0a:	0008      	movs	r0, r1
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	001a      	movs	r2, r3
  if (opcode == REQ_PIEZO)
 8000a10:	2c60      	cmp	r4, #96	; 0x60
 8000a12:	d102      	bne.n	8000a1a <msp_expsend_data+0x14>
  {
    piezo_get_data(buf, len, offset);
 8000a14:	f000 fd4a 	bl	80014ac <piezo_get_data>
  }
  else if (opcode == REQ_SIC)
  {
     sic_get_data(buf, len, offset);
  }
}
 8000a18:	bd10      	pop	{r4, pc}
  else if (opcode == REQ_SIC)
 8000a1a:	2c61      	cmp	r4, #97	; 0x61
 8000a1c:	d1fc      	bne.n	8000a18 <msp_expsend_data+0x12>
     sic_get_data(buf, len, offset);
 8000a1e:	f000 fee3 	bl	80017e8 <sic_get_data>
}
 8000a22:	e7f9      	b.n	8000a18 <msp_expsend_data+0x12>

08000a24 <msp_expsend_complete>:

void msp_expsend_complete(unsigned char opcode)
{
 8000a24:	b510      	push	{r4, lr}
// add code to clear buffers
  if (opcode == REQ_PIEZO)
 8000a26:	2860      	cmp	r0, #96	; 0x60
 8000a28:	d102      	bne.n	8000a30 <msp_expsend_complete+0xc>
  {
    clear_piezo_buffer();
 8000a2a:	f000 fd11 	bl	8001450 <clear_piezo_buffer>
  }
  else if (opcode == REQ_SIC)
  {
     clear_sic_buffer();
  }
}
 8000a2e:	bd10      	pop	{r4, pc}
  else if (opcode == REQ_SIC)
 8000a30:	2861      	cmp	r0, #97	; 0x61
 8000a32:	d1fc      	bne.n	8000a2e <msp_expsend_complete+0xa>
     clear_sic_buffer();
 8000a34:	f000 fed0 	bl	80017d8 <clear_sic_buffer>
}
 8000a38:	e7f9      	b.n	8000a2e <msp_expsend_complete+0xa>

08000a3a <msp_expsend_error>:

void msp_expsend_error(unsigned char opcode, int error)
{
  //add code to set an error
}
 8000a3a:	4770      	bx	lr

08000a3c <msp_exprecv_start>:

void msp_exprecv_start(unsigned char opcode, unsigned long len)
{

}
 8000a3c:	4770      	bx	lr

08000a3e <msp_exprecv_data>:

void msp_exprecv_data(unsigned char opcode, const unsigned char *buf, unsigned long len, unsigned long offset)
{

}
 8000a3e:	4770      	bx	lr

08000a40 <msp_exprecv_complete>:

void msp_exprecv_complete(unsigned char opcode)
{

}
 8000a40:	4770      	bx	lr

08000a42 <msp_exprecv_error>:
 8000a42:	4770      	bx	lr

08000a44 <msp_exprecv_syscommand>:
{

}

void msp_exprecv_syscommand(unsigned char opcode)
{
 8000a44:	b510      	push	{r4, lr}
  switch(opcode)
 8000a46:	2812      	cmp	r0, #18
 8000a48:	d024      	beq.n	8000a94 <msp_exprecv_syscommand+0x50>
 8000a4a:	3850      	subs	r0, #80	; 0x50
 8000a4c:	b2c3      	uxtb	r3, r0
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d80f      	bhi.n	8000a72 <msp_exprecv_syscommand+0x2e>
 8000a52:	2806      	cmp	r0, #6
 8000a54:	d80d      	bhi.n	8000a72 <msp_exprecv_syscommand+0x2e>
 8000a56:	f7ff fb57 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000a5a:	0d04      	.short	0x0d04
 8000a5c:	29262317 	.word	0x29262317
 8000a60:	2c          	.byte	0x2c
 8000a61:	00          	.byte	0x00
  {
    case START_EXP_PIEZO:
      i = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <msp_exprecv_syscommand+0x74>)
      command_ptr = &piezo_start_exp;
 8000a66:	4915      	ldr	r1, [pc, #84]	; (8000abc <msp_exprecv_syscommand+0x78>)
      i = 1;
 8000a68:	6013      	str	r3, [r2, #0]
      command_ptr = &piezo_start_exp;
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <msp_exprecv_syscommand+0x7c>)
 8000a6c:	6011      	str	r1, [r2, #0]
      has_function_to_execute = true;
 8000a6e:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <msp_exprecv_syscommand+0x80>)
 8000a70:	7013      	strb	r3, [r2, #0]

    case VBAT_OFF:
      turn_off_vbat();
      break;
  }
}
 8000a72:	bd10      	pop	{r4, pc}
      i = 2;
 8000a74:	2202      	movs	r2, #2
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <msp_exprecv_syscommand+0x74>)
 8000a78:	601a      	str	r2, [r3, #0]
      command_ptr = &piezo_stop_exp;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <msp_exprecv_syscommand+0x7c>)
 8000a7c:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <msp_exprecv_syscommand+0x84>)
      command_ptr = start_test;
 8000a7e:	601a      	str	r2, [r3, #0]
      has_function_to_execute = true;
 8000a80:	2201      	movs	r2, #1
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <msp_exprecv_syscommand+0x80>)
 8000a84:	701a      	strb	r2, [r3, #0]
      break;
 8000a86:	e7f4      	b.n	8000a72 <msp_exprecv_syscommand+0x2e>
      i = 3;
 8000a88:	2203      	movs	r2, #3
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <msp_exprecv_syscommand+0x74>)
 8000a8c:	601a      	str	r2, [r3, #0]
      command_ptr = start_test;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <msp_exprecv_syscommand+0x7c>)
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <msp_exprecv_syscommand+0x88>)
 8000a92:	e7f4      	b.n	8000a7e <msp_exprecv_syscommand+0x3a>
      i = 4;
 8000a94:	2204      	movs	r2, #4
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <msp_exprecv_syscommand+0x74>)
 8000a98:	601a      	str	r2, [r3, #0]
      command_ptr = save_seqflags;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <msp_exprecv_syscommand+0x7c>)
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <msp_exprecv_syscommand+0x8c>)
 8000a9e:	e7ee      	b.n	8000a7e <msp_exprecv_syscommand+0x3a>
      turn_off_10v();
 8000aa0:	f000 fe60 	bl	8001764 <turn_off_10v>
      break;
 8000aa4:	e7e5      	b.n	8000a72 <msp_exprecv_syscommand+0x2e>
      turn_off_5v();
 8000aa6:	f000 fe79 	bl	800179c <turn_off_5v>
      break;
 8000aaa:	e7e2      	b.n	8000a72 <msp_exprecv_syscommand+0x2e>
      turn_off_48v();
 8000aac:	f000 fe50 	bl	8001750 <turn_off_48v>
      break;
 8000ab0:	e7df      	b.n	8000a72 <msp_exprecv_syscommand+0x2e>
      turn_off_vbat();
 8000ab2:	f000 fe43 	bl	800173c <turn_off_vbat>
}
 8000ab6:	e7dc      	b.n	8000a72 <msp_exprecv_syscommand+0x2e>
 8000ab8:	200004c4 	.word	0x200004c4
 8000abc:	08001479 	.word	0x08001479
 8000ac0:	200005b4 	.word	0x200005b4
 8000ac4:	200005b8 	.word	0x200005b8
 8000ac8:	08001669 	.word	0x08001669
 8000acc:	080019ed 	.word	0x080019ed
 8000ad0:	0800123d 	.word	0x0800123d

08000ad4 <msp_get_flag_pos>:
 */
static struct msp_flag_position msp_get_flag_pos(unsigned char opcode)
{
	struct msp_flag_position fp;

	if (MSP_OP_IS_CUSTOM(opcode)) {
 8000ad4:	2370      	movs	r3, #112	; 0x70
 8000ad6:	400b      	ands	r3, r1
 8000ad8:	2b4f      	cmp	r3, #79	; 0x4f
 8000ada:	d913      	bls.n	8000b04 <msp_get_flag_pos+0x30>
		switch (MSP_OP_TYPE(opcode)) {
 8000adc:	2330      	movs	r3, #48	; 0x30
		case MSP_OP_TYPE_SYS:
			fp.index = 1;
			break;
		case MSP_OP_TYPE_REQ:
			fp.index = 2;
 8000ade:	2202      	movs	r2, #2
 8000ae0:	400b      	ands	r3, r1
		switch (MSP_OP_TYPE(opcode)) {
 8000ae2:	2b20      	cmp	r3, #32
 8000ae4:	d006      	beq.n	8000af4 <msp_get_flag_pos+0x20>
 8000ae6:	2b30      	cmp	r3, #48	; 0x30
 8000ae8:	d003      	beq.n	8000af2 <msp_get_flag_pos+0x1e>
 8000aea:	2b10      	cmp	r3, #16
 8000aec:	d102      	bne.n	8000af4 <msp_get_flag_pos+0x20>
 8000aee:	2201      	movs	r2, #1
 8000af0:	e000      	b.n	8000af4 <msp_get_flag_pos+0x20>
			break;
		case MSP_OP_TYPE_SEND:
			fp.index = 3;
 8000af2:	2203      	movs	r2, #3
			break;
		}

		fp.mask = 1 << (opcode & 0x0F);
 8000af4:	230f      	movs	r3, #15
 8000af6:	4019      	ands	r1, r3
 8000af8:	3b0e      	subs	r3, #14
 8000afa:	408b      	lsls	r3, r1
 8000afc:	b29b      	uxth	r3, r3
			fp.mask = 0;
			break;
		}
	}

	return fp;
 8000afe:	6002      	str	r2, [r0, #0]
 8000b00:	8083      	strh	r3, [r0, #4]
}
 8000b02:	4770      	bx	lr
	if (MSP_OP_IS_CUSTOM(opcode)) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	3910      	subs	r1, #16
 8000b08:	b2c9      	uxtb	r1, r1
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2921      	cmp	r1, #33	; 0x21
 8000b0e:	d8f6      	bhi.n	8000afe <msp_get_flag_pos+0x2a>
 8000b10:	4b01      	ldr	r3, [pc, #4]	; (8000b18 <msp_get_flag_pos+0x44>)
 8000b12:	5c5b      	ldrb	r3, [r3, r1]
 8000b14:	e7f3      	b.n	8000afe <msp_get_flag_pos+0x2a>
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	08004ccc 	.word	0x08004ccc

08000b1c <msp_seqflags_init>:
	return flags;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	8003      	strh	r3, [r0, #0]
 8000b20:	8043      	strh	r3, [r0, #2]
 8000b22:	8083      	strh	r3, [r0, #4]
 8000b24:	80c3      	strh	r3, [r0, #6]
 8000b26:	8103      	strh	r3, [r0, #8]
 8000b28:	8143      	strh	r3, [r0, #10]
 8000b2a:	8183      	strh	r3, [r0, #12]
 8000b2c:	81c3      	strh	r3, [r0, #14]
}
 8000b2e:	4770      	bx	lr

08000b30 <msp_seqflags_get>:
{
 8000b30:	b513      	push	{r0, r1, r4, lr}
 8000b32:	0004      	movs	r4, r0
	fp = msp_get_flag_pos(opcode);
 8000b34:	4668      	mov	r0, sp
 8000b36:	f7ff ffcd 	bl	8000ad4 <msp_get_flag_pos>
 8000b3a:	466b      	mov	r3, sp
 8000b3c:	8898      	ldrh	r0, [r3, #4]
	if (fp.mask == 0)
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d006      	beq.n	8000b50 <msp_seqflags_get+0x20>
	if(flags->values[fp.index] & fp.mask)
 8000b42:	9b00      	ldr	r3, [sp, #0]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	5b1b      	ldrh	r3, [r3, r4]
 8000b48:	4018      	ands	r0, r3
		return -1;
 8000b4a:	1e43      	subs	r3, r0, #1
 8000b4c:	4198      	sbcs	r0, r3
}
 8000b4e:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
 8000b50:	2001      	movs	r0, #1
 8000b52:	4240      	negs	r0, r0
 8000b54:	e7fb      	b.n	8000b4e <msp_seqflags_get+0x1e>

08000b56 <msp_seqflags_get_next>:
{
 8000b56:	b513      	push	{r0, r1, r4, lr}
 8000b58:	0004      	movs	r4, r0
	fp = msp_get_flag_pos(opcode);
 8000b5a:	4668      	mov	r0, sp
 8000b5c:	f7ff ffba 	bl	8000ad4 <msp_get_flag_pos>
 8000b60:	466b      	mov	r3, sp
 8000b62:	889b      	ldrh	r3, [r3, #4]
	if (fp.mask == 0)
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00c      	beq.n	8000b82 <msp_seqflags_get_next+0x2c>
	if ((flags->inits[fp.index] & fp.mask) == 0)
 8000b68:	0018      	movs	r0, r3
 8000b6a:	9a00      	ldr	r2, [sp, #0]
 8000b6c:	0052      	lsls	r2, r2, #1
 8000b6e:	18a2      	adds	r2, r4, r2
 8000b70:	8911      	ldrh	r1, [r2, #8]
 8000b72:	4008      	ands	r0, r1
 8000b74:	420b      	tst	r3, r1
 8000b76:	d003      	beq.n	8000b80 <msp_seqflags_get_next+0x2a>
	if(flags->values[fp.index] & fp.mask)
 8000b78:	8810      	ldrh	r0, [r2, #0]
 8000b7a:	4018      	ands	r0, r3
		return -1;
 8000b7c:	4243      	negs	r3, r0
 8000b7e:	4158      	adcs	r0, r3
}
 8000b80:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
 8000b82:	2001      	movs	r0, #1
 8000b84:	4240      	negs	r0, r0
 8000b86:	e7fb      	b.n	8000b80 <msp_seqflags_get_next+0x2a>

08000b88 <msp_seqflags_is_set>:
{
 8000b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b8a:	0005      	movs	r5, r0
	fp = msp_get_flag_pos(opcode);
 8000b8c:	4668      	mov	r0, sp
{
 8000b8e:	0014      	movs	r4, r2
 8000b90:	000e      	movs	r6, r1
	fp = msp_get_flag_pos(opcode);
 8000b92:	f7ff ff9f 	bl	8000ad4 <msp_get_flag_pos>
 8000b96:	466b      	mov	r3, sp
 8000b98:	889a      	ldrh	r2, [r3, #4]
		return 0;
 8000b9a:	1e10      	subs	r0, r2, #0
	if (fp.mask == 0)
 8000b9c:	d012      	beq.n	8000bc4 <msp_seqflags_is_set+0x3c>
	if ((flags->inits[fp.index] & fp.mask) == 0)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
		return 0;
 8000ba0:	2000      	movs	r0, #0
	if ((flags->inits[fp.index] & fp.mask) == 0)
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	5b5b      	ldrh	r3, [r3, r5]
 8000ba8:	421a      	tst	r2, r3
 8000baa:	d00b      	beq.n	8000bc4 <msp_seqflags_is_set+0x3c>
	if (flag == msp_seqflags_get(flags, opcode))
 8000bac:	0031      	movs	r1, r6
 8000bae:	0028      	movs	r0, r5
 8000bb0:	f7ff ffbe 	bl	8000b30 <msp_seqflags_get>
 8000bb4:	1c23      	adds	r3, r4, #0
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d000      	beq.n	8000bbc <msp_seqflags_is_set+0x34>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	1a18      	subs	r0, r3, r0
		return 0;
 8000bc0:	4243      	negs	r3, r0
 8000bc2:	4158      	adcs	r0, r3
}
 8000bc4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08000bc6 <msp_seqflags_set>:
{
 8000bc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bc8:	0004      	movs	r4, r0
	fp = msp_get_flag_pos(opcode);
 8000bca:	4668      	mov	r0, sp
{
 8000bcc:	0015      	movs	r5, r2
	fp = msp_get_flag_pos(opcode);
 8000bce:	f7ff ff81 	bl	8000ad4 <msp_get_flag_pos>
 8000bd2:	466a      	mov	r2, sp
 8000bd4:	8892      	ldrh	r2, [r2, #4]
 8000bd6:	9b00      	ldr	r3, [sp, #0]
	if (fp.mask == 0)
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d00e      	beq.n	8000bfa <msp_seqflags_set+0x34>
	flags->inits[fp.index] |= fp.mask;
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	18e3      	adds	r3, r4, r3
 8000be0:	8919      	ldrh	r1, [r3, #8]
 8000be2:	4311      	orrs	r1, r2
 8000be4:	8119      	strh	r1, [r3, #8]
		flags->values[fp.index] |= fp.mask;
 8000be6:	8819      	ldrh	r1, [r3, #0]
	if (flag)
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d003      	beq.n	8000bf4 <msp_seqflags_set+0x2e>
		flags->values[fp.index] |= fp.mask;
 8000bec:	430a      	orrs	r2, r1
 8000bee:	801a      	strh	r2, [r3, #0]
	return 0;
 8000bf0:	2000      	movs	r0, #0
}
 8000bf2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		flags->values[fp.index] &= ~fp.mask;
 8000bf4:	4391      	bics	r1, r2
 8000bf6:	8019      	strh	r1, [r3, #0]
 8000bf8:	e7fa      	b.n	8000bf0 <msp_seqflags_set+0x2a>
		return -1;
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4240      	negs	r0, r0
 8000bfe:	e7f8      	b.n	8000bf2 <msp_seqflags_set+0x2c>

08000c00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000c00:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	2208      	movs	r2, #8
 8000c04:	2100      	movs	r1, #0
 8000c06:	4668      	mov	r0, sp
 8000c08:	f003 fbeb 	bl	80043e2 <memset>
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000c0c:	2203      	movs	r2, #3
  hadc.Init.OversamplingMode = DISABLE;
 8000c0e:	4c3a      	ldr	r4, [pc, #232]	; (8000cf8 <MX_ADC_Init+0xf8>)
 8000c10:	2300      	movs	r3, #0
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000c12:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c14:	22c2      	movs	r2, #194	; 0xc2
 8000c16:	32ff      	adds	r2, #255	; 0xff
 8000c18:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c1a:	0022      	movs	r2, r4
 8000c1c:	322c      	adds	r2, #44	; 0x2c
 8000c1e:	7013      	strb	r3, [r2, #0]
  hadc.Instance = ADC1;
 8000c20:	4a36      	ldr	r2, [pc, #216]	; (8000cfc <MX_ADC_Init+0xfc>)
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c22:	2501      	movs	r5, #1
  hadc.Instance = ADC1;
 8000c24:	6022      	str	r2, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c26:	22c0      	movs	r2, #192	; 0xc0
 8000c28:	0612      	lsls	r2, r2, #24
 8000c2a:	6062      	str	r2, [r4, #4]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2c:	2204      	movs	r2, #4
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c2e:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode = ENABLE;
 8000c30:	8425      	strh	r5, [r4, #32]
  hadc.Init.OversamplingMode = DISABLE;
 8000c32:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c34:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c36:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000c38:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c3a:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c3e:	6125      	str	r5, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c40:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c42:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c44:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c46:	f001 f8d9 	bl	8001dfc <HAL_ADC_Init>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC_Init+0x52>
  {
    Error_Handler();
 8000c4e:	f000 fbdb 	bl	8001408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c52:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c54:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c56:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c58:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8000c5a:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c5c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c5e:	f001 fa59 	bl	8002114 <HAL_ADC_ConfigChannel>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC_Init+0x6a>
  {
    Error_Handler();
 8000c66:	f000 fbcf 	bl	8001408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_ADC_Init+0x100>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c6c:	4669      	mov	r1, sp
 8000c6e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000c70:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c72:	f001 fa4f 	bl	8002114 <HAL_ADC_ConfigChannel>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8000c7a:	f000 fbc5 	bl	8001408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_ADC_Init+0x104>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c80:	4669      	mov	r1, sp
 8000c82:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8000c84:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c86:	f001 fa45 	bl	8002114 <HAL_ADC_ConfigChannel>
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8000c8e:	f000 fbbb 	bl	8001408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ADC_Init+0x108>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c94:	4669      	mov	r1, sp
 8000c96:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8000c98:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c9a:	f001 fa3b 	bl	8002114 <HAL_ADC_ConfigChannel>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000ca2:	f000 fbb1 	bl	8001408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_ADC_Init+0x10c>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ca8:	4669      	mov	r1, sp
 8000caa:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8000cac:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cae:	f001 fa31 	bl	8002114 <HAL_ADC_ConfigChannel>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC_Init+0xba>
  {
    Error_Handler();
 8000cb6:	f000 fba7 	bl	8001408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_ADC_Init+0x110>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cbc:	4669      	mov	r1, sp
 8000cbe:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 8000cc0:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cc2:	f001 fa27 	bl	8002114 <HAL_ADC_ConfigChannel>
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC_Init+0xce>
  {
    Error_Handler();
 8000cca:	f000 fb9d 	bl	8001408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_ADC_Init+0x114>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cd0:	4669      	mov	r1, sp
 8000cd2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_7;
 8000cd4:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cd6:	f001 fa1d 	bl	8002114 <HAL_ADC_ConfigChannel>
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC_Init+0xe2>
  {
    Error_Handler();
 8000cde:	f000 fb93 	bl	8001408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_ADC_Init+0x118>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ce4:	4669      	mov	r1, sp
 8000ce6:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 8000ce8:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cea:	f001 fa13 	bl	8002114 <HAL_ADC_ConfigChannel>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC_Init+0xf6>
  {
    Error_Handler();
 8000cf2:	f000 fb89 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cf6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8000cf8:	200004c8 	.word	0x200004c8
 8000cfc:	40012400 	.word	0x40012400
 8000d00:	04000002 	.word	0x04000002
 8000d04:	08000004 	.word	0x08000004
 8000d08:	0c000008 	.word	0x0c000008
 8000d0c:	14000020 	.word	0x14000020
 8000d10:	18000040 	.word	0x18000040
 8000d14:	1c000080 	.word	0x1c000080
 8000d18:	20000100 	.word	0x20000100

08000d1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d1c:	b530      	push	{r4, r5, lr}
 8000d1e:	0004      	movs	r4, r0
 8000d20:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	2214      	movs	r2, #20
 8000d24:	2100      	movs	r1, #0
 8000d26:	a803      	add	r0, sp, #12
 8000d28:	f003 fb5b 	bl	80043e2 <memset>
  if(adcHandle->Instance==ADC1)
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_ADC_MspInit+0x6c>)
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d126      	bne.n	8000d82 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d34:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2401      	movs	r4, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_ADC_MspInit+0x70>)
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    */
    GPIO_InitStruct.Pin = IN0_VT_Si_Pin|IN1_Vbe_Si_Pin|IN2_Vb_Si_Pin|IN3_Vc_Si_Pin
                          |IN5_VT_SiC_Pin|IN6_Vbe_SiC_Pin|IN7_Vb_SiC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d40:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	2102      	movs	r1, #2
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d48:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4322      	orrs	r2, r4
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4022      	ands	r2, r4
 8000d54:	9201      	str	r2, [sp, #4]
 8000d56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d60:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	400b      	ands	r3, r1
 8000d64:	9302      	str	r3, [sp, #8]
 8000d66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IN0_VT_Si_Pin|IN1_Vbe_Si_Pin|IN2_Vb_Si_Pin|IN3_Vc_Si_Pin
 8000d68:	23ef      	movs	r3, #239	; 0xef
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = IN0_VT_Si_Pin|IN1_Vbe_Si_Pin|IN2_Vb_Si_Pin|IN3_Vc_Si_Pin
 8000d6c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f001 fc41 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN8_Vc_SiC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
    HAL_GPIO_Init(IN8_Vc_SiC_GPIO_Port, &GPIO_InitStruct);
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <HAL_ADC_MspInit+0x74>)
 8000d76:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = IN8_Vc_SiC_Pin;
 8000d78:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(IN8_Vc_SiC_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f001 fc39 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d82:	b009      	add	sp, #36	; 0x24
 8000d84:	bd30      	pop	{r4, r5, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	40012400 	.word	0x40012400
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	50000400 	.word	0x50000400

08000d94 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000d94:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d96:	2208      	movs	r2, #8
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4668      	mov	r0, sp
 8000d9c:	f003 fb21 	bl	80043e2 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <MX_DAC_Init+0x38>)
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_DAC_Init+0x3c>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000da4:	0020      	movs	r0, r4
  hdac.Instance = DAC;
 8000da6:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000da8:	f001 fabc 	bl	8002324 <HAL_DAC_Init>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d001      	beq.n	8000db4 <MX_DAC_Init+0x20>
  {
    Error_Handler();
 8000db0:	f000 fb2a 	bl	8001408 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000db4:	2200      	movs	r2, #0
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000db6:	4669      	mov	r1, sp
 8000db8:	0020      	movs	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dba:	9200      	str	r2, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dbc:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dbe:	f001 fac5 	bl	800234c <HAL_DAC_ConfigChannel>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_DAC_Init+0x36>
  {
    Error_Handler();
 8000dc6:	f000 fb1f 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000dca:	bd13      	pop	{r0, r1, r4, pc}
 8000dcc:	20000524 	.word	0x20000524
 8000dd0:	40007400 	.word	0x40007400

08000dd4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	0004      	movs	r4, r0
 8000dd8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	2214      	movs	r2, #20
 8000ddc:	2100      	movs	r1, #0
 8000dde:	a801      	add	r0, sp, #4
 8000de0:	f003 faff 	bl	80043e2 <memset>
  if(dacHandle->Instance==DAC)
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_DAC_MspInit+0x4c>)
 8000de6:	6822      	ldr	r2, [r4, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d116      	bne.n	8000e1a <HAL_DAC_MspInit+0x46>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_DAC_MspInit+0x50>)
 8000df0:	0592      	lsls	r2, r2, #22
 8000df2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_DAC_CLK_ENABLE();
 8000df6:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2101      	movs	r1, #1
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	430a      	orrs	r2, r1
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	400b      	ands	r3, r1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e0c:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e10:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e12:	3b0d      	subs	r3, #13
 8000e14:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f001 fbed 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000e1a:	b006      	add	sp, #24
 8000e1c:	bd10      	pop	{r4, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	40007400 	.word	0x40007400
 8000e24:	40021000 	.word	0x40021000

08000e28 <find_current_EEPROM_address>:
 * @return the offset from the base adress of the buffer
 *
 * finds the offset for the current memory location
 */
static int find_current_EEPROM_address(void)
{
 8000e28:	b510      	push	{r4, lr}
  int offset = 0;
 8000e2a:	2000      	movs	r0, #0

  while (((*(__IO uint16_t *)(INDEX_BUFFER_START_ADDR + offset))+1) == (*(__IO uint16_t *)(INDEX_BUFFER_START_ADDR + offset +2)))
  {
    offset = (offset + 2)%BUFFER_SIZE;
 8000e2c:	2444      	movs	r4, #68	; 0x44
  while (((*(__IO uint16_t *)(INDEX_BUFFER_START_ADDR + offset))+1) == (*(__IO uint16_t *)(INDEX_BUFFER_START_ADDR + offset +2)))
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <find_current_EEPROM_address+0x28>)
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <find_current_EEPROM_address+0x2c>)
 8000e32:	18c3      	adds	r3, r0, r3
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	1882      	adds	r2, r0, r2
 8000e38:	8812      	ldrh	r2, [r2, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d000      	beq.n	8000e42 <find_current_EEPROM_address+0x1a>
  }
  return offset;
}
 8000e40:	bd10      	pop	{r4, pc}
    offset = (offset + 2)%BUFFER_SIZE;
 8000e42:	0021      	movs	r1, r4
 8000e44:	3002      	adds	r0, #2
 8000e46:	f7ff f9f9 	bl	800023c <__aeabi_uidivmod>
 8000e4a:	0008      	movs	r0, r1
 8000e4c:	e7ef      	b.n	8000e2e <find_current_EEPROM_address+0x6>
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	08080000 	.word	0x08080000
 8000e54:	08080002 	.word	0x08080002

08000e58 <checksum>:
{
 8000e58:	b530      	push	{r4, r5, lr}
 8000e5a:	0004      	movs	r4, r0
    uint16_t chk = 0;
 8000e5c:	2000      	movs	r0, #0
    while (size1-- != 0)
 8000e5e:	3901      	subs	r1, #1
 8000e60:	b2c9      	uxtb	r1, r1
 8000e62:	29ff      	cmp	r1, #255	; 0xff
 8000e64:	d104      	bne.n	8000e70 <checksum+0x18>
    while (size2-- != 0)
 8000e66:	3b01      	subs	r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d105      	bne.n	8000e7a <checksum+0x22>
}
 8000e6e:	bd30      	pop	{r4, r5, pc}
        chk -= *ptr1++;
 8000e70:	8825      	ldrh	r5, [r4, #0]
 8000e72:	3402      	adds	r4, #2
 8000e74:	1b40      	subs	r0, r0, r5
 8000e76:	b280      	uxth	r0, r0
 8000e78:	e7f1      	b.n	8000e5e <checksum+0x6>
        chk -= *ptr2++;
 8000e7a:	8811      	ldrh	r1, [r2, #0]
 8000e7c:	3202      	adds	r2, #2
 8000e7e:	1a40      	subs	r0, r0, r1
 8000e80:	b280      	uxth	r0, r0
 8000e82:	e7f0      	b.n	8000e66 <checksum+0xe>

08000e84 <EEPROM_read_buffer>:
 * function written inorder to save 64 bit of data. shoud
 * be used for saving msp sequence flags
 *  
 */
bool EEPROM_read_buffer(unsigned short *data1, unsigned short *data2)
{
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	0005      	movs	r5, r0
 8000e88:	000e      	movs	r6, r1
  int offset = find_current_EEPROM_address();
 8000e8a:	f7ff ffcd 	bl	8000e28 <find_current_EEPROM_address>
  uint16_t checksum_stored;
  
  if (offset == 0)
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d125      	bne.n	8000ede <EEPROM_read_buffer+0x5a>
  {
    data1[0] = (*(__IO uint16_t *)(BUFFER_1_START_ADDR));
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <EEPROM_read_buffer+0xa4>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	802b      	strh	r3, [r5, #0]
    data1[1] = (*(__IO uint16_t *)(BUFFER_2_START_ADDR));
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <EEPROM_read_buffer+0xa8>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	806b      	strh	r3, [r5, #2]
    data1[2] = (*(__IO uint16_t *)(BUFFER_3_START_ADDR));
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <EEPROM_read_buffer+0xac>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	80ab      	strh	r3, [r5, #4]
    data1[3] = (*(__IO uint16_t *)(BUFFER_4_START_ADDR));
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <EEPROM_read_buffer+0xb0>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	80eb      	strh	r3, [r5, #6]
    
    data2[0] = (*(__IO uint16_t *)(BUFFER_5_START_ADDR));
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <EEPROM_read_buffer+0xb4>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	8033      	strh	r3, [r6, #0]
    data2[1] = (*(__IO uint16_t *)(BUFFER_6_START_ADDR));
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <EEPROM_read_buffer+0xb8>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	8073      	strh	r3, [r6, #2]
    data2[2] = (*(__IO uint16_t *)(BUFFER_7_START_ADDR));
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <EEPROM_read_buffer+0xbc>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	80b3      	strh	r3, [r6, #4]
    data2[3] = (*(__IO uint16_t *)(BUFFER_8_START_ADDR));
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <EEPROM_read_buffer+0xc0>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	80f3      	strh	r3, [r6, #6]
    
    checksum_stored = (*(__IO uint16_t *)(CHECKSUM_BUFFER));
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <EEPROM_read_buffer+0xc4>)
 8000ec4:	881c      	ldrh	r4, [r3, #0]
    
    checksum_stored = (*(__IO uint16_t *)(CHECKSUM_BUFFER + offset));
  }
  

  uint16_t checksum_result = checksum(data1, 4, data2, 4);
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	0032      	movs	r2, r6
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0028      	movs	r0, r5
 8000ece:	f7ff ffc3 	bl	8000e58 <checksum>
    checksum_stored = (*(__IO uint16_t *)(CHECKSUM_BUFFER + offset));
 8000ed2:	b2a4      	uxth	r4, r4
  return ((checksum_result-checksum_stored) == 0);
 8000ed4:	1a20      	subs	r0, r4, r0
 8000ed6:	4243      	negs	r3, r0
 8000ed8:	4158      	adcs	r0, r3
 8000eda:	b2c0      	uxtb	r0, r0
}
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
    data1[0] = (*(__IO uint16_t *)(BUFFER_1_START_ADDR + offset));
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <EEPROM_read_buffer+0xc8>)
 8000ee0:	18c3      	adds	r3, r0, r3
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	802b      	strh	r3, [r5, #0]
    data1[1] = (*(__IO uint16_t *)(BUFFER_2_START_ADDR + offset));
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <EEPROM_read_buffer+0xcc>)
 8000ee8:	18c3      	adds	r3, r0, r3
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	806b      	strh	r3, [r5, #2]
    data1[2] = (*(__IO uint16_t *)(BUFFER_3_START_ADDR + offset));
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <EEPROM_read_buffer+0xd0>)
 8000ef0:	18c3      	adds	r3, r0, r3
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	80ab      	strh	r3, [r5, #4]
    data1[3] = (*(__IO uint16_t *)(BUFFER_4_START_ADDR + offset));
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <EEPROM_read_buffer+0xd4>)
 8000ef8:	18c3      	adds	r3, r0, r3
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	80eb      	strh	r3, [r5, #6]
    data2[0] = (*(__IO uint16_t *)(BUFFER_5_START_ADDR + offset));
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <EEPROM_read_buffer+0xd8>)
 8000f00:	18c3      	adds	r3, r0, r3
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	8033      	strh	r3, [r6, #0]
    data2[1] = (*(__IO uint16_t *)(BUFFER_6_START_ADDR + offset));
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <EEPROM_read_buffer+0xdc>)
 8000f08:	18c3      	adds	r3, r0, r3
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	8073      	strh	r3, [r6, #2]
    data2[2] = (*(__IO uint16_t *)(BUFFER_7_START_ADDR + offset));
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <EEPROM_read_buffer+0xe0>)
 8000f10:	18c3      	adds	r3, r0, r3
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	80b3      	strh	r3, [r6, #4]
    data2[3] = (*(__IO uint16_t *)(BUFFER_8_START_ADDR + offset));
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <EEPROM_read_buffer+0xe4>)
 8000f18:	18c3      	adds	r3, r0, r3
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	80f3      	strh	r3, [r6, #6]
    checksum_stored = (*(__IO uint16_t *)(CHECKSUM_BUFFER + offset));
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <EEPROM_read_buffer+0xe8>)
 8000f20:	18c0      	adds	r0, r0, r3
 8000f22:	8804      	ldrh	r4, [r0, #0]
 8000f24:	e7cf      	b.n	8000ec6 <EEPROM_read_buffer+0x42>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	08080044 	.word	0x08080044
 8000f2c:	08080088 	.word	0x08080088
 8000f30:	080800cc 	.word	0x080800cc
 8000f34:	08080110 	.word	0x08080110
 8000f38:	08080154 	.word	0x08080154
 8000f3c:	08080198 	.word	0x08080198
 8000f40:	080801dc 	.word	0x080801dc
 8000f44:	08080220 	.word	0x08080220
 8000f48:	08080264 	.word	0x08080264
 8000f4c:	08080042 	.word	0x08080042
 8000f50:	08080086 	.word	0x08080086
 8000f54:	080800ca 	.word	0x080800ca
 8000f58:	0808010e 	.word	0x0808010e
 8000f5c:	08080152 	.word	0x08080152
 8000f60:	08080196 	.word	0x08080196
 8000f64:	080801da 	.word	0x080801da
 8000f68:	0808021e 	.word	0x0808021e
 8000f6c:	08080262 	.word	0x08080262

08000f70 <EEPROM_write_buffer>:
 * @param 32 bit of data to be written to the second buffer (pointer)
 *
 * writes the data and checksum
 */
void EEPROM_write_buffer(unsigned short *data1, unsigned short *data2)
{ 
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	000d      	movs	r5, r1
 8000f74:	0006      	movs	r6, r0
   HAL_FLASHEx_DATAEEPROM_Unlock();
 8000f76:	f001 faf1 	bl	800255c <HAL_FLASHEx_DATAEEPROM_Unlock>

  /*get the offset from the index buffer*/
  int offset = find_current_EEPROM_address();
 8000f7a:	f7ff ff55 	bl	8000e28 <find_current_EEPROM_address>
  
  /*calculate the checksum*/
  uint16_t value_checksum = checksum (data1, 4, data2, 4); 
 8000f7e:	2304      	movs	r3, #4
  int offset = find_current_EEPROM_address();
 8000f80:	0004      	movs	r4, r0
  uint16_t value_checksum = checksum (data1, 4, data2, 4); 
 8000f82:	002a      	movs	r2, r5
 8000f84:	0019      	movs	r1, r3
 8000f86:	0030      	movs	r0, r6
 8000f88:	f7ff ff66 	bl	8000e58 <checksum>
 8000f8c:	0007      	movs	r7, r0
 
  /*write the data*/
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (BUFFER_1_START_ADDR+offset), data1[0]);
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <EEPROM_write_buffer+0xac>)
 8000f90:	8832      	ldrh	r2, [r6, #0]
 8000f92:	18e1      	adds	r1, r4, r3
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 fb03 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (BUFFER_2_START_ADDR+offset), data1[1]);
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <EEPROM_write_buffer+0xb0>)
 8000f9c:	8872      	ldrh	r2, [r6, #2]
 8000f9e:	18e1      	adds	r1, r4, r3
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f001 fafd 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (BUFFER_3_START_ADDR+offset), data1[2]);
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <EEPROM_write_buffer+0xb4>)
 8000fa8:	88b2      	ldrh	r2, [r6, #4]
 8000faa:	18e1      	adds	r1, r4, r3
 8000fac:	2001      	movs	r0, #1
 8000fae:	f001 faf7 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (BUFFER_4_START_ADDR+offset), data1[3]);
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <EEPROM_write_buffer+0xb8>)
 8000fb4:	88f2      	ldrh	r2, [r6, #6]
 8000fb6:	18e1      	adds	r1, r4, r3
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f001 faf1 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (BUFFER_5_START_ADDR+offset), data2[0]);
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <EEPROM_write_buffer+0xbc>)
 8000fc0:	882a      	ldrh	r2, [r5, #0]
 8000fc2:	18e1      	adds	r1, r4, r3
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f001 faeb 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (BUFFER_6_START_ADDR+offset), data2[1]);
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <EEPROM_write_buffer+0xc0>)
 8000fcc:	886a      	ldrh	r2, [r5, #2]
 8000fce:	18e1      	adds	r1, r4, r3
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f001 fae5 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (BUFFER_7_START_ADDR+offset), data2[2]);
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <EEPROM_write_buffer+0xc4>)
 8000fd8:	88aa      	ldrh	r2, [r5, #4]
 8000fda:	18e1      	adds	r1, r4, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f001 fadf 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (BUFFER_8_START_ADDR+offset), data2[3]);
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <EEPROM_write_buffer+0xc8>)
 8000fe4:	88ea      	ldrh	r2, [r5, #6]
 8000fe6:	18e1      	adds	r1, r4, r3
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f001 fad9 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  
  /*write checksum*/
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (CHECKSUM_BUFFER+offset), value_checksum);
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <EEPROM_write_buffer+0xcc>)

  
  /*uppdate the index buffert*/
  uint16_t index_var = (*(__IO uint16_t *)((offset) + INDEX_BUFFER_START_ADDR));
 8000ff0:	4e13      	ldr	r6, [pc, #76]	; (8001040 <EEPROM_write_buffer+0xd0>)
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, (CHECKSUM_BUFFER+offset), value_checksum);
 8000ff2:	003a      	movs	r2, r7
 8000ff4:	18e1      	adds	r1, r4, r3
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f001 fad2 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
  uint16_t index_var = (*(__IO uint16_t *)((offset) + INDEX_BUFFER_START_ADDR));
 8000ffc:	19a3      	adds	r3, r4, r6
  index_var++;
  uint32_t address = ((offset+2)%BUFFER_SIZE) + INDEX_BUFFER_START_ADDR;
 8000ffe:	1ca0      	adds	r0, r4, #2
 8001000:	2144      	movs	r1, #68	; 0x44
  uint16_t index_var = (*(__IO uint16_t *)((offset) + INDEX_BUFFER_START_ADDR));
 8001002:	881d      	ldrh	r5, [r3, #0]
  uint32_t address = ((offset+2)%BUFFER_SIZE) + INDEX_BUFFER_START_ADDR;
 8001004:	f7ff f91a 	bl	800023c <__aeabi_uidivmod>
  index_var++;
 8001008:	3501      	adds	r5, #1
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, address, index_var);
 800100a:	b2ad      	uxth	r5, r5
 800100c:	002a      	movs	r2, r5
  uint32_t address = ((offset+2)%BUFFER_SIZE) + INDEX_BUFFER_START_ADDR;
 800100e:	1989      	adds	r1, r1, r6
  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, address, index_var);
 8001010:	2001      	movs	r0, #1
 8001012:	f001 fac5 	bl	80025a0 <HAL_FLASHEx_DATAEEPROM_Program>
//  int readvar = (*(__IO uint16_t *)(address));
  HAL_FLASHEx_DATAEEPROM_Lock();
 8001016:	f001 fab9 	bl	800258c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800101c:	08080044 	.word	0x08080044
 8001020:	08080088 	.word	0x08080088
 8001024:	080800cc 	.word	0x080800cc
 8001028:	08080110 	.word	0x08080110
 800102c:	08080154 	.word	0x08080154
 8001030:	08080198 	.word	0x08080198
 8001034:	080801dc 	.word	0x080801dc
 8001038:	08080220 	.word	0x08080220
 800103c:	08080264 	.word	0x08080264
 8001040:	08080000 	.word	0x08080000

08001044 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	2214      	movs	r2, #20
 800104a:	2100      	movs	r1, #0
 800104c:	a805      	add	r0, sp, #20
 800104e:	f003 f9c8 	bl	80043e2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	2004      	movs	r0, #4
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 8001056:	4f38      	ldr	r7, [pc, #224]	; (8001138 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin|USART1_DE_Pin, GPIO_PIN_RESET);
 800105a:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4301      	orrs	r1, r0
 800105e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin|USART1_DE_Pin, GPIO_PIN_RESET);
 8001062:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4002      	ands	r2, r0
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800106c:	307c      	adds	r0, #124	; 0x7c
 800106e:	4301      	orrs	r1, r0
 8001070:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2101      	movs	r1, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001074:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001078:	4002      	ands	r2, r0
 800107a:	9202      	str	r2, [sp, #8]
 800107c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 8001080:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	430a      	orrs	r2, r1
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
 8001086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001088:	2503      	movs	r5, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	400a      	ands	r2, r1
 800108c:	9203      	str	r2, [sp, #12]
 800108e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001092:	1849      	adds	r1, r1, r1
 8001094:	430a      	orrs	r2, r1
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 800109e:	21f0      	movs	r1, #240	; 0xf0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 80010a2:	0189      	lsls	r1, r1, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 80010a6:	f001 fb65 	bl	8002774 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin|USART1_DE_Pin, GPIO_PIN_RESET);
 80010aa:	21c0      	movs	r1, #192	; 0xc0
 80010ac:	2200      	movs	r2, #0
 80010ae:	0030      	movs	r0, r6
 80010b0:	0149      	lsls	r1, r1, #5
 80010b2:	f001 fb5f 	bl	8002774 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010b6:	23e0      	movs	r3, #224	; 0xe0
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	ab05      	add	r3, sp, #20
 80010be:	0019      	movs	r1, r3
 80010c0:	481e      	ldr	r0, [pc, #120]	; (800113c <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f001 fa95 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ca:	ab05      	add	r3, sp, #20
 80010cc:	0019      	movs	r1, r3
 80010ce:	481c      	ldr	r0, [pc, #112]	; (8001140 <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010d0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010d6:	f001 fa8d 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_GPIO_Init+0x100>)
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 80010de:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	ab05      	add	r3, sp, #20
 80010e2:	0019      	movs	r1, r3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f001 fa84 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin;
 80010ec:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin;
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	ab05      	add	r3, sp, #20
 80010f6:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	9106      	str	r1, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	0019      	movs	r1, r3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f001 fa78 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001104:	2381      	movs	r3, #129	; 0x81
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	ab05      	add	r3, sp, #20
 800110c:	0019      	movs	r1, r3
 800110e:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001110:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f001 fa6e 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART1_NRE_Pin|USART1_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = USART1_NRE_Pin|USART1_DE_Pin;
 800111a:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	9106      	str	r1, [sp, #24]
  GPIO_InitStruct.Pin = USART1_NRE_Pin|USART1_DE_Pin;
 800111e:	015b      	lsls	r3, r3, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	0030      	movs	r0, r6
 8001122:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = USART1_NRE_Pin|USART1_DE_Pin;
 8001124:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f001 fa63 	bl	80025f4 <HAL_GPIO_Init>

}
 800112e:	b00b      	add	sp, #44	; 0x2c
 8001130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40021000 	.word	0x40021000
 8001138:	50000400 	.word	0x50000400
 800113c:	50000800 	.word	0x50000800
 8001140:	50001c00 	.word	0x50001c00
 8001144:	0000c33e 	.word	0x0000c33e

08001148 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001148:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_I2C1_Init+0x50>)
 800114c:	4c13      	ldr	r4, [pc, #76]	; (800119c <MX_I2C1_Init+0x54>)
 800114e:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000004;
 8001150:	2304      	movs	r3, #4
 8001152:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 138;
 8001154:	3386      	adds	r3, #134	; 0x86
 8001156:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	3b89      	subs	r3, #137	; 0x89
 800115a:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115e:	0020      	movs	r0, r4
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001164:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001168:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116a:	f001 ffc1 	bl	80030f0 <HAL_I2C_Init>
 800116e:	2800      	cmp	r0, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x2e>
  {
    Error_Handler();
 8001172:	f000 f949 	bl	8001408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	0020      	movs	r0, r4
 800117a:	f002 f8ed 	bl	8003358 <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	2800      	cmp	r0, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C1_Init+0x3e>
  {
    Error_Handler();
 8001182:	f000 f941 	bl	8001408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	0020      	movs	r0, r4
 800118a:	f002 f90b 	bl	80033a4 <HAL_I2CEx_ConfigDigitalFilter>
 800118e:	2800      	cmp	r0, #0
 8001190:	d001      	beq.n	8001196 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001192:	f000 f939 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001196:	bd10      	pop	{r4, pc}
 8001198:	40005400 	.word	0x40005400
 800119c:	20000534 	.word	0x20000534

080011a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a0:	b510      	push	{r4, lr}
 80011a2:	0004      	movs	r4, r0
 80011a4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	2214      	movs	r2, #20
 80011a8:	2100      	movs	r1, #0
 80011aa:	a801      	add	r0, sp, #4
 80011ac:	f003 f919 	bl	80043e2 <memset>
  if(i2cHandle->Instance==I2C1)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_I2C_MspInit+0x60>)
 80011b2:	6822      	ldr	r2, [r4, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d121      	bne.n	80011fc <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	2102      	movs	r1, #2
 80011ba:	4c12      	ldr	r4, [pc, #72]	; (8001204 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011c0:	430a      	orrs	r2, r1
 80011c2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80011c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011c6:	400b      	ands	r3, r1
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011cc:	23c0      	movs	r3, #192	; 0xc0
 80011ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d0:	3bae      	subs	r3, #174	; 0xae
 80011d2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	3b0f      	subs	r3, #15
 80011d6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80011da:	3b02      	subs	r3, #2
 80011dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f001 fa09 	bl	80025f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80011e6:	039b      	lsls	r3, r3, #14
 80011e8:	4313      	orrs	r3, r2

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2017      	movs	r0, #23
 80011ee:	0011      	movs	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f0:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80011f2:	f001 f847 	bl	8002284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80011f6:	2017      	movs	r0, #23
 80011f8:	f001 f86e 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011fc:	b006      	add	sp, #24
 80011fe:	bd10      	pop	{r4, pc}
 8001200:	40005400 	.word	0x40005400
 8001204:	40021000 	.word	0x40021000
 8001208:	50000400 	.word	0x50000400

0800120c <restore_seqflags>:
#include "msp_exp_state.h"
#include "eeprom_circular.h"
#include "interface_flags.h"

void restore_seqflags(void)
{
 800120c:	b500      	push	{lr}
 800120e:	b089      	sub	sp, #36	; 0x24
    msp_seqflags_t seqflags;

    bool checksum_correct = EEPROM_read_buffer(seqflags.values, seqflags.inits);
 8001210:	4668      	mov	r0, sp
 8001212:	a902      	add	r1, sp, #8
 8001214:	f7ff fe36 	bl	8000e84 <EEPROM_read_buffer>
    if (checksum_correct)
 8001218:	2800      	cmp	r0, #0
 800121a:	d007      	beq.n	800122c <restore_seqflags+0x20>
    {
        msp_exp_state_initialize(seqflags);
 800121c:	9800      	ldr	r0, [sp, #0]
 800121e:	9901      	ldr	r1, [sp, #4]
 8001220:	9a02      	ldr	r2, [sp, #8]
 8001222:	9b03      	ldr	r3, [sp, #12]
    }
    else
    {
        msp_exp_state_initialize(msp_seqflags_init());
 8001224:	f7ff fbc0 	bl	80009a8 <msp_exp_state_initialize>
    }
}
 8001228:	b009      	add	sp, #36	; 0x24
 800122a:	bd00      	pop	{pc}
        msp_exp_state_initialize(msp_seqflags_init());
 800122c:	a804      	add	r0, sp, #16
 800122e:	f7ff fc75 	bl	8000b1c <msp_seqflags_init>
 8001232:	9804      	ldr	r0, [sp, #16]
 8001234:	9905      	ldr	r1, [sp, #20]
 8001236:	9a06      	ldr	r2, [sp, #24]
 8001238:	9b07      	ldr	r3, [sp, #28]
 800123a:	e7f3      	b.n	8001224 <restore_seqflags+0x18>

0800123c <save_seqflags>:

void save_seqflags(void)
{
 800123c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    msp_seqflags_t seqflags = msp_exp_state_get_seqflags();
 800123e:	4668      	mov	r0, sp
 8001240:	f7ff fbc8 	bl	80009d4 <msp_exp_state_get_seqflags>

    EEPROM_write_buffer(seqflags.values, seqflags.inits);
 8001244:	4668      	mov	r0, sp
 8001246:	a902      	add	r1, sp, #8
 8001248:	f7ff fe92 	bl	8000f70 <EEPROM_write_buffer>
}
 800124c:	b005      	add	sp, #20
 800124e:	bd00      	pop	{pc}

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b500      	push	{lr}
 8001252:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001254:	2234      	movs	r2, #52	; 0x34
 8001256:	2100      	movs	r1, #0
 8001258:	a80f      	add	r0, sp, #60	; 0x3c
 800125a:	f003 f8c2 	bl	80043e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125e:	2214      	movs	r2, #20
 8001260:	2100      	movs	r1, #0
 8001262:	4668      	mov	r0, sp
 8001264:	f003 f8bd 	bl	80043e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	2224      	movs	r2, #36	; 0x24
 800126a:	2100      	movs	r1, #0
 800126c:	a805      	add	r0, sp, #20
 800126e:	f003 f8b8 	bl	80043e2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001272:	4919      	ldr	r1, [pc, #100]	; (80012d8 <SystemClock_Config+0x88>)
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <SystemClock_Config+0x8c>)
 8001276:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127a:	401a      	ands	r2, r3
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001284:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001286:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001288:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800128a:	3b0f      	subs	r3, #15
 800128c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800128e:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001290:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001292:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001294:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001296:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f002 f8f0 	bl	800347c <HAL_RCC_OscConfig>
 800129c:	1e01      	subs	r1, r0, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012a6:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012aa:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ac:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ae:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b2:	f002 fb65 	bl	8003980 <HAL_RCC_ClockConfig>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x6e>
 80012ba:	b672      	cpsid	i
  while (1)
 80012bc:	e7fe      	b.n	80012bc <SystemClock_Config+0x6c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80012be:	2309      	movs	r3, #9
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012c0:	9008      	str	r0, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012c2:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80012c6:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c8:	f002 fc48 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x84>
 80012d0:	b672      	cpsid	i
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <SystemClock_Config+0x82>
}
 80012d4:	b01d      	add	sp, #116	; 0x74
 80012d6:	bd00      	pop	{pc}
 80012d8:	40007000 	.word	0x40007000
 80012dc:	ffffe7ff 	.word	0xffffe7ff

080012e0 <main>:
{
 80012e0:	b510      	push	{r4, lr}
  HAL_Init();
 80012e2:	f000 fc9b 	bl	8001c1c <HAL_Init>
  SystemClock_Config();
 80012e6:	f7ff ffb3 	bl	8001250 <SystemClock_Config>
  MX_GPIO_Init();
 80012ea:	f7ff feab 	bl	8001044 <MX_GPIO_Init>
  MX_ADC_Init();
 80012ee:	f7ff fc87 	bl	8000c00 <MX_ADC_Init>
  MX_DAC_Init();
 80012f2:	f7ff fd4f 	bl	8000d94 <MX_DAC_Init>
  MX_I2C1_Init();
 80012f6:	f7ff ff27 	bl	8001148 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012fa:	f000 fbf7 	bl	8001aec <MX_USART1_UART_Init>
  restore_seqflags();
 80012fe:	f7ff ff85 	bl	800120c <restore_seqflags>
  turn_off_48v();
 8001302:	f000 fa25 	bl	8001750 <turn_off_48v>
  turn_off_5v();
 8001306:	f000 fa49 	bl	800179c <turn_off_5v>
  turn_off_10v();
 800130a:	f000 fa2b 	bl	8001764 <turn_off_10v>
  turn_off_vbat();
 800130e:	f000 fa15 	bl	800173c <turn_off_vbat>
	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8001312:	4c0c      	ldr	r4, [pc, #48]	; (8001344 <main+0x64>)
 8001314:	0020      	movs	r0, r4
 8001316:	f001 ffcd 	bl	80032b4 <HAL_I2C_EnableListen_IT>
 800131a:	2800      	cmp	r0, #0
 800131c:	d001      	beq.n	8001322 <main+0x42>
 800131e:	b672      	cpsid	i
  while (1)
 8001320:	e7fe      	b.n	8001320 <main+0x40>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8001322:	0020      	movs	r0, r4
 8001324:	f002 f814 	bl	8003350 <HAL_I2C_GetState>
 8001328:	2820      	cmp	r0, #32
 800132a:	d1fa      	bne.n	8001322 <main+0x42>
    if(has_function_to_execute)
 800132c:	4c06      	ldr	r4, [pc, #24]	; (8001348 <main+0x68>)
 800132e:	7823      	ldrb	r3, [r4, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0ee      	beq.n	8001312 <main+0x32>
        turn_on_10v();  // debugging
 8001334:	f000 f9c8 	bl	80016c8 <turn_on_10v>
    	(*command_ptr) ();
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <main+0x6c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4798      	blx	r3
         has_function_to_execute = false;
 800133e:	2300      	movs	r3, #0
 8001340:	7023      	strb	r3, [r4, #0]
 8001342:	e7e6      	b.n	8001312 <main+0x32>
 8001344:	20000534 	.word	0x20000534
 8001348:	200005b8 	.word	0x200005b8
 800134c:	200005b4 	.word	0x200005b4

08001350 <HAL_I2C_AddrCallback>:
{
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	000c      	movs	r4, r1
 8001354:	0015      	movs	r5, r2
	turn_on_vbat(); // Signal an OBC write for debug
 8001356:	f000 f9a3 	bl	80016a0 <turn_on_vbat>
  transferDirectionGlobal = transferDirection;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_I2C_AddrCallback+0x60>)
 800135c:	701c      	strb	r4, [r3, #0]
  addr_debug = addrMatchCode;
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_I2C_AddrCallback+0x64>)
 8001360:	801d      	strh	r5, [r3, #0]
  if(!transferDirectionGlobal)// OBC Write
 8001362:	2c00      	cmp	r4, #0
 8001364:	d10c      	bne.n	8001380 <HAL_I2C_AddrCallback+0x30>
     if (HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)recvBuffer, sizeof(recvBuffer)) != HAL_OK) {
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <HAL_I2C_AddrCallback+0x68>)
 800136a:	4814      	ldr	r0, [pc, #80]	; (80013bc <HAL_I2C_AddrCallback+0x6c>)
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	f001 ff73 	bl	8003258 <HAL_I2C_Slave_Receive_IT>
 8001372:	2800      	cmp	r0, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_AddrCallback+0x2a>
 8001376:	b672      	cpsid	i
  while (1)
 8001378:	e7fe      	b.n	8001378 <HAL_I2C_AddrCallback+0x28>
     turn_on_5v(); // Signal an OBC write for debug
 800137a:	f000 f9c1 	bl	8001700 <turn_on_5v>
}
 800137e:	bd70      	pop	{r4, r5, r6, pc}
     msp_error_code_send = msp_send_callback((uint8_t *)sendBuffer, &sendLength, addr);
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_I2C_AddrCallback+0x70>)
 8001382:	4d10      	ldr	r5, [pc, #64]	; (80013c4 <HAL_I2C_AddrCallback+0x74>)
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	4c10      	ldr	r4, [pc, #64]	; (80013c8 <HAL_I2C_AddrCallback+0x78>)
 8001388:	0029      	movs	r1, r5
 800138a:	0020      	movs	r0, r4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	f7ff fa01 	bl	8000794 <msp_send_callback>
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_I2C_AddrCallback+0x7c>)
 8001394:	b2c0      	uxtb	r0, r0
 8001396:	7018      	strb	r0, [r3, #0]
     if (msp_error_code_send != 0) {
 8001398:	2800      	cmp	r0, #0
 800139a:	d1f0      	bne.n	800137e <HAL_I2C_AddrCallback+0x2e>
     } else if (HAL_I2C_Slave_Transmit_IT(&hi2c1, (uint8_t *)sendBuffer, sendLength) != HAL_OK) {
 800139c:	682a      	ldr	r2, [r5, #0]
 800139e:	0021      	movs	r1, r4
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <HAL_I2C_AddrCallback+0x6c>)
 80013a2:	b292      	uxth	r2, r2
 80013a4:	f001 ff2a 	bl	80031fc <HAL_I2C_Slave_Transmit_IT>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d0e8      	beq.n	800137e <HAL_I2C_AddrCallback+0x2e>
 80013ac:	b672      	cpsid	i
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HAL_I2C_AddrCallback+0x5e>
 80013b0:	200009c4 	.word	0x200009c4
 80013b4:	200005b0 	.word	0x200005b0
 80013b8:	200005bb 	.word	0x200005bb
 80013bc:	20000534 	.word	0x20000534
 80013c0:	20000000 	.word	0x20000000
 80013c4:	200009c0 	.word	0x200009c0
 80013c8:	200007c0 	.word	0x200007c0
 80013cc:	200005ba 	.word	0x200005ba

080013d0 <HAL_I2C_SlaveRxCpltCallback>:
    recvLength = sizeof(recvBuffer) - hi2c1.XferCount;
 80013d0:	2180      	movs	r1, #128	; 0x80
{
 80013d2:	b510      	push	{r4, lr}
    recvLength = sizeof(recvBuffer) - hi2c1.XferCount;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80013d6:	0089      	lsls	r1, r1, #2
 80013d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    msp_error_code_receive = msp_recv_callback((uint8_t *)recvBuffer, recvLength, addr);
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <HAL_I2C_SlaveRxCpltCallback+0x28>)
    recvLength = sizeof(recvBuffer) - hi2c1.XferCount;
 80013dc:	1ac9      	subs	r1, r1, r3
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 80013e0:	6019      	str	r1, [r3, #0]
    msp_error_code_receive = msp_recv_callback((uint8_t *)recvBuffer, recvLength, addr);
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	f7ff f8d8 	bl	800059c <msp_recv_callback>
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80013ee:	7018      	strb	r0, [r3, #0]
}
 80013f0:	bd10      	pop	{r4, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	20000534 	.word	0x20000534
 80013f8:	200005bb 	.word	0x200005bb
 80013fc:	200007bc 	.word	0x200007bc
 8001400:	20000000 	.word	0x20000000
 8001404:	200005b9 	.word	0x200005b9

08001408 <Error_Handler>:
 8001408:	b672      	cpsid	i
  while (1)
 800140a:	e7fe      	b.n	800140a <Error_Handler+0x2>

0800140c <RS485>:

		// If no more communication will be done
		RS485(RS_MODE_DEACTIVATE)

*/
void RS485(uint8_t rs485_mode){
 800140c:	b510      	push	{r4, lr}
	switch (rs485_mode) {
 800140e:	2806      	cmp	r0, #6
 8001410:	d012      	beq.n	8001438 <RS485+0x2c>
 8001412:	2807      	cmp	r0, #7
 8001414:	d019      	beq.n	800144a <RS485+0x3e>
 8001416:	2805      	cmp	r0, #5
 8001418:	d10d      	bne.n	8001436 <RS485+0x2a>
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA, USART1_DE_Pin, GPIO_PIN_RESET);
                        break;

		case RS_MODE_TRANSMIT:
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_SET);
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	20a0      	movs	r0, #160	; 0xa0
 800141e:	2201      	movs	r2, #1
 8001420:	0109      	lsls	r1, r1, #4
 8001422:	05c0      	lsls	r0, r0, #23
 8001424:	f001 f9a6 	bl	8002774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, USART1_DE_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
                        break;

		case RS_MODE_DEACTIVATE:
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, USART1_DE_Pin, GPIO_PIN_RESET);
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	20a0      	movs	r0, #160	; 0xa0
 800142e:	0149      	lsls	r1, r1, #5
 8001430:	05c0      	lsls	r0, r0, #23
 8001432:	f001 f99f 	bl	8002774 <HAL_GPIO_WritePin>
                        break;
                
                //case RS_MODE_TRANSMIT
	}
}
 8001436:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_SET);
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	20a0      	movs	r0, #160	; 0xa0
 800143e:	0109      	lsls	r1, r1, #4
 8001440:	05c0      	lsls	r0, r0, #23
 8001442:	f001 f997 	bl	8002774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, USART1_DE_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	e7ef      	b.n	800142a <RS485+0x1e>
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	e7f5      	b.n	800143a <RS485+0x2e>
	...

08001450 <clear_piezo_buffer>:


void clear_piezo_buffer (void)
{
 8001450:	b510      	push	{r4, lr}
    Flush_Buffer8(piezoData, (dataLength));
 8001452:	4c06      	ldr	r4, [pc, #24]	; (800146c <clear_piezo_buffer+0x1c>)
 8001454:	4806      	ldr	r0, [pc, #24]	; (8001470 <clear_piezo_buffer+0x20>)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	b299      	uxth	r1, r3
 800145a:	f000 fb40 	bl	8001ade <Flush_Buffer8>
    Flush_Buffer8(piezoBufferint8, (dataLength));
 800145e:	6821      	ldr	r1, [r4, #0]
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <clear_piezo_buffer+0x24>)
 8001462:	b289      	uxth	r1, r1
 8001464:	f000 fb3b 	bl	8001ade <Flush_Buffer8>
}
 8001468:	bd10      	pop	{r4, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	200009c8 	.word	0x200009c8
 8001470:	20000e7c 	.word	0x20000e7c
 8001474:	20000cec 	.word	0x20000cec

08001478 <piezo_start_exp>:

/**
 * @brief starts the motor by sending xm3
 */
void piezo_start_exp(void)
{
 8001478:	b510      	push	{r4, lr}
  piezo_power_on();
 800147a:	f000 f94b 	bl	8001714 <piezo_power_on>
  HAL_Delay(3000); // time it takes for the motor to turn on.
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <piezo_start_exp+0x28>)
 8001480:	f000 fbf2 	bl	8001c68 <HAL_Delay>
  RS485(RS_MODE_TRANSMIT);
 8001484:	2005      	movs	r0, #5
 8001486:	f7ff ffc1 	bl	800140c <RS485>
  HAL_UART_Transmit(&huart1, (uint8_t *)xm3_buffer, 4, 1000);
 800148a:	23fa      	movs	r3, #250	; 0xfa
 800148c:	2204      	movs	r2, #4
 800148e:	4905      	ldr	r1, [pc, #20]	; (80014a4 <piezo_start_exp+0x2c>)
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <piezo_start_exp+0x30>)
 8001494:	f002 fe18 	bl	80040c8 <HAL_UART_Transmit>
  RS485(RS_MODE_DEACTIVATE);
 8001498:	2007      	movs	r0, #7
 800149a:	f7ff ffb7 	bl	800140c <RS485>
}
 800149e:	bd10      	pop	{r4, pc}
 80014a0:	00000bb8 	.word	0x00000bb8
 80014a4:	20000008 	.word	0x20000008
 80014a8:	2000110c 	.word	0x2000110c

080014ac <piezo_get_data>:
 * @param buffer to copy the data to
 * @param the amount of data to copy
 * @param the data offset from where to start copying
 */
void piezo_get_data(unsigned char *buf, unsigned long len, unsigned long data_offset)
{
 80014ac:	b530      	push	{r4, r5, lr}
  for (unsigned long i = data_offset; i < dataLength && i - data_offset < len; i++)
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <piezo_get_data+0x20>)
  {
    buf[i - data_offset] = piezoBufferint8[i];
 80014b0:	4c07      	ldr	r4, [pc, #28]	; (80014d0 <piezo_get_data+0x24>)
 80014b2:	1851      	adds	r1, r2, r1
 80014b4:	1a80      	subs	r0, r0, r2
  for (unsigned long i = data_offset; i < dataLength && i - data_offset < len; i++)
 80014b6:	681d      	ldr	r5, [r3, #0]
 80014b8:	4295      	cmp	r5, r2
 80014ba:	d901      	bls.n	80014c0 <piezo_get_data+0x14>
 80014bc:	428a      	cmp	r2, r1
 80014be:	d100      	bne.n	80014c2 <piezo_get_data+0x16>
  }
}
 80014c0:	bd30      	pop	{r4, r5, pc}
    buf[i - data_offset] = piezoBufferint8[i];
 80014c2:	5ca5      	ldrb	r5, [r4, r2]
 80014c4:	5485      	strb	r5, [r0, r2]
  for (unsigned long i = data_offset; i < dataLength && i - data_offset < len; i++)
 80014c6:	3201      	adds	r2, #1
 80014c8:	e7f5      	b.n	80014b6 <piezo_get_data+0xa>
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	200009c8 	.word	0x200009c8
 80014d0:	20000cec 	.word	0x20000cec

080014d4 <piezo_get_data_length>:
/**
 * @brief retrieves the length of the buffer
 */
int piezo_get_data_length(void)
{
  return dataLength;
 80014d4:	4b01      	ldr	r3, [pc, #4]	; (80014dc <piezo_get_data_length+0x8>)
 80014d6:	6818      	ldr	r0, [r3, #0]
}
 80014d8:	4770      	bx	lr
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	200009c8 	.word	0x200009c8

080014e0 <record_was_empty>:
 */
bool record_was_empty(char * bufferIn)
{
   // Previous implementation assumed that all values being equal to 384 means
   // that all values are '0', this is not always correct
   for (int i = 0; i <= 14; i += 2) {
 80014e0:	0002      	movs	r2, r0
{
 80014e2:	0003      	movs	r3, r0
 80014e4:	3210      	adds	r2, #16
       if (bufferIn[i] != '0') {
 80014e6:	7819      	ldrb	r1, [r3, #0]
 80014e8:	2930      	cmp	r1, #48	; 0x30
 80014ea:	d007      	beq.n	80014fc <record_was_empty+0x1c>
           for (int j = 0; j <= 14; j += 2) {
               if (bufferIn[j] != '\0')
 80014ec:	7803      	ldrb	r3, [r0, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <record_was_empty+0x24>
           for (int j = 0; j <= 14; j += 2) {
 80014f2:	3002      	adds	r0, #2
 80014f4:	4290      	cmp	r0, r2
 80014f6:	d1f9      	bne.n	80014ec <record_was_empty+0xc>
                   return false;
           }
           return true;
 80014f8:	2001      	movs	r0, #1
       }
   }
   return true;
}
 80014fa:	4770      	bx	lr
   for (int i = 0; i <= 14; i += 2) {
 80014fc:	3302      	adds	r3, #2
 80014fe:	4293      	cmp	r3, r2
 8001500:	d1f1      	bne.n	80014e6 <record_was_empty+0x6>
 8001502:	e7f9      	b.n	80014f8 <record_was_empty+0x18>
                   return false;
 8001504:	2000      	movs	r0, #0
 8001506:	e7f8      	b.n	80014fa <record_was_empty+0x1a>

08001508 <piezo_checksum>:
 * @prarm the buffer to calculate the checksum from
 * @param if the checksum was correct
 */
bool piezo_checksum(int *piezoBufferRx)
{
    piezoBufferRx++;
 8001508:	0001      	movs	r1, r0
    int a=0;
 800150a:	2300      	movs	r3, #0
{
 800150c:	b510      	push	{r4, lr}
    piezoBufferRx++;
 800150e:	1d02      	adds	r2, r0, #4
    for(int x=0; x<9; x++)
 8001510:	3128      	adds	r1, #40	; 0x28
    {
        a = a ^ *piezoBufferRx;
 8001512:	ca10      	ldmia	r2!, {r4}
 8001514:	4063      	eors	r3, r4
    for(int x=0; x<9; x++)
 8001516:	4291      	cmp	r1, r2
 8001518:	d1fb      	bne.n	8001512 <piezo_checksum+0xa>

        piezoBufferRx++;
    }
    if (a==*piezoBufferRx)
 800151a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800151c:	1ac0      	subs	r0, r0, r3
 800151e:	4243      	negs	r3, r0
 8001520:	4158      	adcs	r0, r3
    {
      return true;
    }
   return false;
}
 8001522:	b2c0      	uxtb	r0, r0
 8001524:	bd10      	pop	{r4, pc}

08001526 <ascii_to_int>:
 * @param buffer that the integer valued should be written to
 * @note Assumes that each ascii integer fits within an 'int', otherwise the converted
 *       value will be undefined
 */
void ascii_to_int (char * bufferIn, int * bufferOut)
{
 8001526:	b570      	push	{r4, r5, r6, lr}
 8001528:	000c      	movs	r4, r1
  for (int i = 0; i < 9; i++)
  {
      int temp = 0;
      while(((*bufferIn >= '0')&&(*bufferIn <= '9')))
      {
          temp = temp*10;
 800152a:	250a      	movs	r5, #10
 800152c:	3424      	adds	r4, #36	; 0x24
      int temp = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	e001      	b.n	8001536 <ascii_to_int+0x10>
          temp = temp*10;
 8001532:	436b      	muls	r3, r5
          temp = temp + (*bufferIn - '0');
 8001534:	18d3      	adds	r3, r2, r3
      while(((*bufferIn >= '0')&&(*bufferIn <= '9')))
 8001536:	7802      	ldrb	r2, [r0, #0]
          bufferIn++;
 8001538:	3001      	adds	r0, #1
      while(((*bufferIn >= '0')&&(*bufferIn <= '9')))
 800153a:	3a30      	subs	r2, #48	; 0x30
 800153c:	b2d6      	uxtb	r6, r2
 800153e:	2e09      	cmp	r6, #9
 8001540:	d9f7      	bls.n	8001532 <ascii_to_int+0xc>
      }
      *bufferOut=temp;
 8001542:	c108      	stmia	r1!, {r3}
  for (int i = 0; i < 9; i++)
 8001544:	42a1      	cmp	r1, r4
 8001546:	d1f2      	bne.n	800152e <ascii_to_int+0x8>
      bufferOut++;
      bufferIn++;
  }
}
 8001548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800154c <convert_to_big_endian>:

void convert_to_big_endian(uint8_t * buffer, uint16_t length)
{
  for (int i = 0; i < length; i++)
 800154c:	0049      	lsls	r1, r1, #1
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <convert_to_big_endian+0x1c>)
 8001550:	1841      	adds	r1, r0, r1
 8001552:	4288      	cmp	r0, r1
 8001554:	d100      	bne.n	8001558 <convert_to_big_endian+0xc>
  {
      buffer[(i << 1)] = (piezoBufferRxInt[i] >> 8) & 0xFF;
      buffer[(i << 1) + 1] = piezoBufferRxInt[i]  & 0xFF;
  }
}
 8001556:	4770      	bx	lr
      buffer[(i << 1)] = (piezoBufferRxInt[i] >> 8) & 0xFF;
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	1212      	asrs	r2, r2, #8
 800155c:	7002      	strb	r2, [r0, #0]
      buffer[(i << 1) + 1] = piezoBufferRxInt[i]  & 0xFF;
 800155e:	cb04      	ldmia	r3!, {r2}
 8001560:	7042      	strb	r2, [r0, #1]
  for (int i = 0; i < length; i++)
 8001562:	3002      	adds	r0, #2
 8001564:	e7f5      	b.n	8001552 <convert_to_big_endian+0x6>
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	200009cc 	.word	0x200009cc

0800156c <piezo_read_data_records>:
{
 800156c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t dataOffset = 0;
 800156e:	2400      	movs	r4, #0
  bool isThereMoreData = true;
 8001570:	2501      	movs	r5, #1
  int record_counter = 0;
 8001572:	0027      	movs	r7, r4
      ascii_to_int((char *)&piezoData[4], (int *)&piezoBufferRxInt[dataOffset]);
 8001574:	4b30      	ldr	r3, [pc, #192]	; (8001638 <piezo_read_data_records+0xcc>)
 8001576:	00a2      	lsls	r2, r4, #2
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	e04e      	b.n	800161c <piezo_read_data_records+0xb0>
      sprintf((char *)xu6_buffer, "XU6,%d\r", record_counter);
 800157e:	4d2f      	ldr	r5, [pc, #188]	; (800163c <piezo_read_data_records+0xd0>)
 8001580:	003a      	movs	r2, r7
 8001582:	492f      	ldr	r1, [pc, #188]	; (8001640 <piezo_read_data_records+0xd4>)
 8001584:	0028      	movs	r0, r5
 8001586:	f002 ff35 	bl	80043f4 <siprintf>
      RS485(RS_MODE_TRANSMIT); // Set transceiver to transmit
 800158a:	2005      	movs	r0, #5
 800158c:	f7ff ff3e 	bl	800140c <RS485>
      HAL_Delay(10);
 8001590:	200a      	movs	r0, #10
 8001592:	f000 fb69 	bl	8001c68 <HAL_Delay>
      HAL_UART_Transmit(&huart1, (uint8_t *)xu6_buffer, 6, 100);
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	2206      	movs	r2, #6
 800159a:	0029      	movs	r1, r5
 800159c:	4829      	ldr	r0, [pc, #164]	; (8001644 <piezo_read_data_records+0xd8>)
 800159e:	f002 fd93 	bl	80040c8 <HAL_UART_Transmit>
      RS485(RS_MODE_RECEIVE); // Set transceiver to receive
 80015a2:	2006      	movs	r0, #6
 80015a4:	f7ff ff32 	bl	800140c <RS485>
      int i=0;
 80015a8:	2600      	movs	r6, #0
        if(HAL_UART_Receive(&huart1, (uint8_t *)saveDataPointer, 1, 100) != HAL_OK)
 80015aa:	4d27      	ldr	r5, [pc, #156]	; (8001648 <piezo_read_data_records+0xdc>)
 80015ac:	2364      	movs	r3, #100	; 0x64
 80015ae:	2201      	movs	r2, #1
 80015b0:	0029      	movs	r1, r5
 80015b2:	4824      	ldr	r0, [pc, #144]	; (8001644 <piezo_read_data_records+0xd8>)
 80015b4:	f002 fdfa 	bl	80041ac <HAL_UART_Receive>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d107      	bne.n	80015cc <piezo_read_data_records+0x60>
        piezoData[i++] = saveDataPointer[0];
 80015bc:	782b      	ldrb	r3, [r5, #0]
 80015be:	4a23      	ldr	r2, [pc, #140]	; (800164c <piezo_read_data_records+0xe0>)
 80015c0:	3601      	adds	r6, #1
 80015c2:	5593      	strb	r3, [r2, r6]
        if ('\r' == saveDataPointer[0]||i == sizeof(piezoData) - 1)//so we do not write outside array
 80015c4:	2b0d      	cmp	r3, #13
 80015c6:	d001      	beq.n	80015cc <piezo_read_data_records+0x60>
 80015c8:	2ec7      	cmp	r6, #199	; 0xc7
 80015ca:	d1ee      	bne.n	80015aa <piezo_read_data_records+0x3e>
      HAL_Delay(1000);
 80015cc:	20fa      	movs	r0, #250	; 0xfa
 80015ce:	0080      	lsls	r0, r0, #2
 80015d0:	f000 fb4a 	bl	8001c68 <HAL_Delay>
      RS485(RS_MODE_DEACTIVATE); // Turn off communication
 80015d4:	2007      	movs	r0, #7
 80015d6:	f7ff ff19 	bl	800140c <RS485>
      if(record_was_empty((char *)&piezoData[6]) || dataOffset + 9 >= sizeof(piezoBufferRxInt))
 80015da:	481d      	ldr	r0, [pc, #116]	; (8001650 <piezo_read_data_records+0xe4>)
 80015dc:	f7ff ff80 	bl	80014e0 <record_was_empty>
 80015e0:	1e05      	subs	r5, r0, #0
 80015e2:	d126      	bne.n	8001632 <piezo_read_data_records+0xc6>
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <piezo_read_data_records+0xe8>)
 80015e6:	429c      	cmp	r4, r3
 80015e8:	d8c4      	bhi.n	8001574 <piezo_read_data_records+0x8>
      ascii_to_int((char *)&piezoData[4], (int *)&piezoBufferRxInt[dataOffset]);
 80015ea:	9901      	ldr	r1, [sp, #4]
 80015ec:	481a      	ldr	r0, [pc, #104]	; (8001658 <piezo_read_data_records+0xec>)
 80015ee:	f7ff ff9a 	bl	8001526 <ascii_to_int>
      if(piezo_checksum((int *)&piezoBufferRxInt[dataOffset]))
 80015f2:	9801      	ldr	r0, [sp, #4]
 80015f4:	f7ff ff88 	bl	8001508 <piezo_checksum>
 80015f8:	1e05      	subs	r5, r0, #0
 80015fa:	d003      	beq.n	8001604 <piezo_read_data_records+0x98>
        dataOffset += 9;
 80015fc:	3409      	adds	r4, #9
 80015fe:	b2a4      	uxth	r4, r4
        record_counter++;
 8001600:	3701      	adds	r7, #1
        break; // break the attempt loop
 8001602:	e7b7      	b.n	8001574 <piezo_read_data_records+0x8>
        Flush_Buffer8(piezoData, i);
 8001604:	4815      	ldr	r0, [pc, #84]	; (800165c <piezo_read_data_records+0xf0>)
 8001606:	b2b1      	uxth	r1, r6
 8001608:	f000 fa69 	bl	8001ade <Flush_Buffer8>
    for (a =0; a<NUMBER_OF_READ_ATTEMTS; a++)
 800160c:	9b00      	ldr	r3, [sp, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <piezo_read_data_records+0xf4>)
 8001614:	9a00      	ldr	r2, [sp, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4293      	cmp	r3, r2
 800161a:	dcb0      	bgt.n	800157e <piezo_read_data_records+0x12>
  while(isThereMoreData)
 800161c:	2d00      	cmp	r5, #0
 800161e:	d106      	bne.n	800162e <piezo_read_data_records+0xc2>
  convert_to_big_endian(piezoBufferint8, dataOffset);
 8001620:	0021      	movs	r1, r4
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <piezo_read_data_records+0xf8>)
 8001624:	f7ff ff92 	bl	800154c <convert_to_big_endian>
  return dataOffset*2;
 8001628:	0060      	lsls	r0, r4, #1
 800162a:	b2c0      	uxtb	r0, r0
}
 800162c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    for (a =0; a<NUMBER_OF_READ_ATTEMTS; a++)
 800162e:	2300      	movs	r3, #0
 8001630:	e7ee      	b.n	8001610 <piezo_read_data_records+0xa4>
        isThereMoreData = false;
 8001632:	2500      	movs	r5, #0
 8001634:	e79e      	b.n	8001574 <piezo_read_data_records+0x8>
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	200009cc 	.word	0x200009cc
 800163c:	20000f45 	.word	0x20000f45
 8001640:	08004cee 	.word	0x08004cee
 8001644:	2000110c 	.word	0x2000110c
 8001648:	20000f44 	.word	0x20000f44
 800164c:	20000e7b 	.word	0x20000e7b
 8001650:	20000e82 	.word	0x20000e82
 8001654:	00000316 	.word	0x00000316
 8001658:	20000e80 	.word	0x20000e80
 800165c:	20000e7c 	.word	0x20000e7c
 8001660:	20000004 	.word	0x20000004
 8001664:	20000cec 	.word	0x20000cec

08001668 <piezo_stop_exp>:
{
 8001668:	b510      	push	{r4, lr}
  RS485(RS_MODE_TRANSMIT);
 800166a:	2005      	movs	r0, #5
 800166c:	f7ff fece 	bl	800140c <RS485>
  HAL_UART_Transmit(&huart1, (uint8_t *)xm4_buffer, 4, 1000);
 8001670:	23fa      	movs	r3, #250	; 0xfa
 8001672:	2204      	movs	r2, #4
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <piezo_stop_exp+0x2c>)
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <piezo_stop_exp+0x30>)
 800167a:	f002 fd25 	bl	80040c8 <HAL_UART_Transmit>
  dataLength = piezo_read_data_records();
 800167e:	f7ff ff75 	bl	800156c <piezo_read_data_records>
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <piezo_stop_exp+0x34>)
 8001684:	6018      	str	r0, [r3, #0]
  piezo_power_off();
 8001686:	f000 f893 	bl	80017b0 <piezo_power_off>
  RS485(RS_MODE_DEACTIVATE); // Not really necessary, just added for clarity
 800168a:	2007      	movs	r0, #7
 800168c:	f7ff febe 	bl	800140c <RS485>
}
 8001690:	bd10      	pop	{r4, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	2000000c 	.word	0x2000000c
 8001698:	2000110c 	.word	0x2000110c
 800169c:	200009c8 	.word	0x200009c8

080016a0 <turn_on_vbat>:
/**
 * @brief turns on vbat for Piezo / SiC
 */
void turn_on_vbat(void)
{
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 80016a0:	2180      	movs	r1, #128	; 0x80
{
 80016a2:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	4802      	ldr	r0, [pc, #8]	; (80016b0 <turn_on_vbat+0x10>)
 80016a8:	0149      	lsls	r1, r1, #5
 80016aa:	f001 f863 	bl	8002774 <HAL_GPIO_WritePin>
}
 80016ae:	bd10      	pop	{r4, pc}
 80016b0:	50000400 	.word	0x50000400

080016b4 <turn_on_48v>:
/**
 * @brief turns on 48 V for Piezo
 */
void turn_on_48v(void)
{
    HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_SET);
 80016b4:	2180      	movs	r1, #128	; 0x80
{
 80016b6:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	4802      	ldr	r0, [pc, #8]	; (80016c4 <turn_on_48v+0x10>)
 80016bc:	0109      	lsls	r1, r1, #4
 80016be:	f001 f859 	bl	8002774 <HAL_GPIO_WritePin>
}
 80016c2:	bd10      	pop	{r4, pc}
 80016c4:	50000400 	.word	0x50000400

080016c8 <turn_on_10v>:
/**
 * @brief turns on 10v for SiC
 */
void turn_on_10v(void)
{
   HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_SET);
 80016c8:	2180      	movs	r1, #128	; 0x80
{
 80016ca:	b510      	push	{r4, lr}
   HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	4802      	ldr	r0, [pc, #8]	; (80016d8 <turn_on_10v+0x10>)
 80016d0:	00c9      	lsls	r1, r1, #3
 80016d2:	f001 f84f 	bl	8002774 <HAL_GPIO_WritePin>
}
 80016d6:	bd10      	pop	{r4, pc}
 80016d8:	50000400 	.word	0x50000400

080016dc <sic_power_on>:
  sic_running = true;
 80016dc:	2201      	movs	r2, #1
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <sic_power_on+0x1c>)
{
 80016e0:	b510      	push	{r4, lr}
  sic_running = true;
 80016e2:	701a      	strb	r2, [r3, #0]
  if (!piezo_running) {
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <sic_power_on+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <sic_power_on+0x14>
	  turn_on_vbat();
 80016ec:	f7ff ffd8 	bl	80016a0 <turn_on_vbat>
  turn_on_10v();
 80016f0:	f7ff ffea 	bl	80016c8 <turn_on_10v>
}
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	20000f57 	.word	0x20000f57
 80016fc:	20000f56 	.word	0x20000f56

08001700 <turn_on_5v>:
 *
 * The pin controls a PMOSFET, therefore the polarity is reversed
 */
void turn_on_5v(void)
{
  HAL_GPIO_WritePin(GPIOB, Piezo_ON_Pin, GPIO_PIN_RESET);  // reverse polarity!
 8001700:	2180      	movs	r1, #128	; 0x80
{
 8001702:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, Piezo_ON_Pin, GPIO_PIN_RESET);  // reverse polarity!
 8001704:	2200      	movs	r2, #0
 8001706:	4802      	ldr	r0, [pc, #8]	; (8001710 <turn_on_5v+0x10>)
 8001708:	0189      	lsls	r1, r1, #6
 800170a:	f001 f833 	bl	8002774 <HAL_GPIO_WritePin>
}
 800170e:	bd10      	pop	{r4, pc}
 8001710:	50000400 	.word	0x50000400

08001714 <piezo_power_on>:
  piezo_running = true;
 8001714:	2201      	movs	r2, #1
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <piezo_power_on+0x20>)
{
 8001718:	b510      	push	{r4, lr}
  piezo_running = true;
 800171a:	701a      	strb	r2, [r3, #0]
  if (!sic_running) {
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <piezo_power_on+0x24>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <piezo_power_on+0x14>
	  turn_on_vbat();
 8001724:	f7ff ffbc 	bl	80016a0 <turn_on_vbat>
  turn_on_5v();
 8001728:	f7ff ffea 	bl	8001700 <turn_on_5v>
  turn_on_48v();
 800172c:	f7ff ffc2 	bl	80016b4 <turn_on_48v>
}
 8001730:	bd10      	pop	{r4, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	20000f56 	.word	0x20000f56
 8001738:	20000f57 	.word	0x20000f57

0800173c <turn_off_vbat>:
/**
 * @brief turns off vbat for Piezo / SiC
 */
void turn_off_vbat(void)
{
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_RESET);
 800173c:	2180      	movs	r1, #128	; 0x80
{
 800173e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	4802      	ldr	r0, [pc, #8]	; (800174c <turn_off_vbat+0x10>)
 8001744:	0149      	lsls	r1, r1, #5
 8001746:	f001 f815 	bl	8002774 <HAL_GPIO_WritePin>
}
 800174a:	bd10      	pop	{r4, pc}
 800174c:	50000400 	.word	0x50000400

08001750 <turn_off_48v>:
/**
 * @brief turns off 48v for Piezo
 */
void turn_off_48v(void)
{
    HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_RESET);
 8001750:	2180      	movs	r1, #128	; 0x80
{
 8001752:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	4802      	ldr	r0, [pc, #8]	; (8001760 <turn_off_48v+0x10>)
 8001758:	0109      	lsls	r1, r1, #4
 800175a:	f001 f80b 	bl	8002774 <HAL_GPIO_WritePin>
}
 800175e:	bd10      	pop	{r4, pc}
 8001760:	50000400 	.word	0x50000400

08001764 <turn_off_10v>:
/**
 * @brief turns off 10v for SiC
 */
void turn_off_10v(void)
{
   HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_RESET);
 8001764:	2180      	movs	r1, #128	; 0x80
{
 8001766:	b510      	push	{r4, lr}
   HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	4802      	ldr	r0, [pc, #8]	; (8001774 <turn_off_10v+0x10>)
 800176c:	00c9      	lsls	r1, r1, #3
 800176e:	f001 f801 	bl	8002774 <HAL_GPIO_WritePin>
}
 8001772:	bd10      	pop	{r4, pc}
 8001774:	50000400 	.word	0x50000400

08001778 <sic_power_off>:
{
 8001778:	b510      	push	{r4, lr}
	turn_off_10v();
 800177a:	f7ff fff3 	bl	8001764 <turn_off_10v>
	if(!piezo_running) {
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <sic_power_off+0x1c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <sic_power_off+0x12>
		turn_off_vbat();
 8001786:	f7ff ffd9 	bl	800173c <turn_off_vbat>
	sic_running = false;
 800178a:	2200      	movs	r2, #0
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <sic_power_off+0x20>)
 800178e:	701a      	strb	r2, [r3, #0]
}
 8001790:	bd10      	pop	{r4, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	20000f56 	.word	0x20000f56
 8001798:	20000f57 	.word	0x20000f57

0800179c <turn_off_5v>:
 *
 * The pin controls a PMOSFET, therefore the polarity is reversed
 */
void turn_off_5v(void)
{
  HAL_GPIO_WritePin(GPIOB, Piezo_ON_Pin, GPIO_PIN_SET);  // reverse polarity!
 800179c:	2180      	movs	r1, #128	; 0x80
{
 800179e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, Piezo_ON_Pin, GPIO_PIN_SET);  // reverse polarity!
 80017a0:	2201      	movs	r2, #1
 80017a2:	4802      	ldr	r0, [pc, #8]	; (80017ac <turn_off_5v+0x10>)
 80017a4:	0189      	lsls	r1, r1, #6
 80017a6:	f000 ffe5 	bl	8002774 <HAL_GPIO_WritePin>
}
 80017aa:	bd10      	pop	{r4, pc}
 80017ac:	50000400 	.word	0x50000400

080017b0 <piezo_power_off>:
{
 80017b0:	b510      	push	{r4, lr}
	turn_off_48v();
 80017b2:	f7ff ffcd 	bl	8001750 <turn_off_48v>
	turn_off_5v();
 80017b6:	f7ff fff1 	bl	800179c <turn_off_5v>
	if(!sic_running) {
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <piezo_power_off+0x20>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <piezo_power_off+0x16>
		turn_off_vbat();
 80017c2:	f7ff ffbb 	bl	800173c <turn_off_vbat>
   piezo_running = false;
 80017c6:	2200      	movs	r2, #0
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <piezo_power_off+0x24>)
 80017ca:	701a      	strb	r2, [r3, #0]
}
 80017cc:	bd10      	pop	{r4, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	20000f57 	.word	0x20000f57
 80017d4:	20000f56 	.word	0x20000f56

080017d8 <clear_sic_buffer>:
void convert_8bit(uint8_t * buffer);
uint8_t buffer[BUFFERLENGTH];

// @brief Clears the experiment buffer
void clear_sic_buffer (void)
{
 80017d8:	b510      	push	{r4, lr}
    Flush_Buffer8(buffer, BUFFERLENGTH);
 80017da:	21d8      	movs	r1, #216	; 0xd8
 80017dc:	4801      	ldr	r0, [pc, #4]	; (80017e4 <clear_sic_buffer+0xc>)
 80017de:	f000 f97e 	bl	8001ade <Flush_Buffer8>
}
 80017e2:	bd10      	pop	{r4, pc}
 80017e4:	20000f58 	.word	0x20000f58

080017e8 <sic_get_data>:


void sic_get_data(unsigned char *buf, unsigned long len, unsigned long data_offset)
{
 80017e8:	b510      	push	{r4, lr}
  for (unsigned long i = data_offset; i < BUFFERLENGTH && i - data_offset < len; i++)
  {
    buf[i - data_offset] = buffer[i];
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <sic_get_data+0x1c>)
 80017ec:	1851      	adds	r1, r2, r1
 80017ee:	1a80      	subs	r0, r0, r2
  for (unsigned long i = data_offset; i < BUFFERLENGTH && i - data_offset < len; i++)
 80017f0:	2ad7      	cmp	r2, #215	; 0xd7
 80017f2:	d801      	bhi.n	80017f8 <sic_get_data+0x10>
 80017f4:	428a      	cmp	r2, r1
 80017f6:	d100      	bne.n	80017fa <sic_get_data+0x12>
  }
}
 80017f8:	bd10      	pop	{r4, pc}
    buf[i - data_offset] = buffer[i];
 80017fa:	5c9c      	ldrb	r4, [r3, r2]
 80017fc:	5484      	strb	r4, [r0, r2]
  for (unsigned long i = data_offset; i < BUFFERLENGTH && i - data_offset < len; i++)
 80017fe:	3201      	adds	r2, #1
 8001800:	e7f6      	b.n	80017f0 <sic_get_data+0x8>
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	20000f58 	.word	0x20000f58

08001808 <readADCvalues>:
  HAL_Delay(100);
  sic_power_off();

}

void readADCvalues(uint8_t index){
 8001808:	2310      	movs	r3, #16
 800180a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180c:	b08b      	sub	sp, #44	; 0x2c
 800180e:	9003      	str	r0, [sp, #12]
 8001810:	9302      	str	r3, [sp, #8]


  for(uint8_t i = 0; i < 16; i++){

    //Calibrate ADCs in the beginning of every run
    if(HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK){
 8001812:	4c58      	ldr	r4, [pc, #352]	; (8001974 <readADCvalues+0x16c>)
 8001814:	2100      	movs	r1, #0
 8001816:	0020      	movs	r0, r4
 8001818:	f000 fce0 	bl	80021dc <HAL_ADCEx_Calibration_Start>
 800181c:	2800      	cmp	r0, #0
 800181e:	d001      	beq.n	8001824 <readADCvalues+0x1c>
      Error_Handler();
 8001820:	f7ff fdf2 	bl	8001408 <Error_Handler>
    }

    HAL_Delay(10);
 8001824:	200a      	movs	r0, #10
 8001826:	f000 fa1f 	bl	8001c68 <HAL_Delay>

    //Start ADC reading

    if(HAL_ADC_Start(&hadc) != HAL_OK){
 800182a:	0020      	movs	r0, r4
 800182c:	f000 fbc0 	bl	8001fb0 <HAL_ADC_Start>
 8001830:	2800      	cmp	r0, #0
 8001832:	d002      	beq.n	800183a <readADCvalues+0x32>
            while(1) {

                    Error_Handler();
 8001834:	f7ff fde8 	bl	8001408 <Error_Handler>
            while(1) {
 8001838:	e7fc      	b.n	8001834 <readADCvalues+0x2c>
            }
    }


    HAL_ADC_PollForConversion(&hadc, 100);
 800183a:	2164      	movs	r1, #100	; 0x64
 800183c:	0020      	movs	r0, r4
 800183e:	f000 fc01 	bl	8002044 <HAL_ADC_PollForConversion>
    experiments[0+index].temperature += HAL_ADC_GetValue(&hadc);
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fc62 	bl	800210c <HAL_ADC_GetValue>
 8001848:	9b03      	ldr	r3, [sp, #12]
 800184a:	4d4b      	ldr	r5, [pc, #300]	; (8001978 <readADCvalues+0x170>)
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	5b5b      	ldrh	r3, [r3, r5]
 8001852:	9a01      	ldr	r2, [sp, #4]
 8001854:	181b      	adds	r3, r3, r0
 8001856:	5353      	strh	r3, [r2, r5]
    //printf("\n temp si %d\n", experiments[0+index].temperature);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 8001858:	2164      	movs	r1, #100	; 0x64
 800185a:	0020      	movs	r0, r4
 800185c:	f000 fbf2 	bl	8002044 <HAL_ADC_PollForConversion>
    experiments[0+index].Vbe += HAL_ADC_GetValue(&hadc);
 8001860:	0020      	movs	r0, r4
 8001862:	f000 fc53 	bl	800210c <HAL_ADC_GetValue>
 8001866:	9b01      	ldr	r3, [sp, #4]
    //printf("\n Vbe si %d\n", experiments[0+index].Vbe);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 8001868:	2164      	movs	r1, #100	; 0x64
    experiments[0+index].Vbe += HAL_ADC_GetValue(&hadc);
 800186a:	18ee      	adds	r6, r5, r3
 800186c:	1cb3      	adds	r3, r6, #2
 800186e:	9304      	str	r3, [sp, #16]
 8001870:	8873      	ldrh	r3, [r6, #2]
 8001872:	181b      	adds	r3, r3, r0
 8001874:	8073      	strh	r3, [r6, #2]
    HAL_ADC_PollForConversion(&hadc, 100);
 8001876:	0020      	movs	r0, r4
 8001878:	f000 fbe4 	bl	8002044 <HAL_ADC_PollForConversion>
    experiments[0+index].Vb += HAL_ADC_GetValue(&hadc);
 800187c:	0020      	movs	r0, r4
 800187e:	f000 fc45 	bl	800210c <HAL_ADC_GetValue>
 8001882:	1d33      	adds	r3, r6, #4
 8001884:	9305      	str	r3, [sp, #20]
 8001886:	88b3      	ldrh	r3, [r6, #4]
    //printf("\n Vb si %d\n", experiments[0+index].Vb);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 8001888:	2164      	movs	r1, #100	; 0x64
    experiments[0+index].Vb += HAL_ADC_GetValue(&hadc);
 800188a:	181b      	adds	r3, r3, r0
 800188c:	80b3      	strh	r3, [r6, #4]
    HAL_ADC_PollForConversion(&hadc, 100);
 800188e:	0020      	movs	r0, r4
 8001890:	f000 fbd8 	bl	8002044 <HAL_ADC_PollForConversion>
    experiments[0+index].Vc += HAL_ADC_GetValue(&hadc);
 8001894:	0020      	movs	r0, r4
 8001896:	f000 fc39 	bl	800210c <HAL_ADC_GetValue>
 800189a:	1db3      	adds	r3, r6, #6
 800189c:	9306      	str	r3, [sp, #24]
 800189e:	88f3      	ldrh	r3, [r6, #6]
    //printf("\n Vc si %d\n", experiments[0+index].Vc);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 80018a0:	2164      	movs	r1, #100	; 0x64
    experiments[0+index].Vc += HAL_ADC_GetValue(&hadc);
 80018a2:	181b      	adds	r3, r3, r0
 80018a4:	80f3      	strh	r3, [r6, #6]
    HAL_ADC_PollForConversion(&hadc, 100);
 80018a6:	0020      	movs	r0, r4
 80018a8:	f000 fbcc 	bl	8002044 <HAL_ADC_PollForConversion>
    experiments[1+index].temperature += HAL_ADC_GetValue(&hadc);
 80018ac:	0020      	movs	r0, r4
 80018ae:	f000 fc2d 	bl	800210c <HAL_ADC_GetValue>
 80018b2:	9b03      	ldr	r3, [sp, #12]
    // printf("\n temp sic %d\n", experiments[1+index].temperature);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 80018b4:	2164      	movs	r1, #100	; 0x64
    experiments[1+index].temperature += HAL_ADC_GetValue(&hadc);
 80018b6:	1c5f      	adds	r7, r3, #1
 80018b8:	00ff      	lsls	r7, r7, #3
 80018ba:	5b7b      	ldrh	r3, [r7, r5]
    experiments[1+index].Vbe += HAL_ADC_GetValue(&hadc);
 80018bc:	19ee      	adds	r6, r5, r7
    experiments[1+index].temperature += HAL_ADC_GetValue(&hadc);
 80018be:	181b      	adds	r3, r3, r0
 80018c0:	537b      	strh	r3, [r7, r5]
    HAL_ADC_PollForConversion(&hadc, 100);
 80018c2:	0020      	movs	r0, r4
 80018c4:	f000 fbbe 	bl	8002044 <HAL_ADC_PollForConversion>
    experiments[1+index].Vbe += HAL_ADC_GetValue(&hadc);
 80018c8:	0020      	movs	r0, r4
 80018ca:	f000 fc1f 	bl	800210c <HAL_ADC_GetValue>
 80018ce:	1cb3      	adds	r3, r6, #2
 80018d0:	9307      	str	r3, [sp, #28]
 80018d2:	8873      	ldrh	r3, [r6, #2]
    // printf("\n ube sic %d\n", experiments[1+index].ube);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 80018d4:	2164      	movs	r1, #100	; 0x64
    experiments[1+index].Vbe += HAL_ADC_GetValue(&hadc);
 80018d6:	181b      	adds	r3, r3, r0
 80018d8:	8073      	strh	r3, [r6, #2]
    HAL_ADC_PollForConversion(&hadc, 100);
 80018da:	0020      	movs	r0, r4
 80018dc:	f000 fbb2 	bl	8002044 <HAL_ADC_PollForConversion>
    experiments[1+index].Vb += HAL_ADC_GetValue(&hadc);
 80018e0:	0020      	movs	r0, r4
 80018e2:	f000 fc13 	bl	800210c <HAL_ADC_GetValue>
 80018e6:	1d33      	adds	r3, r6, #4
 80018e8:	9308      	str	r3, [sp, #32]
 80018ea:	88b3      	ldrh	r3, [r6, #4]
    //   printf("\n vrb sic %d\n", experiments[1+index].vrb);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 80018ec:	2164      	movs	r1, #100	; 0x64
    experiments[1+index].Vb += HAL_ADC_GetValue(&hadc);
 80018ee:	181b      	adds	r3, r3, r0
 80018f0:	80b3      	strh	r3, [r6, #4]
    HAL_ADC_PollForConversion(&hadc, 100);
 80018f2:	0020      	movs	r0, r4
 80018f4:	f000 fba6 	bl	8002044 <HAL_ADC_PollForConversion>
    experiments[1+index].Vc += HAL_ADC_GetValue(&hadc);
 80018f8:	0020      	movs	r0, r4
 80018fa:	f000 fc07 	bl	800210c <HAL_ADC_GetValue>
 80018fe:	1db3      	adds	r3, r6, #6
 8001900:	9309      	str	r3, [sp, #36]	; 0x24
 8001902:	88f3      	ldrh	r3, [r6, #6]
 8001904:	181b      	adds	r3, r3, r0
 8001906:	80f3      	strh	r3, [r6, #6]
    // Probably isn't necessary though, since each calibration should reset
    // the ADC que.
    //HAL_ADC_PollForConversion(&hadc, 100);


    HAL_Delay (2);
 8001908:	2002      	movs	r0, #2
 800190a:	f000 f9ad 	bl	8001c68 <HAL_Delay>

    HAL_ADC_Stop (&hadc);
 800190e:	0020      	movs	r0, r4
 8001910:	f000 fb7a 	bl	8002008 <HAL_ADC_Stop>
  for(uint8_t i = 0; i < 16; i++){
 8001914:	9b02      	ldr	r3, [sp, #8]
 8001916:	3b01      	subs	r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d000      	beq.n	8001922 <readADCvalues+0x11a>
 8001920:	e777      	b.n	8001812 <readADCvalues+0xa>
  }

  experiments[0+index].temperature = experiments[0+index].temperature >> 4;
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	9a01      	ldr	r2, [sp, #4]
 8001926:	5b5b      	ldrh	r3, [r3, r5]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	5353      	strh	r3, [r2, r5]
  //printf("temp si %d\n", experiments[0+index].temperature);
  experiments[0+index].Vbe = experiments[0+index].Vbe >> 4;
 800192c:	9b04      	ldr	r3, [sp, #16]
 800192e:	9a04      	ldr	r2, [sp, #16]
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	8013      	strh	r3, [r2, #0]
  experiments[0+index].Vb = experiments[0+index].Vb >> 4;
 8001936:	9b05      	ldr	r3, [sp, #20]
 8001938:	9a05      	ldr	r2, [sp, #20]
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	8013      	strh	r3, [r2, #0]
  experiments[0+index].Vc = experiments[0+index].Vc >> 4;
 8001940:	9b06      	ldr	r3, [sp, #24]
 8001942:	9a06      	ldr	r2, [sp, #24]
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	8013      	strh	r3, [r2, #0]

  experiments[1+index].temperature = experiments[1+index].temperature >> 4;
 800194a:	5b7b      	ldrh	r3, [r7, r5]
  //printf("temp SiC %d\n", experiments[1+index].temperature);
  experiments[1+index].Vbe = experiments[1+index].Vbe >> 4;
 800194c:	9a07      	ldr	r2, [sp, #28]
  experiments[1+index].temperature = experiments[1+index].temperature >> 4;
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	537b      	strh	r3, [r7, r5]
  experiments[1+index].Vbe = experiments[1+index].Vbe >> 4;
 8001952:	9b07      	ldr	r3, [sp, #28]
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	8013      	strh	r3, [r2, #0]
  experiments[1+index].Vb = experiments[1+index].Vb >> 4;
 800195a:	9b08      	ldr	r3, [sp, #32]
 800195c:	9a08      	ldr	r2, [sp, #32]
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	8013      	strh	r3, [r2, #0]
  experiments[1+index].Vc = experiments[1+index].Vc >> 4;
 8001964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	8013      	strh	r3, [r2, #0]
}
 800196e:	b00b      	add	sp, #44	; 0x2c
 8001970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	200004c8 	.word	0x200004c8
 8001978:	20001030 	.word	0x20001030

0800197c <convert_8bit>:
 void convert_8bit(uint8_t * buffer){
   //printf("\n temp si %d\n", experiments[0].temperature);

   uint16_t buffer_index = 0;

   for(uint16_t experiment_index = 0; experiment_index < EXPERIMENTPOINTS; experiment_index++){
 800197c:	0001      	movs	r1, r0
 void convert_8bit(uint8_t * buffer){
 800197e:	b510      	push	{r4, lr}
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <convert_8bit+0x34>)
 8001982:	31d8      	adds	r1, #216	; 0xd8
    buffer[buffer_index] = experiments[experiment_index].temperature >> 8 & 0xFF;
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	0a14      	lsrs	r4, r2, #8
 8001988:	7004      	strb	r4, [r0, #0]
    buffer[buffer_index + 1] = experiments[experiment_index].temperature & 0xFF;
 800198a:	7042      	strb	r2, [r0, #1]

    buffer[buffer_index + 2] = experiments[experiment_index].Vbe >> 8 & 0xFF;
 800198c:	885a      	ldrh	r2, [r3, #2]
 800198e:	0a14      	lsrs	r4, r2, #8
 8001990:	7084      	strb	r4, [r0, #2]
    buffer[buffer_index + 3] = experiments[experiment_index].Vbe & 0xFF;
 8001992:	70c2      	strb	r2, [r0, #3]

    buffer[buffer_index + 4] = experiments[experiment_index].Vb >> 8 & 0xFF;
 8001994:	889a      	ldrh	r2, [r3, #4]
 8001996:	0a14      	lsrs	r4, r2, #8
 8001998:	7104      	strb	r4, [r0, #4]
    buffer[buffer_index + 5] = experiments[experiment_index].Vb;
 800199a:	7142      	strb	r2, [r0, #5]

    buffer[buffer_index + 6] = experiments[experiment_index].Vc >> 8 & 0xFF;
 800199c:	88da      	ldrh	r2, [r3, #6]
   for(uint16_t experiment_index = 0; experiment_index < EXPERIMENTPOINTS; experiment_index++){
 800199e:	3308      	adds	r3, #8
    buffer[buffer_index + 6] = experiments[experiment_index].Vc >> 8 & 0xFF;
 80019a0:	0a14      	lsrs	r4, r2, #8
 80019a2:	7184      	strb	r4, [r0, #6]
    buffer[buffer_index + 7] = experiments[experiment_index].Vc;
 80019a4:	71c2      	strb	r2, [r0, #7]
   for(uint16_t experiment_index = 0; experiment_index < EXPERIMENTPOINTS; experiment_index++){
 80019a6:	3008      	adds	r0, #8
 80019a8:	4281      	cmp	r1, r0
 80019aa:	d1eb      	bne.n	8001984 <convert_8bit+0x8>
     y=y+2;
    }
  }
  */

 }
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	20001030 	.word	0x20001030

080019b4 <setDAC>:
@ The setDAC function, transforms the digital output from the MCU to
an Analog output which is needed for the BJT circuits.
@return void
*/
void setDAC(uint32_t voltage){
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, voltage);
 80019b4:	2200      	movs	r2, #0
void setDAC(uint32_t voltage){
 80019b6:	b510      	push	{r4, lr}
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, voltage);
 80019b8:	4c05      	ldr	r4, [pc, #20]	; (80019d0 <setDAC+0x1c>)
void setDAC(uint32_t voltage){
 80019ba:	0003      	movs	r3, r0
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, voltage);
 80019bc:	0011      	movs	r1, r2
 80019be:	0020      	movs	r0, r4
 80019c0:	f000 fd04 	bl	80023cc <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 80019c4:	2100      	movs	r1, #0
 80019c6:	0020      	movs	r0, r4
 80019c8:	f000 fce0 	bl	800238c <HAL_DAC_Start>
}
 80019cc:	bd10      	pop	{r4, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	20000524 	.word	0x20000524

080019d4 <setDAC_voltage>:

@ Calculates the corresponding digital value of the param with a reference
voltage set to 3.29 and sets the DAC to the value.
@return void
*/
void setDAC_voltage(uint32_t voltage){
 80019d4:	b510      	push	{r4, lr}
  uint32_t digital_voltage = (voltage * 4095) / (3290);
 80019d6:	0303      	lsls	r3, r0, #12
 80019d8:	4903      	ldr	r1, [pc, #12]	; (80019e8 <setDAC_voltage+0x14>)
 80019da:	1a18      	subs	r0, r3, r0
 80019dc:	f7fe fba8 	bl	8000130 <__udivsi3>
  setDAC(digital_voltage);
 80019e0:	f7ff ffe8 	bl	80019b4 <setDAC>
  //printf("%d\n", digital_voltage);
}
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	00000cda 	.word	0x00000cda

080019ec <start_test>:
void start_test(void){
 80019ec:	b570      	push	{r4, r5, r6, lr}
    experiments[i].temperature = 0;
 80019ee:	2200      	movs	r2, #0
void start_test(void){
 80019f0:	241b      	movs	r4, #27
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <start_test+0x5c>)
  for(uint16_t i = 0; i < EXPERIMENTPOINTS; i++){
 80019f4:	3c01      	subs	r4, #1
 80019f6:	b2a4      	uxth	r4, r4
    experiments[i].temperature = 0;
 80019f8:	801a      	strh	r2, [r3, #0]
    experiments[i].Vb = 0;
 80019fa:	809a      	strh	r2, [r3, #4]
    experiments[i].Vbe = 0;
 80019fc:	805a      	strh	r2, [r3, #2]
    experiments[i].Vc = 0;
 80019fe:	80da      	strh	r2, [r3, #6]
  for(uint16_t i = 0; i < EXPERIMENTPOINTS; i++){
 8001a00:	3308      	adds	r3, #8
 8001a02:	2c00      	cmp	r4, #0
 8001a04:	d1f6      	bne.n	80019f4 <start_test+0x8>
  sic_power_on();
 8001a06:	f7ff fe69 	bl	80016dc <sic_power_on>
  HAL_Delay(1000);
 8001a0a:	20fa      	movs	r0, #250	; 0xfa
 8001a0c:	0080      	lsls	r0, r0, #2
 8001a0e:	f000 f92b 	bl	8001c68 <HAL_Delay>
    setDAC_voltage(dac_voltage);
 8001a12:	2564      	movs	r5, #100	; 0x64
 8001a14:	0028      	movs	r0, r5
 8001a16:	4360      	muls	r0, r4
 8001a18:	302d      	adds	r0, #45	; 0x2d
 8001a1a:	30ff      	adds	r0, #255	; 0xff
 8001a1c:	f7ff ffda 	bl	80019d4 <setDAC_voltage>
    readADCvalues(index);
 8001a20:	0060      	lsls	r0, r4, #1
 8001a22:	b2c0      	uxtb	r0, r0
  for(uint16_t index = 0; index < EXPERIMENTPOINTS; index = index + 2){
 8001a24:	3401      	adds	r4, #1
    readADCvalues(index);
 8001a26:	f7ff feef 	bl	8001808 <readADCvalues>
  for(uint16_t index = 0; index < EXPERIMENTPOINTS; index = index + 2){
 8001a2a:	2c0e      	cmp	r4, #14
 8001a2c:	d1f2      	bne.n	8001a14 <start_test+0x28>
  convert_8bit(buffer);
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <start_test+0x60>)
 8001a30:	f7ff ffa4 	bl	800197c <convert_8bit>
  setDAC(0);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff ffbd 	bl	80019b4 <setDAC>
  HAL_Delay(100);
 8001a3a:	2064      	movs	r0, #100	; 0x64
 8001a3c:	f000 f914 	bl	8001c68 <HAL_Delay>
  sic_power_off();
 8001a40:	f7ff fe9a 	bl	8001778 <sic_power_off>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	20001030 	.word	0x20001030
 8001a4c:	20000f58 	.word	0x20000f58

08001a50 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a50:	2201      	movs	r2, #1
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_MspInit+0x18>)
 8001a54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a56:	430a      	orrs	r2, r1
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a5e:	0552      	lsls	r2, r2, #21
 8001a60:	430a      	orrs	r2, r1
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a64:	4770      	bx	lr
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	40021000 	.word	0x40021000

08001a6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler>

08001a6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler>

08001a70 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f000 f8e5 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7a:	bd10      	pop	{r4, pc}

08001a7c <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001a7c:	4806      	ldr	r0, [pc, #24]	; (8001a98 <I2C1_IRQHandler+0x1c>)
{
 8001a7e:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	23e0      	movs	r3, #224	; 0xe0
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	421a      	tst	r2, r3
 8001a8a:	d002      	beq.n	8001a92 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a8c:	f001 fc2f 	bl	80032ee <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001a90:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a92:	f001 fc23 	bl	80032dc <HAL_I2C_EV_IRQHandler>
}
 8001a96:	e7fb      	b.n	8001a90 <I2C1_IRQHandler+0x14>
 8001a98:	20000534 	.word	0x20000534

08001a9c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <_sbrk+0x30>)
 8001a9e:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <_sbrk+0x34>)
{
 8001aa0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa2:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <_sbrk+0x38>)
{
 8001aa6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001aa8:	6810      	ldr	r0, [r2, #0]
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d101      	bne.n	8001ab2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001aae:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <_sbrk+0x3c>)
 8001ab0:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	6810      	ldr	r0, [r2, #0]
 8001ab4:	18c3      	adds	r3, r0, r3
 8001ab6:	428b      	cmp	r3, r1
 8001ab8:	d906      	bls.n	8001ac8 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001aba:	f002 fc5f 	bl	800437c <__errno>
 8001abe:	230c      	movs	r3, #12
 8001ac0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001ac6:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001ac8:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001aca:	e7fc      	b.n	8001ac6 <_sbrk+0x2a>
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20002000 	.word	0x20002000
 8001ad4:	20001108 	.word	0x20001108
 8001ad8:	200011c0 	.word	0x200011c0

08001adc <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	4770      	bx	lr

08001ade <Flush_Buffer8>:
    pBuffer++;
  }
}

void Flush_Buffer8(uint8_t* pBuffer, uint16_t BufferLength)
{
 8001ade:	b510      	push	{r4, lr}
 8001ae0:	000a      	movs	r2, r1
  while (BufferLength--)
  {
    *pBuffer = 0;
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f002 fc7d 	bl	80043e2 <memset>
    
    pBuffer++;
  }
}
 8001ae8:	bd10      	pop	{r4, pc}
	...

08001aec <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	480b      	ldr	r0, [pc, #44]	; (8001b1c <MX_USART1_UART_Init+0x30>)
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_USART1_UART_Init+0x34>)
{
 8001af0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8001af2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001af4:	23e1      	movs	r3, #225	; 0xe1
 8001af6:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af8:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001afa:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afc:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001afe:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b00:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b02:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b04:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b0c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0e:	f002 fc03 	bl	8004318 <HAL_UART_Init>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8001b16:	f7ff fc77 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b1a:	bd10      	pop	{r4, pc}
 8001b1c:	2000110c 	.word	0x2000110c
 8001b20:	40013800 	.word	0x40013800

08001b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	0004      	movs	r4, r0
 8001b28:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	2214      	movs	r2, #20
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	a801      	add	r0, sp, #4
 8001b30:	f002 fc57 	bl	80043e2 <memset>
  if(uartHandle->Instance==USART1)
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_UART_MspInit+0x54>)
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d11b      	bne.n	8001b74 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_UART_MspInit+0x58>)
 8001b40:	01d2      	lsls	r2, r2, #7
 8001b42:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b46:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	430a      	orrs	r2, r1
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	400b      	ands	r3, r1
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	185b      	adds	r3, r3, r1
 8001b68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b6a:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b6e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f000 fd40 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b74:	b006      	add	sp, #24
 8001b76:	bd10      	pop	{r4, pc}
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40021000 	.word	0x40021000

08001b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b86:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <LoopForever+0xe>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b9c:	4c0b      	ldr	r4, [pc, #44]	; (8001bcc <LoopForever+0x16>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001baa:	f7ff ff97 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bae:	f002 fbeb 	bl	8004388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb2:	f7ff fb95 	bl	80012e0 <main>

08001bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb6:	e7fe      	b.n	8001bb6 <LoopForever>
  ldr   r0, =_estack
 8001bb8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001bc4:	08004d6c 	.word	0x08004d6c
  ldr r2, =_sbss
 8001bc8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001bcc:	200011bc 	.word	0x200011bc

08001bd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_COMP_IRQHandler>
	...

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	20fa      	movs	r0, #250	; 0xfa
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_InitTick+0x3c>)
 8001bdc:	0080      	lsls	r0, r0, #2
 8001bde:	7819      	ldrb	r1, [r3, #0]
 8001be0:	f7fe faa6 	bl	8000130 <__udivsi3>
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_InitTick+0x40>)
 8001be6:	0001      	movs	r1, r0
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	f7fe faa1 	bl	8000130 <__udivsi3>
 8001bee:	f000 fb7f 	bl	80022f0 <HAL_SYSTICK_Config>
 8001bf2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001bf4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf6:	2c00      	cmp	r4, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	2d03      	cmp	r5, #3
 8001bfc:	d807      	bhi.n	8001c0e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfe:	3802      	subs	r0, #2
 8001c00:	0022      	movs	r2, r4
 8001c02:	0029      	movs	r1, r5
 8001c04:	f000 fb3e 	bl	8002284 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	0020      	movs	r0, r4
 8001c0a:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_InitTick+0x44>)
 8001c0c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
 8001c10:	20000014 	.word	0x20000014
 8001c14:	20000010 	.word	0x20000010
 8001c18:	20000018 	.word	0x20000018

08001c1c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c1c:	2340      	movs	r3, #64	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_Init+0x24>)
{
 8001c20:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c22:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c24:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c26:	430b      	orrs	r3, r1
 8001c28:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2a:	f7ff ffd3 	bl	8001bd4 <HAL_InitTick>
 8001c2e:	1e04      	subs	r4, r0, #0
 8001c30:	d103      	bne.n	8001c3a <HAL_Init+0x1e>
    HAL_MspInit();
 8001c32:	f7ff ff0d 	bl	8001a50 <HAL_MspInit>
}
 8001c36:	0020      	movs	r0, r4
 8001c38:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	e7fb      	b.n	8001c36 <HAL_Init+0x1a>
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c44:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <HAL_IncTick+0x10>)
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_IncTick+0x14>)
 8001c48:	6811      	ldr	r1, [r2, #0]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	185b      	adds	r3, r3, r1
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	4770      	bx	lr
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	20001190 	.word	0x20001190
 8001c58:	20000014 	.word	0x20000014

08001c5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c5c:	4b01      	ldr	r3, [pc, #4]	; (8001c64 <HAL_GetTick+0x8>)
 8001c5e:	6818      	ldr	r0, [r3, #0]
}
 8001c60:	4770      	bx	lr
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	20001190 	.word	0x20001190

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fff6 	bl	8001c5c <HAL_GetTick>
 8001c70:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	1c63      	adds	r3, r4, #1
 8001c74:	d002      	beq.n	8001c7c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <HAL_Delay+0x20>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	1b40      	subs	r0, r0, r5
 8001c82:	42a0      	cmp	r0, r4
 8001c84:	d3fa      	bcc.n	8001c7c <HAL_Delay+0x14>
  {
  }
}
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
 8001c88:	20000014 	.word	0x20000014

08001c8c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <ADC_DelayMicroSecond+0x24>)
{
 8001c8e:	b513      	push	{r0, r1, r4, lr}
 8001c90:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <ADC_DelayMicroSecond+0x28>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f7fe fa4b 	bl	8000130 <__udivsi3>
 8001c9a:	4344      	muls	r4, r0
 8001c9c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8001c9e:	9b01      	ldr	r3, [sp, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d100      	bne.n	8001ca6 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8001ca4:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8001ca6:	9b01      	ldr	r3, [sp, #4]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	e7f7      	b.n	8001c9e <ADC_DelayMicroSecond+0x12>
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	20000010 	.word	0x20000010
 8001cb4:	000f4240 	.word	0x000f4240

08001cb8 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cb8:	2103      	movs	r1, #3
 8001cba:	6803      	ldr	r3, [r0, #0]
{
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cc0:	6898      	ldr	r0, [r3, #8]
 8001cc2:	4008      	ands	r0, r1
 8001cc4:	2801      	cmp	r0, #1
 8001cc6:	d001      	beq.n	8001ccc <ADC_Disable+0x14>
  return HAL_OK;
 8001cc8:	2000      	movs	r0, #0
}
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4202      	tst	r2, r0
 8001cd0:	d0fa      	beq.n	8001cc8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	689d      	ldr	r5, [r3, #8]
 8001cd6:	4015      	ands	r5, r2
 8001cd8:	2d01      	cmp	r5, #1
 8001cda:	d11d      	bne.n	8001d18 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8001cdc:	6898      	ldr	r0, [r3, #8]
 8001cde:	3a03      	subs	r2, #3
 8001ce0:	4302      	orrs	r2, r0
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001ce6:	f7ff ffb9 	bl	8001c5c <HAL_GetTick>
 8001cea:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	422b      	tst	r3, r5
 8001cf2:	d0e9      	beq.n	8001cc8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cf4:	f7ff ffb2 	bl	8001c5c <HAL_GetTick>
 8001cf8:	1b80      	subs	r0, r0, r6
 8001cfa:	280a      	cmp	r0, #10
 8001cfc:	d9f6      	bls.n	8001cec <ADC_Disable+0x34>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	422b      	tst	r3, r5
 8001d04:	d0f2      	beq.n	8001cec <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	2310      	movs	r3, #16
 8001d08:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8001d0a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d12:	431d      	orrs	r5, r3
 8001d14:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8001d16:	e7d8      	b.n	8001cca <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d18:	2310      	movs	r3, #16
 8001d1a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d22:	4303      	orrs	r3, r0
 8001d24:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8001d26:	e7d0      	b.n	8001cca <ADC_Disable+0x12>

08001d28 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d28:	2103      	movs	r1, #3
 8001d2a:	6803      	ldr	r3, [r0, #0]
{
 8001d2c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d2e:	689a      	ldr	r2, [r3, #8]
{
 8001d30:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d32:	400a      	ands	r2, r1
 8001d34:	2a01      	cmp	r2, #1
 8001d36:	d104      	bne.n	8001d42 <ADC_Enable+0x1a>
 8001d38:	6819      	ldr	r1, [r3, #0]
 8001d3a:	4211      	tst	r1, r2
 8001d3c:	d001      	beq.n	8001d42 <ADC_Enable+0x1a>
  return HAL_OK;
 8001d3e:	2000      	movs	r0, #0
}
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d42:	6899      	ldr	r1, [r3, #8]
 8001d44:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <ADC_Enable+0x74>)
 8001d46:	4211      	tst	r1, r2
 8001d48:	d008      	beq.n	8001d5c <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d50:	4313      	orrs	r3, r2
 8001d52:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d56:	4303      	orrs	r3, r0
 8001d58:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8001d5a:	e7f1      	b.n	8001d40 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8001d5c:	2501      	movs	r5, #1
 8001d5e:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001d60:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8001d62:	432a      	orrs	r2, r5
 8001d64:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001d66:	f7ff ff91 	bl	8001c8c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8001d6a:	f7ff ff77 	bl	8001c5c <HAL_GetTick>
 8001d6e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	422b      	tst	r3, r5
 8001d76:	d1e2      	bne.n	8001d3e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d78:	f7ff ff70 	bl	8001c5c <HAL_GetTick>
 8001d7c:	1b80      	subs	r0, r0, r6
 8001d7e:	280a      	cmp	r0, #10
 8001d80:	d9f6      	bls.n	8001d70 <ADC_Enable+0x48>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	422b      	tst	r3, r5
 8001d88:	d1f2      	bne.n	8001d70 <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8001d8e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	4313      	orrs	r3, r2
 8001d92:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d96:	431d      	orrs	r5, r3
 8001d98:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8001d9a:	e7d1      	b.n	8001d40 <ADC_Enable+0x18>
 8001d9c:	80000017 	.word	0x80000017

08001da0 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001da0:	2204      	movs	r2, #4
 8001da2:	6803      	ldr	r3, [r0, #0]
{
 8001da4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001da6:	6899      	ldr	r1, [r3, #8]
{
 8001da8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001daa:	4211      	tst	r1, r2
 8001dac:	d101      	bne.n	8001db2 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8001dae:	2000      	movs	r0, #0
}
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	4211      	tst	r1, r2
 8001db6:	d006      	beq.n	8001dc6 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001db8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001dba:	0792      	lsls	r2, r2, #30
 8001dbc:	d403      	bmi.n	8001dc6 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	6899      	ldr	r1, [r3, #8]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001dc6:	f7ff ff49 	bl	8001c5c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001dca:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8001dcc:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4233      	tst	r3, r6
 8001dd4:	d0eb      	beq.n	8001dae <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001dd6:	f7ff ff41 	bl	8001c5c <HAL_GetTick>
 8001dda:	1b40      	subs	r0, r0, r5
 8001ddc:	280a      	cmp	r0, #10
 8001dde:	d9f6      	bls.n	8001dce <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4233      	tst	r3, r6
 8001de6:	d0f2      	beq.n	8001dce <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dea:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001dee:	4313      	orrs	r3, r2
 8001df0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001df4:	4303      	orrs	r3, r0
 8001df6:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001df8:	e7da      	b.n	8001db0 <ADC_ConversionStop+0x10>
	...

08001dfc <HAL_ADC_Init>:
{
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001e00:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	d01b      	beq.n	8001e3e <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001e0c:	0022      	movs	r2, r4
 8001e0e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8001e12:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001e14:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001e16:	f7fe ff81 	bl	8000d1c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001e1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e1c:	06db      	lsls	r3, r3, #27
 8001e1e:	d406      	bmi.n	8001e2e <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	2204      	movs	r2, #4
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	0008      	movs	r0, r1
 8001e28:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001e2a:	4211      	tst	r1, r2
 8001e2c:	d008      	beq.n	8001e40 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2e:	2310      	movs	r3, #16
 8001e30:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e34:	4313      	orrs	r3, r2
 8001e36:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	3450      	adds	r4, #80	; 0x50
 8001e3c:	7023      	strb	r3, [r4, #0]
}
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8001e40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e42:	4955      	ldr	r1, [pc, #340]	; (8001f98 <HAL_ADC_Init+0x19c>)
 8001e44:	4011      	ands	r1, r2
 8001e46:	2202      	movs	r2, #2
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	4011      	ands	r1, r2
 8001e52:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_ADC_Init+0x1a0>)
 8001e54:	2901      	cmp	r1, #1
 8001e56:	d102      	bne.n	8001e5e <HAL_ADC_Init+0x62>
 8001e58:	681d      	ldr	r5, [r3, #0]
 8001e5a:	420d      	tst	r5, r1
 8001e5c:	d119      	bne.n	8001e92 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001e5e:	2680      	movs	r6, #128	; 0x80
 8001e60:	6861      	ldr	r1, [r4, #4]
 8001e62:	05f6      	lsls	r6, r6, #23
 8001e64:	004d      	lsls	r5, r1, #1
 8001e66:	086d      	lsrs	r5, r5, #1
 8001e68:	42b5      	cmp	r5, r6
 8001e6a:	d003      	beq.n	8001e74 <HAL_ADC_Init+0x78>
 8001e6c:	2580      	movs	r5, #128	; 0x80
 8001e6e:	062d      	lsls	r5, r5, #24
 8001e70:	42a9      	cmp	r1, r5
 8001e72:	d176      	bne.n	8001f62 <HAL_ADC_Init+0x166>
 8001e74:	691d      	ldr	r5, [r3, #16]
 8001e76:	00ad      	lsls	r5, r5, #2
 8001e78:	08ad      	lsrs	r5, r5, #2
 8001e7a:	611d      	str	r5, [r3, #16]
 8001e7c:	691d      	ldr	r5, [r3, #16]
 8001e7e:	4329      	orrs	r1, r5
 8001e80:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001e82:	2518      	movs	r5, #24
 8001e84:	68d9      	ldr	r1, [r3, #12]
 8001e86:	43a9      	bics	r1, r5
 8001e88:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001e8a:	68d9      	ldr	r1, [r3, #12]
 8001e8c:	68a5      	ldr	r5, [r4, #8]
 8001e8e:	4329      	orrs	r1, r5
 8001e90:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001e92:	6811      	ldr	r1, [r2, #0]
 8001e94:	4d42      	ldr	r5, [pc, #264]	; (8001fa0 <HAL_ADC_Init+0x1a4>)
 8001e96:	4029      	ands	r1, r5
 8001e98:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e9c:	6815      	ldr	r5, [r2, #0]
 8001e9e:	0649      	lsls	r1, r1, #25
 8001ea0:	4329      	orrs	r1, r5
 8001ea2:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	0552      	lsls	r2, r2, #21
 8001eaa:	4211      	tst	r1, r2
 8001eac:	d102      	bne.n	8001eb4 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001eae:	6899      	ldr	r1, [r3, #8]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	493b      	ldr	r1, [pc, #236]	; (8001fa4 <HAL_ADC_Init+0x1a8>)
 8001eb8:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001eba:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001ebc:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ebe:	68dd      	ldr	r5, [r3, #12]
 8001ec0:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ec2:	2902      	cmp	r1, #2
 8001ec4:	d100      	bne.n	8001ec8 <HAL_ADC_Init+0xcc>
 8001ec6:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ec8:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001eca:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ecc:	4332      	orrs	r2, r6
 8001ece:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ed0:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ed2:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ed4:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ed6:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001ed8:	69e5      	ldr	r5, [r4, #28]
 8001eda:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001edc:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ede:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ee0:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ee2:	0025      	movs	r5, r4
 8001ee4:	352c      	adds	r5, #44	; 0x2c
 8001ee6:	782d      	ldrb	r5, [r5, #0]
 8001ee8:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001eea:	432a      	orrs	r2, r5
 8001eec:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eee:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ef0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ef4:	30ff      	adds	r0, #255	; 0xff
 8001ef6:	4282      	cmp	r2, r0
 8001ef8:	d004      	beq.n	8001f04 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001efa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001efc:	68d8      	ldr	r0, [r3, #12]
 8001efe:	432a      	orrs	r2, r5
 8001f00:	4302      	orrs	r2, r0
 8001f02:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f04:	1ca2      	adds	r2, r4, #2
 8001f06:	7fd2      	ldrb	r2, [r2, #31]
 8001f08:	2a01      	cmp	r2, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f0c:	2900      	cmp	r1, #0
 8001f0e:	d134      	bne.n	8001f7a <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	68d9      	ldr	r1, [r3, #12]
 8001f14:	0252      	lsls	r2, r2, #9
 8001f16:	430a      	orrs	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8001f1a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001f1c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8001f1e:	2901      	cmp	r1, #1
 8001f20:	d133      	bne.n	8001f8a <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001f22:	4821      	ldr	r0, [pc, #132]	; (8001fa8 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001f24:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001f26:	4002      	ands	r2, r0
 8001f28:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001f2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f2c:	6918      	ldr	r0, [r3, #16]
 8001f2e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8001f30:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001f32:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001f34:	4302      	orrs	r2, r0
 8001f36:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	4311      	orrs	r1, r2
 8001f3c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001f3e:	2107      	movs	r1, #7
 8001f40:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8001f42:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001f44:	438a      	bics	r2, r1
 8001f46:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8001f50:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8001f52:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8001f54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f56:	4393      	bics	r3, r2
 8001f58:	001a      	movs	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8001f60:	e76d      	b.n	8001e3e <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001f62:	691d      	ldr	r5, [r3, #16]
 8001f64:	4e11      	ldr	r6, [pc, #68]	; (8001fac <HAL_ADC_Init+0x1b0>)
 8001f66:	00ad      	lsls	r5, r5, #2
 8001f68:	08ad      	lsrs	r5, r5, #2
 8001f6a:	611d      	str	r5, [r3, #16]
 8001f6c:	6815      	ldr	r5, [r2, #0]
 8001f6e:	4035      	ands	r5, r6
 8001f70:	6015      	str	r5, [r2, #0]
 8001f72:	6815      	ldr	r5, [r2, #0]
 8001f74:	4329      	orrs	r1, r5
 8001f76:	6011      	str	r1, [r2, #0]
 8001f78:	e783      	b.n	8001e82 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7a:	2120      	movs	r1, #32
 8001f7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f7e:	4301      	orrs	r1, r0
 8001f80:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001f84:	430a      	orrs	r2, r1
 8001f86:	65a2      	str	r2, [r4, #88]	; 0x58
 8001f88:	e7c7      	b.n	8001f1a <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	420a      	tst	r2, r1
 8001f8e:	d0d6      	beq.n	8001f3e <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	438a      	bics	r2, r1
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	e7d2      	b.n	8001f3e <HAL_ADC_Init+0x142>
 8001f98:	fffffefd 	.word	0xfffffefd
 8001f9c:	40012708 	.word	0x40012708
 8001fa0:	fdffffff 	.word	0xfdffffff
 8001fa4:	fffe0219 	.word	0xfffe0219
 8001fa8:	fffffc03 	.word	0xfffffc03
 8001fac:	ffc3ffff 	.word	0xffc3ffff

08001fb0 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fb0:	6803      	ldr	r3, [r0, #0]
{
 8001fb2:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fb4:	689b      	ldr	r3, [r3, #8]
{
 8001fb6:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8001fb8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fba:	075b      	lsls	r3, r3, #29
 8001fbc:	d41a      	bmi.n	8001ff4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001fbe:	0025      	movs	r5, r4
 8001fc0:	3550      	adds	r5, #80	; 0x50
 8001fc2:	782b      	ldrb	r3, [r5, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d015      	beq.n	8001ff4 <HAL_ADC_Start+0x44>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001fcc:	69e3      	ldr	r3, [r4, #28]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d111      	bne.n	8001ff6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001fd8:	401a      	ands	r2, r3
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fe0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001fe2:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8001fe6:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001fec:	6899      	ldr	r1, [r3, #8]
 8001fee:	3a18      	subs	r2, #24
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]
}
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	f7ff fe96 	bl	8001d28 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d0e8      	beq.n	8001fd2 <HAL_ADC_Start+0x22>
 8002000:	e7f8      	b.n	8001ff4 <HAL_ADC_Start+0x44>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	fffff0fe 	.word	0xfffff0fe

08002008 <HAL_ADC_Stop>:
{
 8002008:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800200a:	0006      	movs	r6, r0
 800200c:	3650      	adds	r6, #80	; 0x50
 800200e:	7833      	ldrb	r3, [r6, #0]
{
 8002010:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002012:	2002      	movs	r0, #2
 8002014:	2b01      	cmp	r3, #1
 8002016:	d012      	beq.n	800203e <HAL_ADC_Stop+0x36>
 8002018:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800201a:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 800201c:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800201e:	f7ff febf 	bl	8001da0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002022:	2800      	cmp	r0, #0
 8002024:	d109      	bne.n	800203a <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8002026:	0020      	movs	r0, r4
 8002028:	f7ff fe46 	bl	8001cb8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800202c:	2800      	cmp	r0, #0
 800202e:	d104      	bne.n	800203a <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8002030:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002032:	4a03      	ldr	r2, [pc, #12]	; (8002040 <HAL_ADC_Stop+0x38>)
 8002034:	4013      	ands	r3, r2
 8002036:	431d      	orrs	r5, r3
 8002038:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800203a:	2300      	movs	r3, #0
 800203c:	7033      	strb	r3, [r6, #0]
}
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	fffffefe 	.word	0xfffffefe

08002044 <HAL_ADC_PollForConversion>:
{
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002046:	6945      	ldr	r5, [r0, #20]
{
 8002048:	0004      	movs	r4, r0
 800204a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800204c:	2d08      	cmp	r5, #8
 800204e:	d00d      	beq.n	800206c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002050:	6803      	ldr	r3, [r0, #0]
 8002052:	2001      	movs	r0, #1
 8002054:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002056:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002058:	4203      	tst	r3, r0
 800205a:	d007      	beq.n	800206c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205c:	2320      	movs	r3, #32
 800205e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8002060:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002062:	4313      	orrs	r3, r2
 8002064:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8002066:	2300      	movs	r3, #0
 8002068:	7023      	strb	r3, [r4, #0]
}
 800206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800206c:	f7ff fdf6 	bl	8001c5c <HAL_GetTick>
 8002070:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4215      	tst	r5, r2
 8002078:	d024      	beq.n	80020c4 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	430a      	orrs	r2, r1
 8002082:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002084:	22c0      	movs	r2, #192	; 0xc0
 8002086:	68d9      	ldr	r1, [r3, #12]
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	4211      	tst	r1, r2
 800208c:	d113      	bne.n	80020b6 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800208e:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002090:	7fd2      	ldrb	r2, [r2, #31]
 8002092:	2a00      	cmp	r2, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	0712      	lsls	r2, r2, #28
 800209a:	d50c      	bpl.n	80020b6 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	0752      	lsls	r2, r2, #29
 80020a0:	d428      	bmi.n	80020f4 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020a2:	210c      	movs	r1, #12
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	438a      	bics	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80020aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_ADC_PollForConversion+0xc4>)
 80020ae:	4011      	ands	r1, r2
 80020b0:	2201      	movs	r2, #1
 80020b2:	430a      	orrs	r2, r1
 80020b4:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80020b6:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80020b8:	69a2      	ldr	r2, [r4, #24]
 80020ba:	4282      	cmp	r2, r0
 80020bc:	d1d5      	bne.n	800206a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e7d2      	b.n	800206a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80020c4:	1c72      	adds	r2, r6, #1
 80020c6:	d0d5      	beq.n	8002074 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80020c8:	2e00      	cmp	r6, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_ADC_PollForConversion+0xa4>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020cc:	002a      	movs	r2, r5
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	401a      	ands	r2, r3
 80020d4:	421d      	tst	r5, r3
 80020d6:	d1cc      	bne.n	8002072 <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020d8:	2304      	movs	r3, #4
 80020da:	6d61      	ldr	r1, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 80020dc:	3450      	adds	r4, #80	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020de:	430b      	orrs	r3, r1
 80020e0:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80020e2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80020e4:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80020e6:	e7c0      	b.n	800206a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80020e8:	f7ff fdb8 	bl	8001c5c <HAL_GetTick>
 80020ec:	1bc0      	subs	r0, r0, r7
 80020ee:	42b0      	cmp	r0, r6
 80020f0:	d8ec      	bhi.n	80020cc <HAL_ADC_PollForConversion+0x88>
 80020f2:	e7be      	b.n	8002072 <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f4:	2220      	movs	r2, #32
 80020f6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80020f8:	430a      	orrs	r2, r1
 80020fa:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fc:	2201      	movs	r2, #1
 80020fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002100:	430a      	orrs	r2, r1
 8002102:	65a2      	str	r2, [r4, #88]	; 0x58
 8002104:	e7d7      	b.n	80020b6 <HAL_ADC_PollForConversion+0x72>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	fffffefe 	.word	0xfffffefe

0800210c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800210c:	6803      	ldr	r3, [r0, #0]
 800210e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002110:	4770      	bx	lr
	...

08002114 <HAL_ADC_ConfigChannel>:
{
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002116:	0004      	movs	r4, r0
 8002118:	3450      	adds	r4, #80	; 0x50
 800211a:	7822      	ldrb	r2, [r4, #0]
{
 800211c:	0003      	movs	r3, r0
 800211e:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8002120:	2002      	movs	r0, #2
 8002122:	2a01      	cmp	r2, #1
 8002124:	d00b      	beq.n	800213e <HAL_ADC_ConfigChannel+0x2a>
 8002126:	3801      	subs	r0, #1
 8002128:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	6891      	ldr	r1, [r2, #8]
 800212e:	0749      	lsls	r1, r1, #29
 8002130:	d506      	bpl.n	8002140 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002132:	2220      	movs	r2, #32
 8002134:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002136:	430a      	orrs	r2, r1
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800213a:	2300      	movs	r3, #0
 800213c:	7023      	strb	r3, [r4, #0]
}
 800213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002140:	2180      	movs	r1, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002142:	682b      	ldr	r3, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8002144:	4e20      	ldr	r6, [pc, #128]	; (80021c8 <HAL_ADC_ConfigChannel+0xb4>)
 8002146:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002148:	0358      	lsls	r0, r3, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800214a:	02c9      	lsls	r1, r1, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800214c:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800214e:	4019      	ands	r1, r3
  if (sConfig->Rank != ADC_RANK_NONE)
 8002150:	42b7      	cmp	r7, r6
 8002152:	d021      	beq.n	8002198 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002154:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002156:	4318      	orrs	r0, r3
 8002158:	6290      	str	r0, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800215a:	2900      	cmp	r1, #0
 800215c:	d008      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_ADC_ConfigChannel+0xb8>)
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002166:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8002168:	430b      	orrs	r3, r1
 800216a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800216c:	f7ff fd8e 	bl	8001c8c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002170:	682a      	ldr	r2, [r5, #0]
 8002172:	0393      	lsls	r3, r2, #14
 8002174:	d505      	bpl.n	8002182 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	4914      	ldr	r1, [pc, #80]	; (80021cc <HAL_ADC_ConfigChannel+0xb8>)
 800217a:	03db      	lsls	r3, r3, #15
 800217c:	6808      	ldr	r0, [r1, #0]
 800217e:	4303      	orrs	r3, r0
 8002180:	600b      	str	r3, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002182:	03d3      	lsls	r3, r2, #15
 8002184:	d505      	bpl.n	8002192 <HAL_ADC_ConfigChannel+0x7e>
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_ADC_ConfigChannel+0xb8>)
 800218a:	045b      	lsls	r3, r3, #17
 800218c:	6811      	ldr	r1, [r2, #0]
 800218e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002190:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8002192:	2000      	movs	r0, #0
 8002194:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002196:	e7d2      	b.n	800213e <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002198:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800219a:	4385      	bics	r5, r0
 800219c:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800219e:	2900      	cmp	r1, #0
 80021a0:	d004      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x98>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_ADC_ConfigChannel+0xb8>)
 80021a4:	480a      	ldr	r0, [pc, #40]	; (80021d0 <HAL_ADC_ConfigChannel+0xbc>)
 80021a6:	680a      	ldr	r2, [r1, #0]
 80021a8:	4002      	ands	r2, r0
 80021aa:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80021ac:	039a      	lsls	r2, r3, #14
 80021ae:	d504      	bpl.n	80021ba <HAL_ADC_ConfigChannel+0xa6>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80021b0:	4906      	ldr	r1, [pc, #24]	; (80021cc <HAL_ADC_ConfigChannel+0xb8>)
 80021b2:	4808      	ldr	r0, [pc, #32]	; (80021d4 <HAL_ADC_ConfigChannel+0xc0>)
 80021b4:	680a      	ldr	r2, [r1, #0]
 80021b6:	4002      	ands	r2, r0
 80021b8:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80021ba:	03db      	lsls	r3, r3, #15
 80021bc:	d5e9      	bpl.n	8002192 <HAL_ADC_ConfigChannel+0x7e>
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80021be:	4a03      	ldr	r2, [pc, #12]	; (80021cc <HAL_ADC_ConfigChannel+0xb8>)
 80021c0:	4905      	ldr	r1, [pc, #20]	; (80021d8 <HAL_ADC_ConfigChannel+0xc4>)
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	400b      	ands	r3, r1
 80021c6:	e7e3      	b.n	8002190 <HAL_ADC_ConfigChannel+0x7c>
 80021c8:	00001001 	.word	0x00001001
 80021cc:	40012708 	.word	0x40012708
 80021d0:	ff7fffff 	.word	0xff7fffff
 80021d4:	ffbfffff 	.word	0xffbfffff
 80021d8:	feffffff 	.word	0xfeffffff

080021dc <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021de:	0005      	movs	r5, r0
 80021e0:	3550      	adds	r5, #80	; 0x50
 80021e2:	782b      	ldrb	r3, [r5, #0]
{
 80021e4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80021e6:	2002      	movs	r0, #2
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d048      	beq.n	800227e <HAL_ADCEx_Calibration_Start+0xa2>
 80021ec:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021ee:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80021f0:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	6898      	ldr	r0, [r3, #8]
 80021f6:	4010      	ands	r0, r2
 80021f8:	2801      	cmp	r0, #1
 80021fa:	d109      	bne.n	8002210 <HAL_ADCEx_Calibration_Start+0x34>
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4202      	tst	r2, r0
 8002200:	d006      	beq.n	8002210 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002202:	2320      	movs	r3, #32
 8002204:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002206:	4313      	orrs	r3, r2
 8002208:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220a:	2300      	movs	r3, #0
 800220c:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800220e:	e036      	b.n	800227e <HAL_ADCEx_Calibration_Start+0xa2>
    ADC_STATE_CLR_SET(hadc->State, 
 8002210:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002212:	491b      	ldr	r1, [pc, #108]	; (8002280 <HAL_ADCEx_Calibration_Start+0xa4>)
 8002214:	4011      	ands	r1, r2
 8002216:	2202      	movs	r2, #2
 8002218:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800221a:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800221c:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800221e:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	438a      	bics	r2, r1
 8002224:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	0612      	lsls	r2, r2, #24
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002230:	f7ff fd14 	bl	8001c5c <HAL_GetTick>
 8002234:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	2a00      	cmp	r2, #0
 800223c:	db0c      	blt.n	8002258 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800223e:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002240:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002242:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002244:	430e      	orrs	r6, r1
 8002246:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002248:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224a:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800224c:	4393      	bics	r3, r2
 800224e:	001a      	movs	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	4313      	orrs	r3, r2
 8002254:	6563      	str	r3, [r4, #84]	; 0x54
 8002256:	e7d8      	b.n	800220a <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002258:	f7ff fd00 	bl	8001c5c <HAL_GetTick>
 800225c:	1bc0      	subs	r0, r0, r7
 800225e:	280a      	cmp	r0, #10
 8002260:	d9e9      	bls.n	8002236 <HAL_ADCEx_Calibration_Start+0x5a>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	dae5      	bge.n	8002236 <HAL_ADCEx_Calibration_Start+0x5a>
          ADC_STATE_CLR_SET(hadc->State,
 800226a:	2212      	movs	r2, #18
 800226c:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800226e:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8002270:	4393      	bics	r3, r2
 8002272:	001a      	movs	r2, r3
 8002274:	2310      	movs	r3, #16
 8002276:	4313      	orrs	r3, r2
 8002278:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 800227a:	2300      	movs	r3, #0
 800227c:	702b      	strb	r3, [r5, #0]
}
 800227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002280:	fffffefd 	.word	0xfffffefd

08002284 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002284:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002286:	25ff      	movs	r5, #255	; 0xff
 8002288:	2403      	movs	r4, #3
 800228a:	002a      	movs	r2, r5
 800228c:	4004      	ands	r4, r0
 800228e:	00e4      	lsls	r4, r4, #3
 8002290:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002292:	0189      	lsls	r1, r1, #6
 8002294:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002296:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002298:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800229a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800229c:	2800      	cmp	r0, #0
 800229e:	db0a      	blt.n	80022b6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a0:	24c0      	movs	r4, #192	; 0xc0
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_NVIC_SetPriority+0x4c>)
 80022a4:	0880      	lsrs	r0, r0, #2
 80022a6:	0080      	lsls	r0, r0, #2
 80022a8:	18c0      	adds	r0, r0, r3
 80022aa:	00a4      	lsls	r4, r4, #2
 80022ac:	5903      	ldr	r3, [r0, r4]
 80022ae:	401a      	ands	r2, r3
 80022b0:	4311      	orrs	r1, r2
 80022b2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80022b4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b6:	200f      	movs	r0, #15
 80022b8:	4003      	ands	r3, r0
 80022ba:	3b08      	subs	r3, #8
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_NVIC_SetPriority+0x50>)
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	181b      	adds	r3, r3, r0
 80022c4:	69d8      	ldr	r0, [r3, #28]
 80022c6:	4002      	ands	r2, r0
 80022c8:	4311      	orrs	r1, r2
 80022ca:	61d9      	str	r1, [r3, #28]
 80022cc:	e7f2      	b.n	80022b4 <HAL_NVIC_SetPriority+0x30>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80022d8:	2800      	cmp	r0, #0
 80022da:	db05      	blt.n	80022e8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022dc:	231f      	movs	r3, #31
 80022de:	4018      	ands	r0, r3
 80022e0:	3b1e      	subs	r3, #30
 80022e2:	4083      	lsls	r3, r0
 80022e4:	4a01      	ldr	r2, [pc, #4]	; (80022ec <HAL_NVIC_EnableIRQ+0x14>)
 80022e6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022e8:	4770      	bx	lr
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	1e43      	subs	r3, r0, #1
 80022f4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d20d      	bcs.n	8002318 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022fc:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002300:	4807      	ldr	r0, [pc, #28]	; (8002320 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002302:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002304:	6a03      	ldr	r3, [r0, #32]
 8002306:	0609      	lsls	r1, r1, #24
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	430b      	orrs	r3, r1
 800230e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002310:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002314:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002316:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002318:	4770      	bx	lr
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	e000e010 	.word	0xe000e010
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002324:	b510      	push	{r4, lr}
 8002326:	0004      	movs	r4, r0
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 8002328:	2001      	movs	r0, #1
  if(hdac == NULL)
 800232a:	2c00      	cmp	r4, #0
 800232c:	d00d      	beq.n	800234a <HAL_DAC_Init+0x26>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800232e:	7923      	ldrb	r3, [r4, #4]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_DAC_Init+0x1a>
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002336:	0020      	movs	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8002338:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 800233a:	f7fe fd4b 	bl	8000dd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800233e:	2302      	movs	r3, #2

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002340:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002342:	7123      	strb	r3, [r4, #4]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002344:	3b01      	subs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002346:	60e0      	str	r0, [r4, #12]
  hdac->State = HAL_DAC_STATE_READY;
 8002348:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 800234a:	bd10      	pop	{r4, pc}

0800234c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800234c:	b530      	push	{r4, r5, lr}
 800234e:	000c      	movs	r4, r1
 8002350:	2102      	movs	r1, #2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002352:	7945      	ldrb	r5, [r0, #5]
{
 8002354:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8002356:	0008      	movs	r0, r1
 8002358:	2d01      	cmp	r5, #1
 800235a:	d014      	beq.n	8002386 <HAL_DAC_ConfigChannel+0x3a>
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800235c:	4d0a      	ldr	r5, [pc, #40]	; (8002388 <HAL_DAC_ConfigChannel+0x3c>)
  tmpreg1 = hdac->Instance->CR;
 800235e:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002360:	4095      	lsls	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8002362:	7119      	strb	r1, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8002364:	6801      	ldr	r1, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002366:	43a9      	bics	r1, r5
 8002368:	000d      	movs	r5, r1
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800236a:	cc12      	ldmia	r4, {r1, r4}
 800236c:	4321      	orrs	r1, r4
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 800236e:	24c0      	movs	r4, #192	; 0xc0
  tmpreg1 |= tmpreg2 << Channel;
 8002370:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8002372:	4094      	lsls	r4, r2
  tmpreg1 |= tmpreg2 << Channel;
 8002374:	4329      	orrs	r1, r5
  hdac->Instance->CR = tmpreg1;
 8002376:	6001      	str	r1, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8002378:	6801      	ldr	r1, [r0, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800237a:	2201      	movs	r2, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 800237c:	43a1      	bics	r1, r4
 800237e:	6001      	str	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002380:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002382:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002384:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8002386:	bd30      	pop	{r4, r5, pc}
 8002388:	00000ffe 	.word	0x00000ffe

0800238c <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800238c:	2202      	movs	r2, #2
{
 800238e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8002390:	7944      	ldrb	r4, [r0, #5]
{
 8002392:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8002394:	0010      	movs	r0, r2
 8002396:	2c01      	cmp	r4, #1
 8002398:	d017      	beq.n	80023ca <HAL_DAC_Start+0x3e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 800239a:	3801      	subs	r0, #1
 800239c:	0005      	movs	r5, r0
 800239e:	408d      	lsls	r5, r1
 80023a0:	0029      	movs	r1, r5
  hdac->State = HAL_DAC_STATE_BUSY;
 80023a2:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	6814      	ldr	r4, [r2, #0]
 80023a8:	4321      	orrs	r1, r4
 80023aa:	6011      	str	r1, [r2, #0]

  tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80023ac:	6814      	ldr	r4, [r2, #0]
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80023ae:	6811      	ldr	r1, [r2, #0]
  /* Check if software trigger enabled */
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80023b0:	0764      	lsls	r4, r4, #29
 80023b2:	d506      	bpl.n	80023c2 <HAL_DAC_Start+0x36>
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80023b4:	2438      	movs	r4, #56	; 0x38
 80023b6:	4021      	ands	r1, r4
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80023b8:	42a1      	cmp	r1, r4
 80023ba:	d102      	bne.n	80023c2 <HAL_DAC_Start+0x36>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80023bc:	6851      	ldr	r1, [r2, #4]
 80023be:	4308      	orrs	r0, r1
 80023c0:	6050      	str	r0, [r2, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023c2:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023c4:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80023c6:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 80023c8:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 80023ca:	bd30      	pop	{r4, r5, pc}

080023cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80023cc:	0001      	movs	r1, r0
  __IO uint32_t tmp = 0U;
 80023ce:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance; 
 80023d0:	6809      	ldr	r1, [r1, #0]
{
 80023d2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0U;
 80023d4:	9001      	str	r0, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 80023d6:	9101      	str	r1, [sp, #4]
  tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023d8:	9901      	ldr	r1, [sp, #4]
 80023da:	3108      	adds	r1, #8
 80023dc:	1889      	adds	r1, r1, r2
 80023de:	9101      	str	r1, [sp, #4]

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023e0:	9a01      	ldr	r2, [sp, #4]
 80023e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 80023e4:	b002      	add	sp, #8
 80023e6:	4770      	bx	lr

080023e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023e8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023ea:	1d84      	adds	r4, r0, #6
 80023ec:	7fe3      	ldrb	r3, [r4, #31]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d004      	beq.n	80023fc <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f2:	2304      	movs	r3, #4
 80023f4:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80023f6:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023fc:	210e      	movs	r1, #14
 80023fe:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002400:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	438a      	bics	r2, r1
 8002406:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002408:	2201      	movs	r2, #1
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	4391      	bics	r1, r2
 800240e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002410:	231c      	movs	r3, #28
 8002412:	402b      	ands	r3, r5
 8002414:	0015      	movs	r5, r2
 8002416:	409d      	lsls	r5, r3
 8002418:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800241a:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800241c:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800241e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002420:	2400      	movs	r4, #0
 8002422:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8002424:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002428:	42a2      	cmp	r2, r4
 800242a:	d0e5      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800242c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	0023      	movs	r3, r4
 8002430:	e7e2      	b.n	80023f8 <HAL_DMA_Abort_IT+0x10>

08002432 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8002432:	3006      	adds	r0, #6
 8002434:	7fc0      	ldrb	r0, [r0, #31]
 8002436:	b2c0      	uxtb	r0, r0
}
 8002438:	4770      	bx	lr
	...

0800243c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <FLASH_SetErrorCode+0xa4>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	6990      	ldr	r0, [r2, #24]
 8002442:	0049      	lsls	r1, r1, #1
 8002444:	0003      	movs	r3, r0
{
 8002446:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002448:	400b      	ands	r3, r1
 800244a:	4208      	tst	r0, r1
 800244c:	d005      	beq.n	800245a <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800244e:	2302      	movs	r3, #2
 8002450:	4824      	ldr	r0, [pc, #144]	; (80024e4 <FLASH_SetErrorCode+0xa8>)
 8002452:	6944      	ldr	r4, [r0, #20]
 8002454:	4323      	orrs	r3, r4
 8002456:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002458:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800245a:	2080      	movs	r0, #128	; 0x80
 800245c:	6991      	ldr	r1, [r2, #24]
 800245e:	0080      	lsls	r0, r0, #2
 8002460:	4201      	tst	r1, r0
 8002462:	d005      	beq.n	8002470 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002464:	2101      	movs	r1, #1
 8002466:	4c1f      	ldr	r4, [pc, #124]	; (80024e4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8002468:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800246a:	6965      	ldr	r5, [r4, #20]
 800246c:	4329      	orrs	r1, r5
 800246e:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002470:	2080      	movs	r0, #128	; 0x80
 8002472:	6991      	ldr	r1, [r2, #24]
 8002474:	00c0      	lsls	r0, r0, #3
 8002476:	4201      	tst	r1, r0
 8002478:	d005      	beq.n	8002486 <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800247a:	2108      	movs	r1, #8
 800247c:	4c19      	ldr	r4, [pc, #100]	; (80024e4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 800247e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002480:	6965      	ldr	r5, [r4, #20]
 8002482:	4329      	orrs	r1, r5
 8002484:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002486:	2080      	movs	r0, #128	; 0x80
 8002488:	6991      	ldr	r1, [r2, #24]
 800248a:	0100      	lsls	r0, r0, #4
 800248c:	4201      	tst	r1, r0
 800248e:	d005      	beq.n	800249c <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002490:	2104      	movs	r1, #4
 8002492:	4c14      	ldr	r4, [pc, #80]	; (80024e4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8002494:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002496:	6965      	ldr	r5, [r4, #20]
 8002498:	4329      	orrs	r1, r5
 800249a:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800249c:	2080      	movs	r0, #128	; 0x80
 800249e:	6991      	ldr	r1, [r2, #24]
 80024a0:	0180      	lsls	r0, r0, #6
 80024a2:	4201      	tst	r1, r0
 80024a4:	d005      	beq.n	80024b2 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80024a6:	2110      	movs	r1, #16
 80024a8:	4c0e      	ldr	r4, [pc, #56]	; (80024e4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 80024aa:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80024ac:	6965      	ldr	r5, [r4, #20]
 80024ae:	4329      	orrs	r1, r5
 80024b0:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80024b2:	6991      	ldr	r1, [r2, #24]
 80024b4:	0389      	lsls	r1, r1, #14
 80024b6:	d505      	bpl.n	80024c4 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80024b8:	2020      	movs	r0, #32
 80024ba:	4c0a      	ldr	r4, [pc, #40]	; (80024e4 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80024bc:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80024be:	6961      	ldr	r1, [r4, #20]
 80024c0:	4301      	orrs	r1, r0
 80024c2:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80024c4:	2080      	movs	r0, #128	; 0x80
 80024c6:	6991      	ldr	r1, [r2, #24]
 80024c8:	0240      	lsls	r0, r0, #9
 80024ca:	4201      	tst	r1, r0
 80024cc:	d005      	beq.n	80024da <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	4c04      	ldr	r4, [pc, #16]	; (80024e4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80024d2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80024d4:	6965      	ldr	r5, [r4, #20]
 80024d6:	4329      	orrs	r1, r5
 80024d8:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80024da:	6193      	str	r3, [r2, #24]
}  
 80024dc:	bd30      	pop	{r4, r5, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	40022000 	.word	0x40022000
 80024e4:	20001194 	.word	0x20001194

080024e8 <FLASH_WaitForLastOperation>:
{
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fbb6 	bl	8001c5c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80024f0:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80024f2:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <FLASH_WaitForLastOperation+0x70>)
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	4232      	tst	r2, r6
 80024fa:	d121      	bne.n	8002540 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80024fc:	2202      	movs	r2, #2
 80024fe:	6999      	ldr	r1, [r3, #24]
 8002500:	4211      	tst	r1, r2
 8002502:	d000      	beq.n	8002506 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002504:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	05d2      	lsls	r2, r2, #23
 800250a:	d415      	bmi.n	8002538 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800250c:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800250e:	0592      	lsls	r2, r2, #22
 8002510:	d412      	bmi.n	8002538 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002512:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002514:	0552      	lsls	r2, r2, #21
 8002516:	d40f      	bmi.n	8002538 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002518:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800251a:	0512      	lsls	r2, r2, #20
 800251c:	d40c      	bmi.n	8002538 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800251e:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002520:	0492      	lsls	r2, r2, #18
 8002522:	d409      	bmi.n	8002538 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002524:	6999      	ldr	r1, [r3, #24]
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	0008      	movs	r0, r1
 800252a:	0292      	lsls	r2, r2, #10
 800252c:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800252e:	4211      	tst	r1, r2
 8002530:	d102      	bne.n	8002538 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8002532:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002534:	03db      	lsls	r3, r3, #15
 8002536:	d508      	bpl.n	800254a <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8002538:	f7ff ff80 	bl	800243c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	e004      	b.n	800254a <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8002540:	1c62      	adds	r2, r4, #1
 8002542:	d0d8      	beq.n	80024f6 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002544:	2c00      	cmp	r4, #0
 8002546:	d101      	bne.n	800254c <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 8002548:	2003      	movs	r0, #3
}
 800254a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800254c:	f7ff fb86 	bl	8001c5c <HAL_GetTick>
 8002550:	1b40      	subs	r0, r0, r5
 8002552:	42a0      	cmp	r0, r4
 8002554:	d9ce      	bls.n	80024f4 <FLASH_WaitForLastOperation+0xc>
 8002556:	e7f7      	b.n	8002548 <FLASH_WaitForLastOperation+0x60>
 8002558:	40022000 	.word	0x40022000

0800255c <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800255c:	2201      	movs	r2, #1
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8002560:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	4211      	tst	r1, r2
 8002566:	d00a      	beq.n	800257e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002568:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8002570:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8002574:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002576:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800257a:	6858      	ldr	r0, [r3, #4]
 800257c:	4010      	ands	r0, r2
}
 800257e:	4770      	bx	lr
 8002580:	40022000 	.word	0x40022000
 8002584:	89abcdef 	.word	0x89abcdef
 8002588:	02030405 	.word	0x02030405

0800258c <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800258c:	2301      	movs	r3, #1
 800258e:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8002590:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8002592:	6851      	ldr	r1, [r2, #4]
 8002594:	430b      	orrs	r3, r1
 8002596:	6053      	str	r3, [r2, #4]
}
 8002598:	4770      	bx	lr
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	40022000 	.word	0x40022000

080025a0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025a2:	4f12      	ldr	r7, [pc, #72]	; (80025ec <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 80025a4:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80025a6:	7c3b      	ldrb	r3, [r7, #16]
{
 80025a8:	000d      	movs	r5, r1
 80025aa:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 80025ac:	2002      	movs	r0, #2
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d00c      	beq.n	80025cc <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 80025b2:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025b4:	480e      	ldr	r0, [pc, #56]	; (80025f0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 80025b6:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025b8:	f7ff ff96 	bl	80024e8 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80025bc:	2800      	cmp	r0, #0
 80025be:	d103      	bne.n	80025c8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025c0:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80025c2:	2e02      	cmp	r6, #2
 80025c4:	d103      	bne.n	80025ce <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80025c6:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025c8:	2300      	movs	r3, #0
 80025ca:	743b      	strb	r3, [r7, #16]

  return status;
}
 80025cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80025ce:	2e01      	cmp	r6, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80025d2:	b2a4      	uxth	r4, r4
 80025d4:	802c      	strh	r4, [r5, #0]
 80025d6:	e7f7      	b.n	80025c8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80025d8:	2e00      	cmp	r6, #0
 80025da:	d003      	beq.n	80025e4 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 80025de:	f7ff ff83 	bl	80024e8 <FLASH_WaitForLastOperation>
 80025e2:	e7f1      	b.n	80025c8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80025e4:	b2e4      	uxtb	r4, r4
 80025e6:	702c      	strb	r4, [r5, #0]
 80025e8:	e7ee      	b.n	80025c8 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20001194 	.word	0x20001194
 80025f0:	0000c350 	.word	0x0000c350

080025f4 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_GPIO_Init+0x164>)
{
 80025f6:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80025f8:	1882      	adds	r2, r0, r2
 80025fa:	1e54      	subs	r4, r2, #1
 80025fc:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80025fe:	2300      	movs	r3, #0
{
 8002600:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002602:	3205      	adds	r2, #5
{
 8002604:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002606:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002608:	9a03      	ldr	r2, [sp, #12]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	0014      	movs	r4, r2
 800260e:	40dc      	lsrs	r4, r3
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8002612:	b007      	add	sp, #28
 8002614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002616:	2101      	movs	r1, #1
 8002618:	000d      	movs	r5, r1
 800261a:	0014      	movs	r4, r2
 800261c:	409d      	lsls	r5, r3
 800261e:	402c      	ands	r4, r5
 8002620:	468c      	mov	ip, r1
 8002622:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8002624:	422a      	tst	r2, r5
 8002626:	d100      	bne.n	800262a <HAL_GPIO_Init+0x36>
 8002628:	e094      	b.n	8002754 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800262a:	2403      	movs	r4, #3
 800262c:	9a03      	ldr	r2, [sp, #12]
 800262e:	005e      	lsls	r6, r3, #1
 8002630:	6852      	ldr	r2, [r2, #4]
 8002632:	9201      	str	r2, [sp, #4]
 8002634:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002636:	40b4      	lsls	r4, r6
 8002638:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800263a:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800263c:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800263e:	4564      	cmp	r4, ip
 8002640:	d82a      	bhi.n	8002698 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8002642:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002644:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002646:	9903      	ldr	r1, [sp, #12]
 8002648:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264a:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264c:	40b4      	lsls	r4, r6
 800264e:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8002650:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002652:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002654:	43ac      	bics	r4, r5
 8002656:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002658:	090c      	lsrs	r4, r1, #4
 800265a:	4661      	mov	r1, ip
 800265c:	400c      	ands	r4, r1
 800265e:	409c      	lsls	r4, r3
 8002660:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002662:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002664:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002666:	9904      	ldr	r1, [sp, #16]
 8002668:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266a:	9903      	ldr	r1, [sp, #12]
 800266c:	688c      	ldr	r4, [r1, #8]
 800266e:	40b4      	lsls	r4, r6
 8002670:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002672:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002674:	2a02      	cmp	r2, #2
 8002676:	d111      	bne.n	800269c <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002678:	2507      	movs	r5, #7
 800267a:	210f      	movs	r1, #15
 800267c:	401d      	ands	r5, r3
 800267e:	00ad      	lsls	r5, r5, #2
 8002680:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8002682:	08dc      	lsrs	r4, r3, #3
 8002684:	00a4      	lsls	r4, r4, #2
 8002686:	1904      	adds	r4, r0, r4
 8002688:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800268a:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800268c:	9903      	ldr	r1, [sp, #12]
 800268e:	6909      	ldr	r1, [r1, #16]
 8002690:	40a9      	lsls	r1, r5
 8002692:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8002694:	6227      	str	r7, [r4, #32]
 8002696:	e001      	b.n	800269c <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	2a03      	cmp	r2, #3
 800269a:	d1e3      	bne.n	8002664 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 800269e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a0:	9904      	ldr	r1, [sp, #16]
 80026a2:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a4:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80026a6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a8:	22c0      	movs	r2, #192	; 0xc0
 80026aa:	9901      	ldr	r1, [sp, #4]
 80026ac:	0292      	lsls	r2, r2, #10
 80026ae:	4211      	tst	r1, r2
 80026b0:	d050      	beq.n	8002754 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2701      	movs	r7, #1
 80026b4:	4c29      	ldr	r4, [pc, #164]	; (800275c <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026b6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026ba:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026bc:	433a      	orrs	r2, r7
 80026be:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_GPIO_Init+0x16c>)
 80026c2:	089c      	lsrs	r4, r3, #2
 80026c4:	00a4      	lsls	r4, r4, #2
 80026c6:	18a4      	adds	r4, r4, r2
 80026c8:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026ca:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80026cc:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026ce:	220f      	movs	r2, #15
 80026d0:	00ad      	lsls	r5, r5, #2
 80026d2:	40aa      	lsls	r2, r5
 80026d4:	4661      	mov	r1, ip
 80026d6:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80026d8:	22a0      	movs	r2, #160	; 0xa0
 80026da:	05d2      	lsls	r2, r2, #23
 80026dc:	4694      	mov	ip, r2
 80026de:	2200      	movs	r2, #0
 80026e0:	4560      	cmp	r0, ip
 80026e2:	d00d      	beq.n	8002700 <HAL_GPIO_Init+0x10c>
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <HAL_GPIO_Init+0x170>)
 80026e6:	4694      	mov	ip, r2
 80026e8:	003a      	movs	r2, r7
 80026ea:	4560      	cmp	r0, ip
 80026ec:	d008      	beq.n	8002700 <HAL_GPIO_Init+0x10c>
 80026ee:	4f1e      	ldr	r7, [pc, #120]	; (8002768 <HAL_GPIO_Init+0x174>)
 80026f0:	1892      	adds	r2, r2, r2
 80026f2:	42b8      	cmp	r0, r7
 80026f4:	d004      	beq.n	8002700 <HAL_GPIO_Init+0x10c>
 80026f6:	4f1d      	ldr	r7, [pc, #116]	; (800276c <HAL_GPIO_Init+0x178>)
 80026f8:	0032      	movs	r2, r6
 80026fa:	42b8      	cmp	r0, r7
 80026fc:	d000      	beq.n	8002700 <HAL_GPIO_Init+0x10c>
 80026fe:	9a05      	ldr	r2, [sp, #20]
 8002700:	40aa      	lsls	r2, r5
 8002702:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8002704:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002706:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8002708:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 800270a:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 800270c:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 800270e:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002710:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8002712:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002714:	03c9      	lsls	r1, r1, #15
 8002716:	d401      	bmi.n	800271c <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8002718:	0035      	movs	r5, r6
 800271a:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 800271c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800271e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002720:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002722:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8002724:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002726:	0389      	lsls	r1, r1, #14
 8002728:	d401      	bmi.n	800272e <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800272a:	0035      	movs	r5, r6
 800272c:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800272e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002730:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002732:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002734:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8002736:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002738:	02c9      	lsls	r1, r1, #11
 800273a:	d401      	bmi.n	8002740 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 800273c:	0035      	movs	r5, r6
 800273e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002740:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002742:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8002744:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002746:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8002748:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274a:	0289      	lsls	r1, r1, #10
 800274c:	d401      	bmi.n	8002752 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 800274e:	4025      	ands	r5, r4
 8002750:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002752:	60d6      	str	r6, [r2, #12]
    position++;
 8002754:	3301      	adds	r3, #1
 8002756:	e757      	b.n	8002608 <HAL_GPIO_Init+0x14>
 8002758:	afffe400 	.word	0xafffe400
 800275c:	40021000 	.word	0x40021000
 8002760:	40010000 	.word	0x40010000
 8002764:	50000400 	.word	0x50000400
 8002768:	50000800 	.word	0x50000800
 800276c:	50000c00 	.word	0x50000c00
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002774:	2a00      	cmp	r2, #0
 8002776:	d001      	beq.n	800277c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002778:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800277a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800277c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800277e:	e7fc      	b.n	800277a <HAL_GPIO_WritePin+0x6>

08002780 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002780:	6803      	ldr	r3, [r0, #0]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	0792      	lsls	r2, r2, #30
 8002786:	d501      	bpl.n	800278c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002788:	2200      	movs	r2, #0
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278c:	2201      	movs	r2, #1
 800278e:	6999      	ldr	r1, [r3, #24]
 8002790:	4211      	tst	r1, r2
 8002792:	d102      	bne.n	800279a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	430a      	orrs	r2, r1
 8002798:	619a      	str	r2, [r3, #24]
  }
}
 800279a:	4770      	bx	lr

0800279c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800279c:	b530      	push	{r4, r5, lr}
 800279e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80027a0:	0412      	lsls	r2, r2, #16
 80027a2:	6800      	ldr	r0, [r0, #0]
 80027a4:	4322      	orrs	r2, r4
 80027a6:	431a      	orrs	r2, r3
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <I2C_TransferConfig+0x24>)
 80027aa:	6845      	ldr	r5, [r0, #4]
 80027ac:	0589      	lsls	r1, r1, #22
 80027ae:	0d64      	lsrs	r4, r4, #21
 80027b0:	0d89      	lsrs	r1, r1, #22
 80027b2:	431c      	orrs	r4, r3
 80027b4:	43a5      	bics	r5, r4
 80027b6:	430a      	orrs	r2, r1
 80027b8:	432a      	orrs	r2, r5
 80027ba:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80027bc:	bd30      	pop	{r4, r5, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	03ff63ff 	.word	0x03ff63ff

080027c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80027c4:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80027c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027c8:	4c14      	ldr	r4, [pc, #80]	; (800281c <I2C_Enable_IRQ+0x58>)
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027ca:	b20a      	sxth	r2, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80027cc:	42a3      	cmp	r3, r4
 80027ce:	d002      	beq.n	80027d6 <I2C_Enable_IRQ+0x12>
 80027d0:	4c13      	ldr	r4, [pc, #76]	; (8002820 <I2C_Enable_IRQ+0x5c>)
 80027d2:	42a3      	cmp	r3, r4
 80027d4:	d10e      	bne.n	80027f4 <I2C_Enable_IRQ+0x30>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	db0a      	blt.n	80027f0 <I2C_Enable_IRQ+0x2c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027da:	2390      	movs	r3, #144	; 0x90
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027dc:	2910      	cmp	r1, #16
 80027de:	d017      	beq.n	8002810 <I2C_Enable_IRQ+0x4c>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80027e0:	3b30      	subs	r3, #48	; 0x30
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027e2:	2920      	cmp	r1, #32
 80027e4:	d014      	beq.n	8002810 <I2C_Enable_IRQ+0x4c>
  uint32_t tmpisr = 0U;
 80027e6:	2300      	movs	r3, #0
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027e8:	2940      	cmp	r1, #64	; 0x40
 80027ea:	d111      	bne.n	8002810 <I2C_Enable_IRQ+0x4c>
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80027ec:	430b      	orrs	r3, r1
 80027ee:	e00f      	b.n	8002810 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027f0:	23b8      	movs	r3, #184	; 0xb8
 80027f2:	e7f9      	b.n	80027e8 <I2C_Enable_IRQ+0x24>
  uint32_t tmpisr = 0U;
 80027f4:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027f6:	429a      	cmp	r2, r3
 80027f8:	da00      	bge.n	80027fc <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027fa:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027fc:	07ca      	lsls	r2, r1, #31
 80027fe:	d501      	bpl.n	8002804 <I2C_Enable_IRQ+0x40>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002800:	22f2      	movs	r2, #242	; 0xf2
 8002802:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002804:	078a      	lsls	r2, r1, #30
 8002806:	d501      	bpl.n	800280c <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002808:	22f4      	movs	r2, #244	; 0xf4
 800280a:	4313      	orrs	r3, r2
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800280c:	2920      	cmp	r1, #32
 800280e:	d0ed      	beq.n	80027ec <I2C_Enable_IRQ+0x28>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002810:	6801      	ldr	r1, [r0, #0]
 8002812:	680a      	ldr	r2, [r1, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
}
 8002818:	bd10      	pop	{r4, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	08002ce9 	.word	0x08002ce9
 8002820:	08002ea5 	.word	0x08002ea5

08002824 <I2C_Disable_IRQ>:
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;
 8002824:	2300      	movs	r3, #0
{
 8002826:	b510      	push	{r4, lr}

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002828:	07ca      	lsls	r2, r1, #31
 800282a:	d508      	bpl.n	800283e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800282c:	0003      	movs	r3, r0
 800282e:	3341      	adds	r3, #65	; 0x41
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	2328      	movs	r3, #40	; 0x28
 8002834:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002836:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002838:	2a28      	cmp	r2, #40	; 0x28
 800283a:	d000      	beq.n	800283e <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800283c:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800283e:	078a      	lsls	r2, r1, #30
 8002840:	d508      	bpl.n	8002854 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002842:	0002      	movs	r2, r0
 8002844:	2428      	movs	r4, #40	; 0x28
 8002846:	3241      	adds	r2, #65	; 0x41
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	4022      	ands	r2, r4
 800284c:	42a2      	cmp	r2, r4
 800284e:	d10b      	bne.n	8002868 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002850:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002852:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002854:	b209      	sxth	r1, r1
 8002856:	2900      	cmp	r1, #0
 8002858:	da01      	bge.n	800285e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800285a:	22b8      	movs	r2, #184	; 0xb8
 800285c:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800285e:	6801      	ldr	r1, [r0, #0]
 8002860:	680a      	ldr	r2, [r1, #0]
 8002862:	439a      	bics	r2, r3
 8002864:	600a      	str	r2, [r1, #0]
}
 8002866:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002868:	22f4      	movs	r2, #244	; 0xf4
 800286a:	e7f2      	b.n	8002852 <I2C_Disable_IRQ+0x2e>

0800286c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <I2C_ITListenCplt+0x64>)
{
 800286e:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002870:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002872:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002874:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8002876:	6303      	str	r3, [r0, #48]	; 0x30
{
 8002878:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800287a:	2020      	movs	r0, #32
 800287c:	3241      	adds	r2, #65	; 0x41
 800287e:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 8002882:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002884:	074b      	lsls	r3, r1, #29
 8002886:	d513      	bpl.n	80028b0 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002892:	3301      	adds	r3, #1
 8002894:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002896:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800289c:	3b01      	subs	r3, #1
 800289e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80028a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028a8:	2304      	movs	r3, #4
 80028aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80028ac:	4313      	orrs	r3, r2
 80028ae:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028b0:	0020      	movs	r0, r4
 80028b2:	4908      	ldr	r1, [pc, #32]	; (80028d4 <I2C_ITListenCplt+0x68>)
 80028b4:	f7ff ffb6 	bl	8002824 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	2210      	movs	r2, #16
 80028ba:	6823      	ldr	r3, [r4, #0]
  hi2c->ListenCpltCallback(hi2c);
 80028bc:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028be:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80028c0:	0023      	movs	r3, r4
 80028c2:	2200      	movs	r2, #0
 80028c4:	3340      	adds	r3, #64	; 0x40
 80028c6:	701a      	strb	r2, [r3, #0]
  hi2c->ListenCpltCallback(hi2c);
 80028c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028ca:	4798      	blx	r3
}
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	ffff0000 	.word	0xffff0000
 80028d4:	00008003 	.word	0x00008003

080028d8 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d8:	0001      	movs	r1, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80028da:	6803      	ldr	r3, [r0, #0]
{
 80028dc:	b510      	push	{r4, lr}
 80028de:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80028e2:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	3142      	adds	r1, #66	; 0x42
 80028e6:	7008      	strb	r0, [r1, #0]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80028e8:	2101      	movs	r1, #1
 80028ea:	0450      	lsls	r0, r2, #17
 80028ec:	d518      	bpl.n	8002920 <I2C_ITSlaveSeqCplt+0x48>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4917      	ldr	r1, [pc, #92]	; (8002950 <I2C_ITSlaveSeqCplt+0x78>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028f2:	400a      	ands	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028f6:	0023      	movs	r3, r4
 80028f8:	3341      	adds	r3, #65	; 0x41
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	2a29      	cmp	r2, #41	; 0x29
 80028fe:	d115      	bne.n	800292c <I2C_ITSlaveSeqCplt+0x54>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002900:	3a01      	subs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002904:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002906:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002908:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800290a:	0020      	movs	r0, r4
 800290c:	f7ff ff8a 	bl	8002824 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002910:	0023      	movs	r3, r4
 8002912:	2200      	movs	r2, #0
 8002914:	3340      	adds	r3, #64	; 0x40
 8002916:	701a      	strb	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8002918:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hi2c->SlaveRxCpltCallback(hi2c);
 800291a:	0020      	movs	r0, r4
 800291c:	4798      	blx	r3
}
 800291e:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002920:	0bd2      	lsrs	r2, r2, #15
 8002922:	420a      	tst	r2, r1
 8002924:	d0e7      	beq.n	80028f6 <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	490a      	ldr	r1, [pc, #40]	; (8002954 <I2C_ITSlaveSeqCplt+0x7c>)
 800292a:	e7e2      	b.n	80028f2 <I2C_ITSlaveSeqCplt+0x1a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	2a2a      	cmp	r2, #42	; 0x2a
 8002930:	d1f5      	bne.n	800291e <I2C_ITSlaveSeqCplt+0x46>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002932:	3a02      	subs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002936:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002938:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800293a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800293c:	0020      	movs	r0, r4
 800293e:	f7ff ff71 	bl	8002824 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002942:	0023      	movs	r3, r4
 8002944:	2200      	movs	r2, #0
 8002946:	3340      	adds	r3, #64	; 0x40
 8002948:	701a      	strb	r2, [r3, #0]
    hi2c->SlaveRxCpltCallback(hi2c);
 800294a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800294c:	e7e5      	b.n	800291a <I2C_ITSlaveSeqCplt+0x42>
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	ffffbfff 	.word	0xffffbfff
 8002954:	ffff7fff 	.word	0xffff7fff

08002958 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002958:	0001      	movs	r1, r0
 800295a:	0002      	movs	r2, r0
{
 800295c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800295e:	3141      	adds	r1, #65	; 0x41
 8002960:	780c      	ldrb	r4, [r1, #0]
 8002962:	2300      	movs	r3, #0
 8002964:	3240      	adds	r2, #64	; 0x40
 8002966:	2c60      	cmp	r4, #96	; 0x60
 8002968:	d106      	bne.n	8002978 <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	3c40      	subs	r4, #64	; 0x40
 800296c:	700c      	strb	r4, [r1, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002970:	7013      	strb	r3, [r2, #0]
    hi2c->AbortCpltCallback(hi2c);
 8002972:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    hi2c->ErrorCallback(hi2c);
 8002974:	4798      	blx	r3
}
 8002976:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8002978:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800297a:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCallback(hi2c);
 800297c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800297e:	e7f9      	b.n	8002974 <I2C_TreatErrorCallback+0x1c>

08002980 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002980:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002982:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8002984:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800298a:	2200      	movs	r2, #0
 800298c:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800298e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002994:	2200      	movs	r2, #0
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8002998:	f7ff ffde 	bl	8002958 <I2C_TreatErrorCallback>
}
 800299c:	bd10      	pop	{r4, pc}
	...

080029a0 <I2C_ITError>:
{
 80029a0:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029a2:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80029a4:	0005      	movs	r5, r0
{
 80029a6:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029a8:	2000      	movs	r0, #0
 80029aa:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80029ac:	3541      	adds	r5, #65	; 0x41
 80029ae:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029b0:	7010      	strb	r0, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029b2:	4a32      	ldr	r2, [pc, #200]	; (8002a7c <I2C_ITError+0xdc>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80029b4:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029b6:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80029b8:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80029ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029bc:	430a      	orrs	r2, r1
 80029be:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d82b      	bhi.n	8002a1c <I2C_ITError+0x7c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029c4:	2103      	movs	r1, #3
 80029c6:	0020      	movs	r0, r4
 80029c8:	f7ff ff2c 	bl	8002824 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029cc:	2328      	movs	r3, #40	; 0x28
 80029ce:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <I2C_ITError+0xe0>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80029d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 80029d4:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 80029d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80029d8:	2800      	cmp	r0, #0
 80029da:	d02e      	beq.n	8002a3a <I2C_ITError+0x9a>
 80029dc:	001a      	movs	r2, r3
 80029de:	2110      	movs	r1, #16
 80029e0:	3a11      	subs	r2, #17
 80029e2:	438a      	bics	r2, r1
 80029e4:	d129      	bne.n	8002a3a <I2C_ITError+0x9a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	0452      	lsls	r2, r2, #17
 80029ec:	d503      	bpl.n	80029f6 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4924      	ldr	r1, [pc, #144]	; (8002a84 <I2C_ITError+0xe4>)
 80029f2:	400a      	ands	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029f6:	f7ff fd1c 	bl	8002432 <HAL_DMA_GetState>
 80029fa:	2801      	cmp	r0, #1
 80029fc:	d019      	beq.n	8002a32 <I2C_ITError+0x92>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a00:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <I2C_ITError+0xe8>)
      __HAL_UNLOCK(hi2c);
 8002a02:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a04:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002a06:	0023      	movs	r3, r4
 8002a08:	3340      	adds	r3, #64	; 0x40
 8002a0a:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a0c:	f7ff fcec 	bl	80023e8 <HAL_DMA_Abort_IT>
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d011      	beq.n	8002a38 <I2C_ITError+0x98>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a18:	4798      	blx	r3
}
 8002a1a:	e00d      	b.n	8002a38 <I2C_ITError+0x98>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a1c:	0020      	movs	r0, r4
 8002a1e:	491b      	ldr	r1, [pc, #108]	; (8002a8c <I2C_ITError+0xec>)
 8002a20:	f7ff ff00 	bl	8002824 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002a24:	782b      	ldrb	r3, [r5, #0]
 8002a26:	2b60      	cmp	r3, #96	; 0x60
 8002a28:	d001      	beq.n	8002a2e <I2C_ITError+0x8e>
      hi2c->State         = HAL_I2C_STATE_READY;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = NULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e7cf      	b.n	80029d2 <I2C_ITError+0x32>
      I2C_TreatErrorCallback(hi2c);
 8002a32:	0020      	movs	r0, r4
 8002a34:	f7ff ff90 	bl	8002958 <I2C_TreatErrorCallback>
}
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d0f8      	beq.n	8002a32 <I2C_ITError+0x92>
 8002a40:	2210      	movs	r2, #16
 8002a42:	3b12      	subs	r3, #18
 8002a44:	4393      	bics	r3, r2
 8002a46:	d1f4      	bne.n	8002a32 <I2C_ITError+0x92>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	d503      	bpl.n	8002a58 <I2C_ITError+0xb8>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	490f      	ldr	r1, [pc, #60]	; (8002a90 <I2C_ITError+0xf0>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a58:	f7ff fceb 	bl	8002432 <HAL_DMA_GetState>
 8002a5c:	2801      	cmp	r0, #1
 8002a5e:	d0e8      	beq.n	8002a32 <I2C_ITError+0x92>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a60:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <I2C_ITError+0xe8>)
      __HAL_UNLOCK(hi2c);
 8002a64:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a66:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002a68:	0023      	movs	r3, r4
 8002a6a:	3340      	adds	r3, #64	; 0x40
 8002a6c:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a6e:	f7ff fcbb 	bl	80023e8 <HAL_DMA_Abort_IT>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d0e0      	beq.n	8002a38 <I2C_ITError+0x98>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a78:	e7cd      	b.n	8002a16 <I2C_ITError+0x76>
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	ffff0000 	.word	0xffff0000
 8002a80:	08002fb1 	.word	0x08002fb1
 8002a84:	ffffbfff 	.word	0xffffbfff
 8002a88:	08002981 	.word	0x08002981
 8002a8c:	00008003 	.word	0x00008003
 8002a90:	ffff7fff 	.word	0xffff7fff

08002a94 <I2C_ITSlaveCplt>:
{
 8002a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a96:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a98:	0006      	movs	r6, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a9a:	681a      	ldr	r2, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a9c:	3641      	adds	r6, #65	; 0x41
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a9e:	9201      	str	r2, [sp, #4]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa0:	2220      	movs	r2, #32
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002aa2:	7835      	ldrb	r5, [r6, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa4:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aa6:	2308      	movs	r3, #8
{
 8002aa8:	0004      	movs	r4, r0
 8002aaa:	000f      	movs	r7, r1
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aac:	439d      	bics	r5, r3
 8002aae:	2d21      	cmp	r5, #33	; 0x21
 8002ab0:	d152      	bne.n	8002b58 <I2C_ITSlaveCplt+0xc4>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ab2:	4940      	ldr	r1, [pc, #256]	; (8002bb4 <I2C_ITSlaveCplt+0x120>)
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ab4:	0020      	movs	r0, r4
 8002ab6:	f7ff feb5 	bl	8002824 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002aba:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	0212      	lsls	r2, r2, #8
 8002ac2:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002ac4:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	493a      	ldr	r1, [pc, #232]	; (8002bb8 <I2C_ITSlaveCplt+0x124>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002ad2:	f7ff fe55 	bl	8002780 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ad6:	9b01      	ldr	r3, [sp, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	045b      	lsls	r3, r3, #17
 8002adc:	d540      	bpl.n	8002b60 <I2C_ITSlaveCplt+0xcc>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	4936      	ldr	r1, [pc, #216]	; (8002bbc <I2C_ITSlaveCplt+0x128>)
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8002ae8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002af6:	077b      	lsls	r3, r7, #29
 8002af8:	d511      	bpl.n	8002b1e <I2C_ITSlaveCplt+0x8a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002afa:	2304      	movs	r3, #4
 8002afc:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b08:	3301      	adds	r3, #1
 8002b0a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002b0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <I2C_ITSlaveCplt+0x8a>
      hi2c->XferSize--;
 8002b12:	3b01      	subs	r3, #1
 8002b14:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002b16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002b1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <I2C_ITSlaveCplt+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b24:	2304      	movs	r3, #4
 8002b26:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	0023      	movs	r3, r4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	3342      	adds	r3, #66	; 0x42
 8002b32:	701a      	strb	r2, [r3, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b34:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8002b36:	6362      	str	r2, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b38:	4295      	cmp	r5, r2
 8002b3a:	d01c      	beq.n	8002b76 <I2C_ITSlaveCplt+0xe2>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b3c:	0020      	movs	r0, r4
 8002b3e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002b40:	f7ff ff2e 	bl	80029a0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b44:	0023      	movs	r3, r4
 8002b46:	3341      	adds	r3, #65	; 0x41
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b28      	cmp	r3, #40	; 0x28
 8002b4c:	d103      	bne.n	8002b56 <I2C_ITSlaveCplt+0xc2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b4e:	0039      	movs	r1, r7
 8002b50:	0020      	movs	r0, r4
 8002b52:	f7ff fe8b 	bl	800286c <I2C_ITListenCplt>
}
 8002b56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b58:	2d22      	cmp	r5, #34	; 0x22
 8002b5a:	d1af      	bne.n	8002abc <I2C_ITSlaveCplt+0x28>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b5c:	4918      	ldr	r1, [pc, #96]	; (8002bc0 <I2C_ITSlaveCplt+0x12c>)
 8002b5e:	e7a9      	b.n	8002ab4 <I2C_ITSlaveCplt+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b60:	9b01      	ldr	r3, [sp, #4]
 8002b62:	0bdb      	lsrs	r3, r3, #15
 8002b64:	4213      	tst	r3, r2
 8002b66:	d0c6      	beq.n	8002af6 <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b68:	6822      	ldr	r2, [r4, #0]
 8002b6a:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <I2C_ITSlaveCplt+0x130>)
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8002b72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b74:	e7b9      	b.n	8002aea <I2C_ITSlaveCplt+0x56>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b76:	0027      	movs	r7, r4
 8002b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b7a:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <I2C_ITSlaveCplt+0x134>)
 8002b7c:	3740      	adds	r7, #64	; 0x40
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00c      	beq.n	8002b9c <I2C_ITSlaveCplt+0x108>
    I2C_ITSlaveSeqCplt(hi2c);
 8002b82:	0020      	movs	r0, r4
 8002b84:	f7ff fea8 	bl	80028d8 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <I2C_ITSlaveCplt+0x134>)
 8002b8c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b90:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b92:	703d      	strb	r5, [r7, #0]
    hi2c->ListenCpltCallback(hi2c);
 8002b94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    hi2c->SlaveTxCpltCallback(hi2c);
 8002b96:	0020      	movs	r0, r4
 8002b98:	4798      	blx	r3
}
 8002b9a:	e7dc      	b.n	8002b56 <I2C_ITSlaveCplt+0xc2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	7832      	ldrb	r2, [r6, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ba2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ba4:	703d      	strb	r5, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ba6:	2a22      	cmp	r2, #34	; 0x22
 8002ba8:	d101      	bne.n	8002bae <I2C_ITSlaveCplt+0x11a>
    hi2c->SlaveRxCpltCallback(hi2c);
 8002baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bac:	e7f3      	b.n	8002b96 <I2C_ITSlaveCplt+0x102>
    hi2c->SlaveTxCpltCallback(hi2c);
 8002bae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bb0:	e7f1      	b.n	8002b96 <I2C_ITSlaveCplt+0x102>
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	00008001 	.word	0x00008001
 8002bb8:	fe00e800 	.word	0xfe00e800
 8002bbc:	ffffbfff 	.word	0xffffbfff
 8002bc0:	00008002 	.word	0x00008002
 8002bc4:	ffff7fff 	.word	0xffff7fff
 8002bc8:	ffff0000 	.word	0xffff0000

08002bcc <I2C_ITMasterCplt>:
{
 8002bcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bce:	2220      	movs	r2, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bd0:	0005      	movs	r5, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd2:	6803      	ldr	r3, [r0, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bd4:	3541      	adds	r5, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd6:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bd8:	782b      	ldrb	r3, [r5, #0]
{
 8002bda:	0004      	movs	r4, r0
 8002bdc:	000e      	movs	r6, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bde:	2b21      	cmp	r3, #33	; 0x21
 8002be0:	d12c      	bne.n	8002c3c <I2C_ITMasterCplt+0x70>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002be2:	2101      	movs	r1, #1
 8002be4:	f7ff fe1e 	bl	8002824 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002be8:	2311      	movs	r3, #17
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bea:	6323      	str	r3, [r4, #48]	; 0x30
  I2C_RESET_CR2(hi2c);
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	492b      	ldr	r1, [pc, #172]	; (8002c9c <I2C_ITMasterCplt+0xd0>)
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
  hi2c->XferISR       = NULL;
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	6362      	str	r2, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bfa:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <I2C_ITMasterCplt+0xd4>)
 8002bfc:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002bfe:	06f2      	lsls	r2, r6, #27
 8002c00:	d505      	bpl.n	8002c0e <I2C_ITMasterCplt+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	2210      	movs	r2, #16
 8002c04:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002c08:	3a0c      	subs	r2, #12
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	6462      	str	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002c0e:	782a      	ldrb	r2, [r5, #0]
 8002c10:	2a60      	cmp	r2, #96	; 0x60
 8002c12:	d105      	bne.n	8002c20 <I2C_ITMasterCplt+0x54>
 8002c14:	0772      	lsls	r2, r6, #29
 8002c16:	d503      	bpl.n	8002c20 <I2C_ITMasterCplt+0x54>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 8002c1e:	9b01      	ldr	r3, [sp, #4]
  I2C_Flush_TXDR(hi2c);
 8002c20:	0020      	movs	r0, r4
 8002c22:	f7ff fdad 	bl	8002780 <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 8002c26:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002c28:	782a      	ldrb	r2, [r5, #0]
 8002c2a:	2a60      	cmp	r2, #96	; 0x60
 8002c2c:	d001      	beq.n	8002c32 <I2C_ITMasterCplt+0x66>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <I2C_ITMasterCplt+0x80>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c32:	0020      	movs	r0, r4
 8002c34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002c36:	f7ff feb3 	bl	80029a0 <I2C_ITError>
}
 8002c3a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c3c:	782b      	ldrb	r3, [r5, #0]
 8002c3e:	2b22      	cmp	r3, #34	; 0x22
 8002c40:	d1d4      	bne.n	8002bec <I2C_ITMasterCplt+0x20>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c42:	2102      	movs	r1, #2
 8002c44:	f7ff fdee 	bl	8002824 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c48:	2312      	movs	r3, #18
 8002c4a:	e7ce      	b.n	8002bea <I2C_ITMasterCplt+0x1e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c4c:	782a      	ldrb	r2, [r5, #0]
 8002c4e:	2a21      	cmp	r2, #33	; 0x21
 8002c50:	d111      	bne.n	8002c76 <I2C_ITMasterCplt+0xaa>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	3a01      	subs	r2, #1
 8002c54:	702a      	strb	r2, [r5, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c56:	0022      	movs	r2, r4
 8002c58:	0021      	movs	r1, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c5a:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c5c:	3242      	adds	r2, #66	; 0x42
 8002c5e:	7810      	ldrb	r0, [r2, #0]
 8002c60:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c62:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8002c64:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c66:	2840      	cmp	r0, #64	; 0x40
 8002c68:	d103      	bne.n	8002c72 <I2C_ITMasterCplt+0xa6>
      hi2c->MemTxCpltCallback(hi2c);
 8002c6a:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hi2c->MasterRxCpltCallback(hi2c);
 8002c6c:	0020      	movs	r0, r4
 8002c6e:	4798      	blx	r3
}
 8002c70:	e7e3      	b.n	8002c3a <I2C_ITMasterCplt+0x6e>
      hi2c->MasterTxCpltCallback(hi2c);
 8002c72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c74:	e7fa      	b.n	8002c6c <I2C_ITMasterCplt+0xa0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c76:	782a      	ldrb	r2, [r5, #0]
 8002c78:	2a22      	cmp	r2, #34	; 0x22
 8002c7a:	d1de      	bne.n	8002c3a <I2C_ITMasterCplt+0x6e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	3a02      	subs	r2, #2
 8002c7e:	702a      	strb	r2, [r5, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c80:	0022      	movs	r2, r4
 8002c82:	0021      	movs	r1, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c84:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c86:	3242      	adds	r2, #66	; 0x42
 8002c88:	7810      	ldrb	r0, [r2, #0]
 8002c8a:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8002c8e:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c90:	2840      	cmp	r0, #64	; 0x40
 8002c92:	d101      	bne.n	8002c98 <I2C_ITMasterCplt+0xcc>
      hi2c->MemRxCpltCallback(hi2c);
 8002c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c96:	e7e9      	b.n	8002c6c <I2C_ITMasterCplt+0xa0>
      hi2c->MasterRxCpltCallback(hi2c);
 8002c98:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c9a:	e7e7      	b.n	8002c6c <I2C_ITMasterCplt+0xa0>
 8002c9c:	fe00e800 	.word	0xfe00e800
 8002ca0:	ffff0000 	.word	0xffff0000

08002ca4 <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	0003      	movs	r3, r0
{
 8002ca6:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	2500      	movs	r5, #0
 8002caa:	2220      	movs	r2, #32
 8002cac:	0006      	movs	r6, r0
 8002cae:	3342      	adds	r3, #66	; 0x42
 8002cb0:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	7819      	ldrb	r1, [r3, #0]
{
 8002cb6:	0004      	movs	r4, r0
 8002cb8:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cba:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cbc:	2921      	cmp	r1, #33	; 0x21
 8002cbe:	d10a      	bne.n	8002cd6 <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002cc0:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 8002cc2:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002cc4:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cc6:	3920      	subs	r1, #32
 8002cc8:	f7ff fdac 	bl	8002824 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ccc:	7035      	strb	r5, [r6, #0]
    hi2c->MasterTxCpltCallback(hi2c);
 8002cce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hi2c->MasterRxCpltCallback(hi2c);
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	4798      	blx	r3
}
 8002cd4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cd6:	2312      	movs	r3, #18
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cd8:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cda:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002cdc:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cde:	f7ff fda1 	bl	8002824 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ce2:	7035      	strb	r5, [r6, #0]
    hi2c->MasterRxCpltCallback(hi2c);
 8002ce4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ce6:	e7f3      	b.n	8002cd0 <I2C_ITMasterSeqCplt+0x2c>

08002ce8 <I2C_Master_ISR_DMA>:
{
 8002ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(hi2c);
 8002cea:	0005      	movs	r5, r0
 8002cec:	3540      	adds	r5, #64	; 0x40
 8002cee:	782b      	ldrb	r3, [r5, #0]
{
 8002cf0:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d017      	beq.n	8002d28 <I2C_Master_ISR_DMA+0x40>
 8002cf8:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002cfa:	0908      	lsrs	r0, r1, #4
  __HAL_LOCK(hi2c);
 8002cfc:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002cfe:	4218      	tst	r0, r3
 8002d00:	d013      	beq.n	8002d2a <I2C_Master_ISR_DMA+0x42>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d02:	0910      	lsrs	r0, r2, #4
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d04:	4218      	tst	r0, r3
 8002d06:	d010      	beq.n	8002d2a <I2C_Master_ISR_DMA+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d08:	2210      	movs	r2, #16
 8002d0a:	6823      	ldr	r3, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d0c:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0e:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d10:	2304      	movs	r3, #4
 8002d12:	6c62      	ldr	r2, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d14:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d16:	4313      	orrs	r3, r2
 8002d18:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d1a:	f7ff fd53 	bl	80027c4 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8002d1e:	0020      	movs	r0, r4
 8002d20:	f7ff fd2e 	bl	8002780 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8002d24:	2000      	movs	r0, #0
 8002d26:	7028      	strb	r0, [r5, #0]
}
 8002d28:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	0608      	lsls	r0, r1, #24
 8002d2e:	d546      	bpl.n	8002dbe <I2C_Master_ISR_DMA+0xd6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d30:	0990      	lsrs	r0, r2, #6
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d32:	4218      	tst	r0, r3
 8002d34:	d043      	beq.n	8002dbe <I2C_Master_ISR_DMA+0xd6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002d36:	2140      	movs	r1, #64	; 0x40
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d02f      	beq.n	8002da6 <I2C_Master_ISR_DMA+0xbe>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002d46:	6859      	ldr	r1, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002d4a:	0589      	lsls	r1, r1, #22
 8002d4c:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d4e:	2bff      	cmp	r3, #255	; 0xff
 8002d50:	d91b      	bls.n	8002d8a <I2C_Master_ISR_DMA+0xa2>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d52:	23ff      	movs	r3, #255	; 0xff
 8002d54:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002d5e:	9000      	str	r0, [sp, #0]
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	0020      	movs	r0, r4
 8002d64:	f7ff fd1a 	bl	800279c <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8002d68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d72:	0023      	movs	r3, r4
 8002d74:	3341      	adds	r3, #65	; 0x41
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d7a:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d7c:	2a22      	cmp	r2, #34	; 0x22
 8002d7e:	d10f      	bne.n	8002da0 <I2C_Master_ISR_DMA+0xb8>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	0212      	lsls	r2, r2, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e7cc      	b.n	8002d24 <I2C_Master_ISR_DMA+0x3c>
        hi2c->XferSize = hi2c->XferCount;
 8002d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8002d8e:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <I2C_Master_ISR_DMA+0x11c>)
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d001      	beq.n	8002d9a <I2C_Master_ISR_DMA+0xb2>
          xfermode = hi2c->XferOptions;
 8002d96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d98:	e7df      	b.n	8002d5a <I2C_Master_ISR_DMA+0x72>
          xfermode = I2C_AUTOEND_MODE;
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	049b      	lsls	r3, r3, #18
 8002d9e:	e7dc      	b.n	8002d5a <I2C_Master_ISR_DMA+0x72>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	01d2      	lsls	r2, r2, #7
 8002da4:	e7ee      	b.n	8002d84 <I2C_Master_ISR_DMA+0x9c>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	d403      	bmi.n	8002db4 <I2C_Master_ISR_DMA+0xcc>
        I2C_ITMasterSeqCplt(hi2c);
 8002dac:	0020      	movs	r0, r4
 8002dae:	f7ff ff79 	bl	8002ca4 <I2C_ITMasterSeqCplt>
 8002db2:	e7b7      	b.n	8002d24 <I2C_Master_ISR_DMA+0x3c>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	0020      	movs	r0, r4
 8002db8:	f7ff fdf2 	bl	80029a0 <I2C_ITError>
 8002dbc:	e7b2      	b.n	8002d24 <I2C_Master_ISR_DMA+0x3c>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	0648      	lsls	r0, r1, #25
 8002dc2:	d513      	bpl.n	8002dec <I2C_Master_ISR_DMA+0x104>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002dc4:	0990      	lsrs	r0, r2, #6
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002dc6:	4218      	tst	r0, r3
 8002dc8:	d010      	beq.n	8002dec <I2C_Master_ISR_DMA+0x104>
    if (hi2c->XferCount == 0U)
 8002dca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f1      	bne.n	8002db4 <I2C_Master_ISR_DMA+0xcc>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	0192      	lsls	r2, r2, #6
 8002dd6:	d4a5      	bmi.n	8002d24 <I2C_Master_ISR_DMA+0x3c>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002dd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <I2C_Master_ISR_DMA+0x11c>)
 8002ddc:	4291      	cmp	r1, r2
 8002dde:	d1e5      	bne.n	8002dac <I2C_Master_ISR_DMA+0xc4>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	01d2      	lsls	r2, r2, #7
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	e79b      	b.n	8002d24 <I2C_Master_ISR_DMA+0x3c>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dec:	2301      	movs	r3, #1
 8002dee:	0688      	lsls	r0, r1, #26
 8002df0:	d400      	bmi.n	8002df4 <I2C_Master_ISR_DMA+0x10c>
 8002df2:	e797      	b.n	8002d24 <I2C_Master_ISR_DMA+0x3c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002df4:	0952      	lsrs	r2, r2, #5
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002df6:	421a      	tst	r2, r3
 8002df8:	d100      	bne.n	8002dfc <I2C_Master_ISR_DMA+0x114>
 8002dfa:	e793      	b.n	8002d24 <I2C_Master_ISR_DMA+0x3c>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002dfc:	0020      	movs	r0, r4
 8002dfe:	f7ff fee5 	bl	8002bcc <I2C_ITMasterCplt>
 8002e02:	e78f      	b.n	8002d24 <I2C_Master_ISR_DMA+0x3c>
 8002e04:	ffff0000 	.word	0xffff0000

08002e08 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e08:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e0c:	2228      	movs	r2, #40	; 0x28
 8002e0e:	3341      	adds	r3, #65	; 0x41
 8002e10:	781b      	ldrb	r3, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002e12:	0004      	movs	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8002e14:	6801      	ldr	r1, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e16:	4013      	ands	r3, r2
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d13d      	bne.n	8002e98 <I2C_ITAddrCplt.constprop.0+0x90>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e1c:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8002e1e:	698d      	ldr	r5, [r1, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e20:	698e      	ldr	r6, [r1, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e22:	688b      	ldr	r3, [r1, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e24:	68ca      	ldr	r2, [r1, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002e26:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e28:	9201      	str	r2, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e2a:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e2c:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8002e2e:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e30:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e32:	2a02      	cmp	r2, #2
 8002e34:	d125      	bne.n	8002e82 <I2C_ITAddrCplt.constprop.0+0x7a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e36:	059b      	lsls	r3, r3, #22
 8002e38:	0d9a      	lsrs	r2, r3, #22
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e3a:	0f5b      	lsrs	r3, r3, #29
 8002e3c:	405e      	eors	r6, r3
 8002e3e:	0030      	movs	r0, r6
 8002e40:	2306      	movs	r3, #6
 8002e42:	4018      	ands	r0, r3
 8002e44:	421e      	tst	r6, r3
 8002e46:	d110      	bne.n	8002e6a <I2C_ITAddrCplt.constprop.0+0x62>
        hi2c->AddrEventCount++;
 8002e48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	64a3      	str	r3, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d109      	bne.n	8002e68 <I2C_ITAddrCplt.constprop.0+0x60>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e54:	3306      	adds	r3, #6
          hi2c->AddrEventCount = 0U;
 8002e56:	64a0      	str	r0, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e58:	61cb      	str	r3, [r1, #28]
          __HAL_UNLOCK(hi2c);
 8002e5a:	0023      	movs	r3, r4
 8002e5c:	3340      	adds	r3, #64	; 0x40
 8002e5e:	7018      	strb	r0, [r3, #0]
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e60:	6f23      	ldr	r3, [r4, #112]	; 0x70
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e62:	0029      	movs	r1, r5
 8002e64:	0020      	movs	r0, r4
 8002e66:	4798      	blx	r3
}
 8002e68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	0020      	movs	r0, r4
 8002e6e:	0209      	lsls	r1, r1, #8
 8002e70:	f7ff fcd8 	bl	8002824 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e74:	0023      	movs	r3, r4
 8002e76:	2200      	movs	r2, #0
 8002e78:	3340      	adds	r3, #64	; 0x40
 8002e7a:	701a      	strb	r2, [r3, #0]
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e7c:	9a01      	ldr	r2, [sp, #4]
 8002e7e:	403a      	ands	r2, r7
 8002e80:	e7ee      	b.n	8002e60 <I2C_ITAddrCplt.constprop.0+0x58>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	0209      	lsls	r1, r1, #8
 8002e86:	f7ff fccd 	bl	8002824 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e8a:	0023      	movs	r3, r4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	3340      	adds	r3, #64	; 0x40
 8002e90:	701a      	strb	r2, [r3, #0]
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e92:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002e94:	0032      	movs	r2, r6
 8002e96:	e7e4      	b.n	8002e62 <I2C_ITAddrCplt.constprop.0+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e98:	2308      	movs	r3, #8
 8002e9a:	61cb      	str	r3, [r1, #28]
    __HAL_UNLOCK(hi2c);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	3440      	adds	r4, #64	; 0x40
 8002ea0:	7023      	strb	r3, [r4, #0]
}
 8002ea2:	e7e1      	b.n	8002e68 <I2C_ITAddrCplt.constprop.0+0x60>

08002ea4 <I2C_Slave_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8002ea4:	0003      	movs	r3, r0
{
 8002ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8002ea8:	3340      	adds	r3, #64	; 0x40
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	781b      	ldrb	r3, [r3, #0]
{
 8002eae:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8002eb0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 8002eb2:	000e      	movs	r6, r1
 8002eb4:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 8002eb6:	2002      	movs	r0, #2
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d03d      	beq.n	8002f38 <I2C_Slave_ISR_DMA+0x94>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	9a01      	ldr	r2, [sp, #4]
 8002ec0:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ec2:	094a      	lsrs	r2, r1, #5
 8002ec4:	421a      	tst	r2, r3
 8002ec6:	d005      	beq.n	8002ed4 <I2C_Slave_ISR_DMA+0x30>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ec8:	096a      	lsrs	r2, r5, #5
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002eca:	421a      	tst	r2, r3
 8002ecc:	d002      	beq.n	8002ed4 <I2C_Slave_ISR_DMA+0x30>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ece:	0020      	movs	r0, r4
 8002ed0:	f7ff fde0 	bl	8002a94 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	06f3      	lsls	r3, r6, #27
 8002ed8:	d55c      	bpl.n	8002f94 <I2C_Slave_ISR_DMA+0xf0>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002eda:	092b      	lsrs	r3, r5, #4
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002edc:	4203      	tst	r3, r0
 8002ede:	d059      	beq.n	8002f94 <I2C_Slave_ISR_DMA+0xf0>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ee0:	0bab      	lsrs	r3, r5, #14
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002ee2:	0bed      	lsrs	r5, r5, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ee4:	469c      	mov	ip, r3
 8002ee6:	432b      	orrs	r3, r5
 8002ee8:	4203      	tst	r3, r0
 8002eea:	d04f      	beq.n	8002f8c <I2C_Slave_ISR_DMA+0xe8>
      if (hi2c->hdmarx != NULL)
 8002eec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 8002eee:	1e0b      	subs	r3, r1, #0
      if (hi2c->hdmarx != NULL)
 8002ef0:	d006      	beq.n	8002f00 <I2C_Slave_ISR_DMA+0x5c>
  uint32_t treatdmanack = 0U;
 8002ef2:	2300      	movs	r3, #0
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002ef4:	4205      	tst	r5, r0
 8002ef6:	d003      	beq.n	8002f00 <I2C_Slave_ISR_DMA+0x5c>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002ef8:	680b      	ldr	r3, [r1, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 8002efc:	425a      	negs	r2, r3
 8002efe:	4153      	adcs	r3, r2
      if (hi2c->hdmatx != NULL)
 8002f00:	0022      	movs	r2, r4
 8002f02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f04:	3241      	adds	r2, #65	; 0x41
 8002f06:	2900      	cmp	r1, #0
 8002f08:	d006      	beq.n	8002f18 <I2C_Slave_ISR_DMA+0x74>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002f0a:	4660      	mov	r0, ip
 8002f0c:	07c0      	lsls	r0, r0, #31
 8002f0e:	d503      	bpl.n	8002f18 <I2C_Slave_ISR_DMA+0x74>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002f10:	6809      	ldr	r1, [r1, #0]
 8002f12:	6849      	ldr	r1, [r1, #4]
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d001      	beq.n	8002f1c <I2C_Slave_ISR_DMA+0x78>
      if (treatdmanack == 1U)
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d11e      	bne.n	8002f5a <I2C_Slave_ISR_DMA+0xb6>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f1c:	7813      	ldrb	r3, [r2, #0]
 8002f1e:	2b28      	cmp	r3, #40	; 0x28
 8002f20:	d10b      	bne.n	8002f3a <I2C_Slave_ISR_DMA+0x96>
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	049b      	lsls	r3, r3, #18
 8002f26:	429f      	cmp	r7, r3
 8002f28:	d107      	bne.n	8002f3a <I2C_Slave_ISR_DMA+0x96>
          I2C_ITListenCplt(hi2c, ITFlags);
 8002f2a:	0031      	movs	r1, r6
 8002f2c:	0020      	movs	r0, r4
 8002f2e:	f7ff fc9d 	bl	800286c <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8002f32:	2000      	movs	r0, #0
 8002f34:	9b01      	ldr	r3, [sp, #4]
 8002f36:	7018      	strb	r0, [r3, #0]
}
 8002f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f3a:	7811      	ldrb	r1, [r2, #0]
 8002f3c:	2210      	movs	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3e:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f42:	2929      	cmp	r1, #41	; 0x29
 8002f44:	d1f5      	bne.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
 8002f46:	4918      	ldr	r1, [pc, #96]	; (8002fa8 <I2C_Slave_ISR_DMA+0x104>)
 8002f48:	428f      	cmp	r7, r1
 8002f4a:	d0f2      	beq.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
          I2C_Flush_TXDR(hi2c);
 8002f4c:	0020      	movs	r0, r4
 8002f4e:	f7ff fc17 	bl	8002780 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8002f52:	0020      	movs	r0, r4
 8002f54:	f7ff fcc0 	bl	80028d8 <I2C_ITSlaveSeqCplt>
 8002f58:	e7eb      	b.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5a:	2110      	movs	r1, #16
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	61d9      	str	r1, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f60:	2304      	movs	r3, #4
 8002f62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 8002f68:	7813      	ldrb	r3, [r2, #0]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <I2C_Slave_ISR_DMA+0x108>)
        tmpstate = hi2c->State;
 8002f6c:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f6e:	4217      	tst	r7, r2
 8002f70:	d1df      	bne.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f72:	2208      	movs	r2, #8
 8002f74:	4393      	bics	r3, r2
 8002f76:	2b21      	cmp	r3, #33	; 0x21
 8002f78:	d101      	bne.n	8002f7e <I2C_Slave_ISR_DMA+0xda>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8002f7c:	e001      	b.n	8002f82 <I2C_Slave_ISR_DMA+0xde>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	d0fb      	beq.n	8002f7a <I2C_Slave_ISR_DMA+0xd6>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f82:	0020      	movs	r0, r4
 8002f84:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f86:	f7ff fd0b 	bl	80029a0 <I2C_ITError>
 8002f8a:	e7d2      	b.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	61da      	str	r2, [r3, #28]
 8002f92:	e7ce      	b.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f94:	2301      	movs	r3, #1
 8002f96:	0732      	lsls	r2, r6, #28
 8002f98:	d5cb      	bpl.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f9a:	08ed      	lsrs	r5, r5, #3
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f9c:	421d      	tst	r5, r3
 8002f9e:	d0c8      	beq.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002fa0:	0020      	movs	r0, r4
 8002fa2:	f7ff ff31 	bl	8002e08 <I2C_ITAddrCplt.constprop.0>
 8002fa6:	e7c4      	b.n	8002f32 <I2C_Slave_ISR_DMA+0x8e>
 8002fa8:	ffff0000 	.word	0xffff0000
 8002fac:	feffffff 	.word	0xfeffffff

08002fb0 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8002fb0:	0003      	movs	r3, r0
{
 8002fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8002fb4:	3340      	adds	r3, #64	; 0x40
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
{
 8002fba:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fbc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 8002fbe:	000e      	movs	r6, r1
 8002fc0:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 8002fc2:	2002      	movs	r0, #2
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d024      	beq.n	8003012 <I2C_Slave_ISR_IT+0x62>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	9a01      	ldr	r2, [sp, #4]
 8002fcc:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fce:	094a      	lsrs	r2, r1, #5
 8002fd0:	421a      	tst	r2, r3
 8002fd2:	d005      	beq.n	8002fe0 <I2C_Slave_ISR_IT+0x30>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fd4:	096a      	lsrs	r2, r5, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fd6:	421a      	tst	r2, r3
 8002fd8:	d002      	beq.n	8002fe0 <I2C_Slave_ISR_IT+0x30>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002fda:	0020      	movs	r0, r4
 8002fdc:	f7ff fd5a 	bl	8002a94 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	06f2      	lsls	r2, r6, #27
 8002fe4:	d535      	bpl.n	8003052 <I2C_Slave_ISR_IT+0xa2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fe6:	092a      	lsrs	r2, r5, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fe8:	421a      	tst	r2, r3
 8002fea:	d032      	beq.n	8003052 <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 8002fec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d120      	bne.n	8003034 <I2C_Slave_ISR_IT+0x84>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ff2:	0023      	movs	r3, r4
 8002ff4:	3341      	adds	r3, #65	; 0x41
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	2a28      	cmp	r2, #40	; 0x28
 8002ffa:	d10b      	bne.n	8003014 <I2C_Slave_ISR_IT+0x64>
 8002ffc:	2280      	movs	r2, #128	; 0x80
 8002ffe:	0492      	lsls	r2, r2, #18
 8003000:	4297      	cmp	r7, r2
 8003002:	d107      	bne.n	8003014 <I2C_Slave_ISR_IT+0x64>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003004:	0031      	movs	r1, r6
 8003006:	0020      	movs	r0, r4
 8003008:	f7ff fc30 	bl	800286c <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800300c:	2000      	movs	r0, #0
 800300e:	9b01      	ldr	r3, [sp, #4]
 8003010:	7018      	strb	r0, [r3, #0]
}
 8003012:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003014:	2210      	movs	r2, #16
 8003016:	7819      	ldrb	r1, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800301c:	2929      	cmp	r1, #41	; 0x29
 800301e:	d1f5      	bne.n	800300c <I2C_Slave_ISR_IT+0x5c>
 8003020:	492d      	ldr	r1, [pc, #180]	; (80030d8 <I2C_Slave_ISR_IT+0x128>)
 8003022:	428f      	cmp	r7, r1
 8003024:	d0f2      	beq.n	800300c <I2C_Slave_ISR_IT+0x5c>
        I2C_Flush_TXDR(hi2c);
 8003026:	0020      	movs	r0, r4
 8003028:	f7ff fbaa 	bl	8002780 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 800302c:	0020      	movs	r0, r4
 800302e:	f7ff fc53 	bl	80028d8 <I2C_ITSlaveSeqCplt>
 8003032:	e7eb      	b.n	800300c <I2C_Slave_ISR_IT+0x5c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003034:	2210      	movs	r2, #16
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800303a:	2304      	movs	r3, #4
 800303c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800303e:	4313      	orrs	r3, r2
 8003040:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <I2C_Slave_ISR_IT+0x12c>)
 8003044:	421f      	tst	r7, r3
 8003046:	d1e1      	bne.n	800300c <I2C_Slave_ISR_IT+0x5c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003048:	0020      	movs	r0, r4
 800304a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800304c:	f7ff fca8 	bl	80029a0 <I2C_ITError>
 8003050:	e7dc      	b.n	800300c <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003052:	2301      	movs	r3, #1
 8003054:	0772      	lsls	r2, r6, #29
 8003056:	d51a      	bpl.n	800308e <I2C_Slave_ISR_IT+0xde>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003058:	08aa      	lsrs	r2, r5, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800305a:	421a      	tst	r2, r3
 800305c:	d017      	beq.n	800308e <I2C_Slave_ISR_IT+0xde>
    if (hi2c->XferCount > 0U)
 800305e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <I2C_Slave_ISR_IT+0xd0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800306c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800306e:	3301      	adds	r3, #1
 8003070:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003072:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003078:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800307a:	3b01      	subs	r3, #1
 800307c:	b29b      	uxth	r3, r3
 800307e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003080:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1c2      	bne.n	800300c <I2C_Slave_ISR_IT+0x5c>
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <I2C_Slave_ISR_IT+0x128>)
 8003088:	429f      	cmp	r7, r3
 800308a:	d0bf      	beq.n	800300c <I2C_Slave_ISR_IT+0x5c>
 800308c:	e7ce      	b.n	800302c <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800308e:	2301      	movs	r3, #1
 8003090:	0732      	lsls	r2, r6, #28
 8003092:	d506      	bpl.n	80030a2 <I2C_Slave_ISR_IT+0xf2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003094:	08ea      	lsrs	r2, r5, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003096:	421a      	tst	r2, r3
 8003098:	d003      	beq.n	80030a2 <I2C_Slave_ISR_IT+0xf2>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800309a:	0020      	movs	r0, r4
 800309c:	f7ff feb4 	bl	8002e08 <I2C_ITAddrCplt.constprop.0>
 80030a0:	e7b4      	b.n	800300c <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030a2:	2301      	movs	r3, #1
 80030a4:	07b2      	lsls	r2, r6, #30
 80030a6:	d5b1      	bpl.n	800300c <I2C_Slave_ISR_IT+0x5c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80030a8:	40dd      	lsrs	r5, r3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030aa:	421d      	tst	r5, r3
 80030ac:	d0ae      	beq.n	800300c <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount > 0U)
 80030ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <I2C_Slave_ISR_IT+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80030ba:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030bc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80030be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	8523      	strh	r3, [r4, #40]	; 0x28
 80030ce:	e79d      	b.n	800300c <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <I2C_Slave_ISR_IT+0x12c>)
 80030d2:	421f      	tst	r7, r3
 80030d4:	d0aa      	beq.n	800302c <I2C_Slave_ISR_IT+0x7c>
 80030d6:	e799      	b.n	800300c <I2C_Slave_ISR_IT+0x5c>
 80030d8:	ffff0000 	.word	0xffff0000
 80030dc:	feffffff 	.word	0xfeffffff

080030e0 <HAL_I2C_AbortCpltCallback>:
 80030e0:	4770      	bx	lr

080030e2 <HAL_I2C_MasterTxCpltCallback>:
 80030e2:	4770      	bx	lr

080030e4 <HAL_I2C_MasterRxCpltCallback>:
 80030e4:	4770      	bx	lr

080030e6 <HAL_I2C_SlaveTxCpltCallback>:
 80030e6:	4770      	bx	lr

080030e8 <HAL_I2C_ListenCpltCallback>:
 80030e8:	4770      	bx	lr

080030ea <HAL_I2C_MemTxCpltCallback>:
 80030ea:	4770      	bx	lr

080030ec <HAL_I2C_MemRxCpltCallback>:
 80030ec:	4770      	bx	lr

080030ee <HAL_I2C_ErrorCallback>:
 80030ee:	4770      	bx	lr

080030f0 <HAL_I2C_Init>:
{
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80030f4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80030f6:	2c00      	cmp	r4, #0
 80030f8:	d058      	beq.n	80031ac <HAL_I2C_Init+0xbc>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fa:	0025      	movs	r5, r4
 80030fc:	3541      	adds	r5, #65	; 0x41
 80030fe:	782b      	ldrb	r3, [r5, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11e      	bne.n	8003144 <HAL_I2C_Init+0x54>
    hi2c->Lock = HAL_UNLOCKED;
 8003106:	0023      	movs	r3, r4
 8003108:	3340      	adds	r3, #64	; 0x40
 800310a:	701a      	strb	r2, [r3, #0]
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_I2C_Init+0xd4>)
 800310e:	64e3      	str	r3, [r4, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003110:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_I2C_Init+0xd8>)
 8003112:	6523      	str	r3, [r4, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003114:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <HAL_I2C_Init+0xdc>)
 8003116:	6563      	str	r3, [r4, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_I2C_Init+0xe0>)
 800311a:	65a3      	str	r3, [r4, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_I2C_Init+0xe4>)
 800311e:	65e3      	str	r3, [r4, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_I2C_Init+0xe8>)
 8003122:	6623      	str	r3, [r4, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_I2C_Init+0xec>)
 8003126:	6663      	str	r3, [r4, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_I2C_Init+0xf0>)
 800312a:	66a3      	str	r3, [r4, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_I2C_Init+0xf4>)
 800312e:	66e3      	str	r3, [r4, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003130:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_I2C_Init+0xf8>)
 8003132:	6723      	str	r3, [r4, #112]	; 0x70
    if (hi2c->MspInitCallback == NULL)
 8003134:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_I2C_Init+0x4e>
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800313a:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <HAL_I2C_Init+0xfc>)
 800313c:	6763      	str	r3, [r4, #116]	; 0x74
    hi2c->MspInitCallback(hi2c);
 800313e:	0020      	movs	r0, r4
 8003140:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003142:	4798      	blx	r3
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003144:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003146:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800314a:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800314c:	4828      	ldr	r0, [pc, #160]	; (80031f0 <HAL_I2C_Init+0x100>)
  __HAL_I2C_DISABLE(hi2c);
 800314e:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003150:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003152:	438a      	bics	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003156:	6861      	ldr	r1, [r4, #4]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_I2C_Init+0x104>)
 800315a:	400a      	ands	r2, r1
 800315c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4002      	ands	r2, r0
 8003162:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003164:	68e2      	ldr	r2, [r4, #12]
 8003166:	2a01      	cmp	r2, #1
 8003168:	d121      	bne.n	80031ae <HAL_I2C_Init+0xbe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	0209      	lsls	r1, r1, #8
 800316e:	4331      	orrs	r1, r6
 8003170:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4920      	ldr	r1, [pc, #128]	; (80031f8 <HAL_I2C_Init+0x108>)
 8003176:	4311      	orrs	r1, r2
 8003178:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800317a:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800317c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800317e:	4002      	ands	r2, r0
 8003180:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003182:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003184:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003186:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003188:	69a1      	ldr	r1, [r4, #24]
 800318a:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003190:	6a21      	ldr	r1, [r4, #32]
 8003192:	69e2      	ldr	r2, [r4, #28]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003198:	2201      	movs	r2, #1
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031a4:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	3442      	adds	r4, #66	; 0x42
 80031aa:	7020      	strb	r0, [r4, #0]
}
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ae:	2184      	movs	r1, #132	; 0x84
 80031b0:	0209      	lsls	r1, r1, #8
 80031b2:	4331      	orrs	r1, r6
 80031b4:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031b6:	2a02      	cmp	r2, #2
 80031b8:	d1db      	bne.n	8003172 <HAL_I2C_Init+0x82>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	e7d7      	b.n	8003172 <HAL_I2C_Init+0x82>
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	080030e3 	.word	0x080030e3
 80031c8:	080030e5 	.word	0x080030e5
 80031cc:	080030e7 	.word	0x080030e7
 80031d0:	080013d1 	.word	0x080013d1
 80031d4:	080030e9 	.word	0x080030e9
 80031d8:	080030eb 	.word	0x080030eb
 80031dc:	080030ed 	.word	0x080030ed
 80031e0:	080030ef 	.word	0x080030ef
 80031e4:	080030e1 	.word	0x080030e1
 80031e8:	08001351 	.word	0x08001351
 80031ec:	080011a1 	.word	0x080011a1
 80031f0:	ffff7fff 	.word	0xffff7fff
 80031f4:	f0ffffff 	.word	0xf0ffffff
 80031f8:	02008000 	.word	0x02008000

080031fc <HAL_I2C_Slave_Transmit_IT>:
{
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fe:	0003      	movs	r3, r0
 8003200:	3341      	adds	r3, #65	; 0x41
 8003202:	781d      	ldrb	r5, [r3, #0]
    return HAL_BUSY;
 8003204:	2402      	movs	r4, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003206:	b2ee      	uxtb	r6, r5
 8003208:	2d20      	cmp	r5, #32
 800320a:	d11a      	bne.n	8003242 <HAL_I2C_Slave_Transmit_IT+0x46>
    __HAL_LOCK(hi2c);
 800320c:	0005      	movs	r5, r0
 800320e:	3540      	adds	r5, #64	; 0x40
 8003210:	782f      	ldrb	r7, [r5, #0]
 8003212:	2f01      	cmp	r7, #1
 8003214:	d015      	beq.n	8003242 <HAL_I2C_Slave_Transmit_IT+0x46>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003216:	341f      	adds	r4, #31
 8003218:	701c      	strb	r4, [r3, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800321a:	2400      	movs	r4, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800321c:	705e      	strb	r6, [r3, #1]
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800321e:	6806      	ldr	r6, [r0, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003220:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003222:	6873      	ldr	r3, [r6, #4]
 8003224:	4f08      	ldr	r7, [pc, #32]	; (8003248 <HAL_I2C_Slave_Transmit_IT+0x4c>)
 8003226:	403b      	ands	r3, r7
 8003228:	6073      	str	r3, [r6, #4]
    hi2c->XferCount   = Size;
 800322a:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800322c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800322e:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003230:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_I2C_Slave_Transmit_IT+0x50>)
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003234:	4906      	ldr	r1, [pc, #24]	; (8003250 <HAL_I2C_Slave_Transmit_IT+0x54>)
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003236:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_I2C_Slave_Transmit_IT+0x58>)
 800323a:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 800323c:	702c      	strb	r4, [r5, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800323e:	f7ff fac1 	bl	80027c4 <I2C_Enable_IRQ>
}
 8003242:	0020      	movs	r0, r4
 8003244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	ffff7fff 	.word	0xffff7fff
 800324c:	ffff0000 	.word	0xffff0000
 8003250:	00008001 	.word	0x00008001
 8003254:	08002fb1 	.word	0x08002fb1

08003258 <HAL_I2C_Slave_Receive_IT>:
{
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	0003      	movs	r3, r0
 800325c:	3341      	adds	r3, #65	; 0x41
 800325e:	781d      	ldrb	r5, [r3, #0]
    return HAL_BUSY;
 8003260:	2402      	movs	r4, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	b2ee      	uxtb	r6, r5
 8003264:	2d20      	cmp	r5, #32
 8003266:	d11a      	bne.n	800329e <HAL_I2C_Slave_Receive_IT+0x46>
    __HAL_LOCK(hi2c);
 8003268:	0005      	movs	r5, r0
 800326a:	3540      	adds	r5, #64	; 0x40
 800326c:	782f      	ldrb	r7, [r5, #0]
 800326e:	2f01      	cmp	r7, #1
 8003270:	d015      	beq.n	800329e <HAL_I2C_Slave_Receive_IT+0x46>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003272:	3420      	adds	r4, #32
 8003274:	701c      	strb	r4, [r3, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003276:	2400      	movs	r4, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003278:	705e      	strb	r6, [r3, #1]
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800327a:	6806      	ldr	r6, [r0, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800327c:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800327e:	6873      	ldr	r3, [r6, #4]
 8003280:	4f08      	ldr	r7, [pc, #32]	; (80032a4 <HAL_I2C_Slave_Receive_IT+0x4c>)
 8003282:	403b      	ands	r3, r7
 8003284:	6073      	str	r3, [r6, #4]
    hi2c->XferCount   = Size;
 8003286:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003288:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800328a:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800328c:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_I2C_Slave_Receive_IT+0x50>)
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003290:	4906      	ldr	r1, [pc, #24]	; (80032ac <HAL_I2C_Slave_Receive_IT+0x54>)
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003292:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_I2C_Slave_Receive_IT+0x58>)
 8003296:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8003298:	702c      	strb	r4, [r5, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800329a:	f7ff fa93 	bl	80027c4 <I2C_Enable_IRQ>
}
 800329e:	0020      	movs	r0, r4
 80032a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	ffff7fff 	.word	0xffff7fff
 80032a8:	ffff0000 	.word	0xffff0000
 80032ac:	00008002 	.word	0x00008002
 80032b0:	08002fb1 	.word	0x08002fb1

080032b4 <HAL_I2C_EnableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b4:	0002      	movs	r2, r0
{
 80032b6:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b8:	3241      	adds	r2, #65	; 0x41
 80032ba:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032be:	2920      	cmp	r1, #32
 80032c0:	d108      	bne.n	80032d4 <HAL_I2C_EnableListen_IT+0x20>
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80032c2:	2180      	movs	r1, #128	; 0x80
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032c4:	3326      	adds	r3, #38	; 0x26
 80032c6:	7013      	strb	r3, [r2, #0]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_I2C_EnableListen_IT+0x24>)
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80032ca:	0209      	lsls	r1, r1, #8
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80032cc:	6343      	str	r3, [r0, #52]	; 0x34
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80032ce:	f7ff fa79 	bl	80027c4 <I2C_Enable_IRQ>
    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	bd10      	pop	{r4, pc}
 80032d8:	08002fb1 	.word	0x08002fb1

080032dc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032dc:	6803      	ldr	r3, [r0, #0]
{
 80032de:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032e0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032e2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80032e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d000      	beq.n	80032ec <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 80032ea:	4798      	blx	r3
}
 80032ec:	bd10      	pop	{r4, pc}

080032ee <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032ee:	6803      	ldr	r3, [r0, #0]
{
 80032f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032f2:	699c      	ldr	r4, [r3, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80032f4:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032f6:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80032f8:	05e5      	lsls	r5, r4, #23
 80032fa:	d508      	bpl.n	800330e <HAL_I2C_ER_IRQHandler+0x20>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032fc:	09d5      	lsrs	r5, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80032fe:	420d      	tst	r5, r1
 8003300:	d005      	beq.n	800330e <HAL_I2C_ER_IRQHandler+0x20>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003302:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8003304:	4329      	orrs	r1, r5
 8003306:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	0049      	lsls	r1, r1, #1
 800330c:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800330e:	2101      	movs	r1, #1
 8003310:	0565      	lsls	r5, r4, #21
 8003312:	d509      	bpl.n	8003328 <HAL_I2C_ER_IRQHandler+0x3a>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003314:	09d5      	lsrs	r5, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003316:	420d      	tst	r5, r1
 8003318:	d006      	beq.n	8003328 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800331a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800331c:	3107      	adds	r1, #7
 800331e:	4329      	orrs	r1, r5
 8003320:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	00c9      	lsls	r1, r1, #3
 8003326:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003328:	2101      	movs	r1, #1
 800332a:	05a4      	lsls	r4, r4, #22
 800332c:	d509      	bpl.n	8003342 <HAL_I2C_ER_IRQHandler+0x54>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800332e:	09d2      	lsrs	r2, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003330:	420a      	tst	r2, r1
 8003332:	d006      	beq.n	8003342 <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003334:	2202      	movs	r2, #2
 8003336:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003338:	430a      	orrs	r2, r1
 800333a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	61da      	str	r2, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003342:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8003344:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003346:	4219      	tst	r1, r3
 8003348:	d001      	beq.n	800334e <HAL_I2C_ER_IRQHandler+0x60>
    I2C_ITError(hi2c, tmperror);
 800334a:	f7ff fb29 	bl	80029a0 <I2C_ITError>
}
 800334e:	bd70      	pop	{r4, r5, r6, pc}

08003350 <HAL_I2C_GetState>:
  return hi2c->State;
 8003350:	3041      	adds	r0, #65	; 0x41
 8003352:	7800      	ldrb	r0, [r0, #0]
 8003354:	b2c0      	uxtb	r0, r0
}
 8003356:	4770      	bx	lr

08003358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003358:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	0004      	movs	r4, r0
 800335c:	3441      	adds	r4, #65	; 0x41
 800335e:	7822      	ldrb	r2, [r4, #0]
{
 8003360:	0003      	movs	r3, r0
 8003362:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003364:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003366:	b2d6      	uxtb	r6, r2
 8003368:	2a20      	cmp	r2, #32
 800336a:	d118      	bne.n	800339e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800336c:	001d      	movs	r5, r3
 800336e:	3540      	adds	r5, #64	; 0x40
 8003370:	782a      	ldrb	r2, [r5, #0]
 8003372:	2a01      	cmp	r2, #1
 8003374:	d013      	beq.n	800339e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3a23      	subs	r2, #35	; 0x23
 800337e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003380:	4807      	ldr	r0, [pc, #28]	; (80033a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003382:	4391      	bics	r1, r2
 8003384:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800338a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800338c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	4339      	orrs	r1, r7
 8003392:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800339a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800339c:	7028      	strb	r0, [r5, #0]
  }
}
 800339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a0:	ffffefff 	.word	0xffffefff

080033a4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a4:	0002      	movs	r2, r0
{
 80033a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	3241      	adds	r2, #65	; 0x41
 80033aa:	7814      	ldrb	r4, [r2, #0]
{
 80033ac:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ae:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80033b0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b2:	2c20      	cmp	r4, #32
 80033b4:	d117      	bne.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80033b6:	001c      	movs	r4, r3
 80033b8:	3440      	adds	r4, #64	; 0x40
 80033ba:	7826      	ldrb	r6, [r4, #0]
 80033bc:	2e01      	cmp	r6, #1
 80033be:	d012      	beq.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	3022      	adds	r0, #34	; 0x22
 80033c2:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3823      	subs	r0, #35	; 0x23
 80033c8:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80033ca:	4f07      	ldr	r7, [pc, #28]	; (80033e8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80033cc:	4386      	bics	r6, r0
 80033ce:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80033d0:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80033d2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80033d4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80033d6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80033d8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	4308      	orrs	r0, r1
 80033de:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80033e0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80033e4:	7020      	strb	r0, [r4, #0]
  }
}
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e8:	fffff0ff 	.word	0xfffff0ff

080033ec <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033ec:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80033f0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80033f2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80033f4:	4022      	ands	r2, r4
 80033f6:	2a08      	cmp	r2, #8
 80033f8:	d031      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x72>
 80033fa:	2a0c      	cmp	r2, #12
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x26>
 80033fe:	2a04      	cmp	r2, #4
 8003400:	d125      	bne.n	800344e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003402:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003406:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003408:	17c0      	asrs	r0, r0, #31
 800340a:	4018      	ands	r0, r3
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <HAL_RCC_GetSysClockFreq+0x80>)
 800340e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003410:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003412:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003414:	4816      	ldr	r0, [pc, #88]	; (8003470 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003416:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003418:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800341a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800341c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800341e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003420:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003422:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003424:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003426:	4211      	tst	r1, r2
 8003428:	d009      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <HAL_RCC_GetSysClockFreq+0x88>)
 800342c:	2300      	movs	r3, #0
 800342e:	2100      	movs	r1, #0
 8003430:	f7fc ff2a 	bl	8000288 <__aeabi_lmul>
 8003434:	0022      	movs	r2, r4
 8003436:	2300      	movs	r3, #0
 8003438:	f7fc ff06 	bl	8000248 <__aeabi_uldivmod>
 800343c:	e7e8      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2310      	movs	r3, #16
 8003442:	421a      	tst	r2, r3
 8003444:	d001      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003448:	e7f0      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800344a:	4a08      	ldr	r2, [pc, #32]	; (800346c <HAL_RCC_GetSysClockFreq+0x80>)
 800344c:	e7ee      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800344e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003450:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003452:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003458:	3301      	adds	r3, #1
 800345a:	4098      	lsls	r0, r3
      break;
 800345c:	e7d8      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800345e:	4805      	ldr	r0, [pc, #20]	; (8003474 <HAL_RCC_GetSysClockFreq+0x88>)
 8003460:	e7d6      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x24>
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	40021000 	.word	0x40021000
 8003468:	ff48e500 	.word	0xff48e500
 800346c:	00f42400 	.word	0x00f42400
 8003470:	08004d0e 	.word	0x08004d0e
 8003474:	007a1200 	.word	0x007a1200
 8003478:	003d0900 	.word	0x003d0900

0800347c <HAL_RCC_OscConfig>:
{
 800347c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347e:	0005      	movs	r5, r0
 8003480:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003482:	2800      	cmp	r0, #0
 8003484:	d05a      	beq.n	800353c <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003486:	230c      	movs	r3, #12
 8003488:	4cbe      	ldr	r4, [pc, #760]	; (8003784 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003490:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	025b      	lsls	r3, r3, #9
 8003496:	0019      	movs	r1, r3
 8003498:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349a:	07d2      	lsls	r2, r2, #31
 800349c:	d442      	bmi.n	8003524 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	682b      	ldr	r3, [r5, #0]
 80034a0:	079b      	lsls	r3, r3, #30
 80034a2:	d500      	bpl.n	80034a6 <HAL_RCC_OscConfig+0x2a>
 80034a4:	e08b      	b.n	80035be <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	06db      	lsls	r3, r3, #27
 80034aa:	d529      	bpl.n	8003500 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ac:	2e00      	cmp	r6, #0
 80034ae:	d000      	beq.n	80034b2 <HAL_RCC_OscConfig+0x36>
 80034b0:	e0dc      	b.n	800366c <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	059b      	lsls	r3, r3, #22
 80034b6:	d502      	bpl.n	80034be <HAL_RCC_OscConfig+0x42>
 80034b8:	69eb      	ldr	r3, [r5, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d03e      	beq.n	800353c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034be:	6862      	ldr	r2, [r4, #4]
 80034c0:	49b1      	ldr	r1, [pc, #708]	; (8003788 <HAL_RCC_OscConfig+0x30c>)
 80034c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80034c4:	400a      	ands	r2, r1
 80034c6:	431a      	orrs	r2, r3
 80034c8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ca:	6861      	ldr	r1, [r4, #4]
 80034cc:	6a2a      	ldr	r2, [r5, #32]
 80034ce:	0209      	lsls	r1, r1, #8
 80034d0:	0a09      	lsrs	r1, r1, #8
 80034d2:	0612      	lsls	r2, r2, #24
 80034d4:	430a      	orrs	r2, r1
 80034d6:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	0b5b      	lsrs	r3, r3, #13
 80034dc:	3301      	adds	r3, #1
 80034de:	0212      	lsls	r2, r2, #8
 80034e0:	409a      	lsls	r2, r3
 80034e2:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80034e4:	68e1      	ldr	r1, [r4, #12]
 80034e6:	060a      	lsls	r2, r1, #24
 80034e8:	49a8      	ldr	r1, [pc, #672]	; (800378c <HAL_RCC_OscConfig+0x310>)
 80034ea:	0f12      	lsrs	r2, r2, #28
 80034ec:	5c8a      	ldrb	r2, [r1, r2]
 80034ee:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034f0:	4aa7      	ldr	r2, [pc, #668]	; (8003790 <HAL_RCC_OscConfig+0x314>)
 80034f2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80034f4:	4ba7      	ldr	r3, [pc, #668]	; (8003794 <HAL_RCC_OscConfig+0x318>)
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	f7fe fb6c 	bl	8001bd4 <HAL_InitTick>
        if(status != HAL_OK)
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d134      	bne.n	800356a <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	071b      	lsls	r3, r3, #28
 8003504:	d500      	bpl.n	8003508 <HAL_RCC_OscConfig+0x8c>
 8003506:	e0e8      	b.n	80036da <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	075b      	lsls	r3, r3, #29
 800350c:	d500      	bpl.n	8003510 <HAL_RCC_OscConfig+0x94>
 800350e:	e10a      	b.n	8003726 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	069b      	lsls	r3, r3, #26
 8003514:	d500      	bpl.n	8003518 <HAL_RCC_OscConfig+0x9c>
 8003516:	e18e      	b.n	8003836 <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003518:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d000      	beq.n	8003520 <HAL_RCC_OscConfig+0xa4>
 800351e:	e1bd      	b.n	800389c <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8003520:	2000      	movs	r0, #0
 8003522:	e022      	b.n	800356a <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003524:	2e08      	cmp	r6, #8
 8003526:	d003      	beq.n	8003530 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003528:	2e0c      	cmp	r6, #12
 800352a:	d109      	bne.n	8003540 <HAL_RCC_OscConfig+0xc4>
 800352c:	2f00      	cmp	r7, #0
 800352e:	d007      	beq.n	8003540 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	039b      	lsls	r3, r3, #14
 8003534:	d5b3      	bpl.n	800349e <HAL_RCC_OscConfig+0x22>
 8003536:	686b      	ldr	r3, [r5, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1b0      	bne.n	800349e <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 800353c:	2001      	movs	r0, #1
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	686a      	ldr	r2, [r5, #4]
 8003542:	428a      	cmp	r2, r1
 8003544:	d113      	bne.n	800356e <HAL_RCC_OscConfig+0xf2>
 8003546:	6822      	ldr	r2, [r4, #0]
 8003548:	4313      	orrs	r3, r2
 800354a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800354c:	f7fe fb86 	bl	8001c5c <HAL_GetTick>
 8003550:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003552:	2280      	movs	r2, #128	; 0x80
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	0292      	lsls	r2, r2, #10
 8003558:	4213      	tst	r3, r2
 800355a:	d1a0      	bne.n	800349e <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fb7e 	bl	8001c5c <HAL_GetTick>
 8003560:	9b00      	ldr	r3, [sp, #0]
 8003562:	1ac0      	subs	r0, r0, r3
 8003564:	2864      	cmp	r0, #100	; 0x64
 8003566:	d9f4      	bls.n	8003552 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8003568:	2003      	movs	r0, #3
}
 800356a:	b005      	add	sp, #20
 800356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356e:	21a0      	movs	r1, #160	; 0xa0
 8003570:	02c9      	lsls	r1, r1, #11
 8003572:	428a      	cmp	r2, r1
 8003574:	d105      	bne.n	8003582 <HAL_RCC_OscConfig+0x106>
 8003576:	2280      	movs	r2, #128	; 0x80
 8003578:	6821      	ldr	r1, [r4, #0]
 800357a:	02d2      	lsls	r2, r2, #11
 800357c:	430a      	orrs	r2, r1
 800357e:	6022      	str	r2, [r4, #0]
 8003580:	e7e1      	b.n	8003546 <HAL_RCC_OscConfig+0xca>
 8003582:	6821      	ldr	r1, [r4, #0]
 8003584:	4884      	ldr	r0, [pc, #528]	; (8003798 <HAL_RCC_OscConfig+0x31c>)
 8003586:	4001      	ands	r1, r0
 8003588:	6021      	str	r1, [r4, #0]
 800358a:	6821      	ldr	r1, [r4, #0]
 800358c:	400b      	ands	r3, r1
 800358e:	9303      	str	r3, [sp, #12]
 8003590:	9b03      	ldr	r3, [sp, #12]
 8003592:	4982      	ldr	r1, [pc, #520]	; (800379c <HAL_RCC_OscConfig+0x320>)
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	400b      	ands	r3, r1
 8003598:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800359a:	2a00      	cmp	r2, #0
 800359c:	d1d6      	bne.n	800354c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 800359e:	f7fe fb5d 	bl	8001c5c <HAL_GetTick>
 80035a2:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	0292      	lsls	r2, r2, #10
 80035aa:	4213      	tst	r3, r2
 80035ac:	d100      	bne.n	80035b0 <HAL_RCC_OscConfig+0x134>
 80035ae:	e776      	b.n	800349e <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fb54 	bl	8001c5c <HAL_GetTick>
 80035b4:	9b00      	ldr	r3, [sp, #0]
 80035b6:	1ac0      	subs	r0, r0, r3
 80035b8:	2864      	cmp	r0, #100	; 0x64
 80035ba:	d9f3      	bls.n	80035a4 <HAL_RCC_OscConfig+0x128>
 80035bc:	e7d4      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 80035be:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035c0:	2e04      	cmp	r6, #4
 80035c2:	d003      	beq.n	80035cc <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035c4:	2e0c      	cmp	r6, #12
 80035c6:	d124      	bne.n	8003612 <HAL_RCC_OscConfig+0x196>
 80035c8:	2f00      	cmp	r7, #0
 80035ca:	d122      	bne.n	8003612 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	075b      	lsls	r3, r3, #29
 80035d0:	d501      	bpl.n	80035d6 <HAL_RCC_OscConfig+0x15a>
 80035d2:	2a00      	cmp	r2, #0
 80035d4:	d0b2      	beq.n	800353c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d6:	6861      	ldr	r1, [r4, #4]
 80035d8:	692b      	ldr	r3, [r5, #16]
 80035da:	4871      	ldr	r0, [pc, #452]	; (80037a0 <HAL_RCC_OscConfig+0x324>)
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	4001      	ands	r1, r0
 80035e0:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80035e2:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	438b      	bics	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ee:	f7ff fefd 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80035f2:	68e3      	ldr	r3, [r4, #12]
 80035f4:	4a65      	ldr	r2, [pc, #404]	; (800378c <HAL_RCC_OscConfig+0x310>)
 80035f6:	061b      	lsls	r3, r3, #24
 80035f8:	0f1b      	lsrs	r3, r3, #28
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	40d8      	lsrs	r0, r3
 80035fe:	4b64      	ldr	r3, [pc, #400]	; (8003790 <HAL_RCC_OscConfig+0x314>)
 8003600:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003602:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_OscConfig+0x318>)
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	f7fe fae5 	bl	8001bd4 <HAL_InitTick>
      if(status != HAL_OK)
 800360a:	2800      	cmp	r0, #0
 800360c:	d100      	bne.n	8003610 <HAL_RCC_OscConfig+0x194>
 800360e:	e74a      	b.n	80034a6 <HAL_RCC_OscConfig+0x2a>
 8003610:	e7ab      	b.n	800356a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003612:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8003614:	2a00      	cmp	r2, #0
 8003616:	d018      	beq.n	800364a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003618:	2109      	movs	r1, #9
 800361a:	438b      	bics	r3, r1
 800361c:	4313      	orrs	r3, r2
 800361e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003620:	f7fe fb1c 	bl	8001c5c <HAL_GetTick>
 8003624:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003626:	2204      	movs	r2, #4
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	4213      	tst	r3, r2
 800362c:	d007      	beq.n	800363e <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	6862      	ldr	r2, [r4, #4]
 8003630:	692b      	ldr	r3, [r5, #16]
 8003632:	495b      	ldr	r1, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x324>)
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	400a      	ands	r2, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	6063      	str	r3, [r4, #4]
 800363c:	e733      	b.n	80034a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe fb0d 	bl	8001c5c <HAL_GetTick>
 8003642:	1bc0      	subs	r0, r0, r7
 8003644:	2802      	cmp	r0, #2
 8003646:	d9ee      	bls.n	8003626 <HAL_RCC_OscConfig+0x1aa>
 8003648:	e78e      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 800364a:	2201      	movs	r2, #1
 800364c:	4393      	bics	r3, r2
 800364e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003650:	f7fe fb04 	bl	8001c5c <HAL_GetTick>
 8003654:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003656:	2204      	movs	r2, #4
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	4213      	tst	r3, r2
 800365c:	d100      	bne.n	8003660 <HAL_RCC_OscConfig+0x1e4>
 800365e:	e722      	b.n	80034a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003660:	f7fe fafc 	bl	8001c5c <HAL_GetTick>
 8003664:	1bc0      	subs	r0, r0, r7
 8003666:	2802      	cmp	r0, #2
 8003668:	d9f5      	bls.n	8003656 <HAL_RCC_OscConfig+0x1da>
 800366a:	e77d      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800366c:	69eb      	ldr	r3, [r5, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d020      	beq.n	80036b4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4313      	orrs	r3, r2
 800367a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800367c:	f7fe faee 	bl	8001c5c <HAL_GetTick>
 8003680:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	4213      	tst	r3, r2
 800368a:	d00d      	beq.n	80036a8 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800368c:	6863      	ldr	r3, [r4, #4]
 800368e:	4a3e      	ldr	r2, [pc, #248]	; (8003788 <HAL_RCC_OscConfig+0x30c>)
 8003690:	4013      	ands	r3, r2
 8003692:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003694:	4313      	orrs	r3, r2
 8003696:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003698:	6862      	ldr	r2, [r4, #4]
 800369a:	6a2b      	ldr	r3, [r5, #32]
 800369c:	0212      	lsls	r2, r2, #8
 800369e:	061b      	lsls	r3, r3, #24
 80036a0:	0a12      	lsrs	r2, r2, #8
 80036a2:	4313      	orrs	r3, r2
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	e72b      	b.n	8003500 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a8:	f7fe fad8 	bl	8001c5c <HAL_GetTick>
 80036ac:	1bc0      	subs	r0, r0, r7
 80036ae:	2802      	cmp	r0, #2
 80036b0:	d9e7      	bls.n	8003682 <HAL_RCC_OscConfig+0x206>
 80036b2:	e759      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	4a3b      	ldr	r2, [pc, #236]	; (80037a4 <HAL_RCC_OscConfig+0x328>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80036bc:	f7fe face 	bl	8001c5c <HAL_GetTick>
 80036c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	4213      	tst	r3, r2
 80036ca:	d100      	bne.n	80036ce <HAL_RCC_OscConfig+0x252>
 80036cc:	e718      	b.n	8003500 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ce:	f7fe fac5 	bl	8001c5c <HAL_GetTick>
 80036d2:	1bc0      	subs	r0, r0, r7
 80036d4:	2802      	cmp	r0, #2
 80036d6:	d9f4      	bls.n	80036c2 <HAL_RCC_OscConfig+0x246>
 80036d8:	e746      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036da:	696a      	ldr	r2, [r5, #20]
 80036dc:	2301      	movs	r3, #1
 80036de:	2a00      	cmp	r2, #0
 80036e0:	d010      	beq.n	8003704 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80036e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80036e4:	4313      	orrs	r3, r2
 80036e6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80036e8:	f7fe fab8 	bl	8001c5c <HAL_GetTick>
 80036ec:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036ee:	2202      	movs	r2, #2
 80036f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036f2:	4213      	tst	r3, r2
 80036f4:	d000      	beq.n	80036f8 <HAL_RCC_OscConfig+0x27c>
 80036f6:	e707      	b.n	8003508 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fe fab0 	bl	8001c5c <HAL_GetTick>
 80036fc:	1bc0      	subs	r0, r0, r7
 80036fe:	2802      	cmp	r0, #2
 8003700:	d9f5      	bls.n	80036ee <HAL_RCC_OscConfig+0x272>
 8003702:	e731      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8003704:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003706:	439a      	bics	r2, r3
 8003708:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800370a:	f7fe faa7 	bl	8001c5c <HAL_GetTick>
 800370e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003710:	2202      	movs	r2, #2
 8003712:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003714:	4213      	tst	r3, r2
 8003716:	d100      	bne.n	800371a <HAL_RCC_OscConfig+0x29e>
 8003718:	e6f6      	b.n	8003508 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371a:	f7fe fa9f 	bl	8001c5c <HAL_GetTick>
 800371e:	1bc0      	subs	r0, r0, r7
 8003720:	2802      	cmp	r0, #2
 8003722:	d9f5      	bls.n	8003710 <HAL_RCC_OscConfig+0x294>
 8003724:	e720      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003726:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003728:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800372c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800372e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003730:	421a      	tst	r2, r3
 8003732:	d104      	bne.n	800373e <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003734:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003736:	4313      	orrs	r3, r2
 8003738:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800373a:	2301      	movs	r3, #1
 800373c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	2280      	movs	r2, #128	; 0x80
 8003740:	4f19      	ldr	r7, [pc, #100]	; (80037a8 <HAL_RCC_OscConfig+0x32c>)
 8003742:	0052      	lsls	r2, r2, #1
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4213      	tst	r3, r2
 8003748:	d008      	beq.n	800375c <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	68ab      	ldr	r3, [r5, #8]
 800374e:	0052      	lsls	r2, r2, #1
 8003750:	4293      	cmp	r3, r2
 8003752:	d12b      	bne.n	80037ac <HAL_RCC_OscConfig+0x330>
 8003754:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003756:	4313      	orrs	r3, r2
 8003758:	6523      	str	r3, [r4, #80]	; 0x50
 800375a:	e04c      	b.n	80037f6 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375c:	2280      	movs	r2, #128	; 0x80
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	0052      	lsls	r2, r2, #1
 8003762:	4313      	orrs	r3, r2
 8003764:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003766:	f7fe fa79 	bl	8001c5c <HAL_GetTick>
 800376a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	0052      	lsls	r2, r2, #1
 8003772:	4213      	tst	r3, r2
 8003774:	d1e9      	bne.n	800374a <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe fa71 	bl	8001c5c <HAL_GetTick>
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	1ac0      	subs	r0, r0, r3
 800377e:	2864      	cmp	r0, #100	; 0x64
 8003780:	d9f4      	bls.n	800376c <HAL_RCC_OscConfig+0x2f0>
 8003782:	e6f1      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
 8003784:	40021000 	.word	0x40021000
 8003788:	ffff1fff 	.word	0xffff1fff
 800378c:	08004cf6 	.word	0x08004cf6
 8003790:	20000010 	.word	0x20000010
 8003794:	20000018 	.word	0x20000018
 8003798:	fffeffff 	.word	0xfffeffff
 800379c:	fffbffff 	.word	0xfffbffff
 80037a0:	ffffe0ff 	.word	0xffffe0ff
 80037a4:	fffffeff 	.word	0xfffffeff
 80037a8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d116      	bne.n	80037de <HAL_RCC_OscConfig+0x362>
 80037b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037b2:	4a6b      	ldr	r2, [pc, #428]	; (8003960 <HAL_RCC_OscConfig+0x4e4>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	6523      	str	r3, [r4, #80]	; 0x50
 80037b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037ba:	4a6a      	ldr	r2, [pc, #424]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	4013      	ands	r3, r2
 80037be:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80037c0:	f7fe fa4c 	bl	8001c5c <HAL_GetTick>
 80037c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037ca:	0092      	lsls	r2, r2, #2
 80037cc:	4213      	tst	r3, r2
 80037ce:	d01a      	beq.n	8003806 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fe fa44 	bl	8001c5c <HAL_GetTick>
 80037d4:	4b64      	ldr	r3, [pc, #400]	; (8003968 <HAL_RCC_OscConfig+0x4ec>)
 80037d6:	1bc0      	subs	r0, r0, r7
 80037d8:	4298      	cmp	r0, r3
 80037da:	d9f4      	bls.n	80037c6 <HAL_RCC_OscConfig+0x34a>
 80037dc:	e6c4      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037de:	21a0      	movs	r1, #160	; 0xa0
 80037e0:	00c9      	lsls	r1, r1, #3
 80037e2:	428b      	cmp	r3, r1
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x39c>
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6523      	str	r3, [r4, #80]	; 0x50
 80037f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037f2:	431a      	orrs	r2, r3
 80037f4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80037f6:	f7fe fa31 	bl	8001c5c <HAL_GetTick>
 80037fa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003800:	0092      	lsls	r2, r2, #2
 8003802:	4213      	tst	r3, r2
 8003804:	d010      	beq.n	8003828 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8003806:	9b00      	ldr	r3, [sp, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d000      	beq.n	800380e <HAL_RCC_OscConfig+0x392>
 800380c:	e680      	b.n	8003510 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800380e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_RCC_OscConfig+0x4f0>)
 8003812:	4013      	ands	r3, r2
 8003814:	63a3      	str	r3, [r4, #56]	; 0x38
 8003816:	e67b      	b.n	8003510 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800381a:	4a51      	ldr	r2, [pc, #324]	; (8003960 <HAL_RCC_OscConfig+0x4e4>)
 800381c:	4013      	ands	r3, r2
 800381e:	6523      	str	r3, [r4, #80]	; 0x50
 8003820:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003822:	4a50      	ldr	r2, [pc, #320]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003824:	4013      	ands	r3, r2
 8003826:	e797      	b.n	8003758 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fe fa18 	bl	8001c5c <HAL_GetTick>
 800382c:	4b4e      	ldr	r3, [pc, #312]	; (8003968 <HAL_RCC_OscConfig+0x4ec>)
 800382e:	1bc0      	subs	r0, r0, r7
 8003830:	4298      	cmp	r0, r3
 8003832:	d9e3      	bls.n	80037fc <HAL_RCC_OscConfig+0x380>
 8003834:	e698      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003836:	69a9      	ldr	r1, [r5, #24]
 8003838:	2301      	movs	r3, #1
 800383a:	4a4d      	ldr	r2, [pc, #308]	; (8003970 <HAL_RCC_OscConfig+0x4f4>)
 800383c:	2900      	cmp	r1, #0
 800383e:	d018      	beq.n	8003872 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8003840:	68a1      	ldr	r1, [r4, #8]
 8003842:	4319      	orrs	r1, r3
 8003844:	60a1      	str	r1, [r4, #8]
 8003846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003848:	430b      	orrs	r3, r1
 800384a:	6363      	str	r3, [r4, #52]	; 0x34
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	6a11      	ldr	r1, [r2, #32]
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	430b      	orrs	r3, r1
 8003854:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003856:	f7fe fa01 	bl	8001c5c <HAL_GetTick>
 800385a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800385c:	2202      	movs	r2, #2
 800385e:	68a3      	ldr	r3, [r4, #8]
 8003860:	4213      	tst	r3, r2
 8003862:	d000      	beq.n	8003866 <HAL_RCC_OscConfig+0x3ea>
 8003864:	e658      	b.n	8003518 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003866:	f7fe f9f9 	bl	8001c5c <HAL_GetTick>
 800386a:	1bc0      	subs	r0, r0, r7
 800386c:	2802      	cmp	r0, #2
 800386e:	d9f5      	bls.n	800385c <HAL_RCC_OscConfig+0x3e0>
 8003870:	e67a      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 8003872:	68a1      	ldr	r1, [r4, #8]
 8003874:	4399      	bics	r1, r3
 8003876:	60a1      	str	r1, [r4, #8]
 8003878:	6a13      	ldr	r3, [r2, #32]
 800387a:	493e      	ldr	r1, [pc, #248]	; (8003974 <HAL_RCC_OscConfig+0x4f8>)
 800387c:	400b      	ands	r3, r1
 800387e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003880:	f7fe f9ec 	bl	8001c5c <HAL_GetTick>
 8003884:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003886:	2202      	movs	r2, #2
 8003888:	68a3      	ldr	r3, [r4, #8]
 800388a:	4213      	tst	r3, r2
 800388c:	d100      	bne.n	8003890 <HAL_RCC_OscConfig+0x414>
 800388e:	e643      	b.n	8003518 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003890:	f7fe f9e4 	bl	8001c5c <HAL_GetTick>
 8003894:	1bc0      	subs	r0, r0, r7
 8003896:	2802      	cmp	r0, #2
 8003898:	d9f5      	bls.n	8003886 <HAL_RCC_OscConfig+0x40a>
 800389a:	e665      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389c:	2e0c      	cmp	r6, #12
 800389e:	d043      	beq.n	8003928 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a0:	4a35      	ldr	r2, [pc, #212]	; (8003978 <HAL_RCC_OscConfig+0x4fc>)
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d12e      	bne.n	8003904 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 80038a6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038a8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4013      	ands	r3, r2
 80038ac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80038ae:	f7fe f9d5 	bl	8001c5c <HAL_GetTick>
 80038b2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038b4:	04bf      	lsls	r7, r7, #18
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	423b      	tst	r3, r7
 80038ba:	d11d      	bne.n	80038f8 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038bc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80038be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80038c0:	68e2      	ldr	r2, [r4, #12]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	492d      	ldr	r1, [pc, #180]	; (800397c <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80038c6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c8:	400a      	ands	r2, r1
 80038ca:	4313      	orrs	r3, r2
 80038cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80038ce:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	045b      	lsls	r3, r3, #17
 80038da:	4313      	orrs	r3, r2
 80038dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80038de:	f7fe f9bd 	bl	8001c5c <HAL_GetTick>
 80038e2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	4233      	tst	r3, r6
 80038e8:	d000      	beq.n	80038ec <HAL_RCC_OscConfig+0x470>
 80038ea:	e619      	b.n	8003520 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe f9b6 	bl	8001c5c <HAL_GetTick>
 80038f0:	1b40      	subs	r0, r0, r5
 80038f2:	2802      	cmp	r0, #2
 80038f4:	d9f6      	bls.n	80038e4 <HAL_RCC_OscConfig+0x468>
 80038f6:	e637      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fe f9b0 	bl	8001c5c <HAL_GetTick>
 80038fc:	1b80      	subs	r0, r0, r6
 80038fe:	2802      	cmp	r0, #2
 8003900:	d9d9      	bls.n	80038b6 <HAL_RCC_OscConfig+0x43a>
 8003902:	e631      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8003904:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003906:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003908:	4013      	ands	r3, r2
 800390a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800390c:	f7fe f9a6 	bl	8001c5c <HAL_GetTick>
 8003910:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003912:	04b6      	lsls	r6, r6, #18
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	4233      	tst	r3, r6
 8003918:	d100      	bne.n	800391c <HAL_RCC_OscConfig+0x4a0>
 800391a:	e601      	b.n	8003520 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe f99e 	bl	8001c5c <HAL_GetTick>
 8003920:	1b40      	subs	r0, r0, r5
 8003922:	2802      	cmp	r0, #2
 8003924:	d9f6      	bls.n	8003914 <HAL_RCC_OscConfig+0x498>
 8003926:	e61f      	b.n	8003568 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8003928:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392a:	2b01      	cmp	r3, #1
 800392c:	d100      	bne.n	8003930 <HAL_RCC_OscConfig+0x4b4>
 800392e:	e61c      	b.n	800356a <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003930:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003932:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003934:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003936:	0252      	lsls	r2, r2, #9
 8003938:	401a      	ands	r2, r3
 800393a:	428a      	cmp	r2, r1
 800393c:	d000      	beq.n	8003940 <HAL_RCC_OscConfig+0x4c4>
 800393e:	e5fd      	b.n	800353c <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003940:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003944:	0392      	lsls	r2, r2, #14
 8003946:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003948:	428a      	cmp	r2, r1
 800394a:	d000      	beq.n	800394e <HAL_RCC_OscConfig+0x4d2>
 800394c:	e5f6      	b.n	800353c <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800394e:	22c0      	movs	r2, #192	; 0xc0
 8003950:	0412      	lsls	r2, r2, #16
 8003952:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003954:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003956:	4293      	cmp	r3, r2
 8003958:	d100      	bne.n	800395c <HAL_RCC_OscConfig+0x4e0>
 800395a:	e5e1      	b.n	8003520 <HAL_RCC_OscConfig+0xa4>
 800395c:	e5ee      	b.n	800353c <HAL_RCC_OscConfig+0xc0>
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	fffffeff 	.word	0xfffffeff
 8003964:	fffffbff 	.word	0xfffffbff
 8003968:	00001388 	.word	0x00001388
 800396c:	efffffff 	.word	0xefffffff
 8003970:	40010000 	.word	0x40010000
 8003974:	ffffdfff 	.word	0xffffdfff
 8003978:	feffffff 	.word	0xfeffffff
 800397c:	ff02ffff 	.word	0xff02ffff

08003980 <HAL_RCC_ClockConfig>:
{
 8003980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003982:	1e04      	subs	r4, r0, #0
 8003984:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003988:	2001      	movs	r0, #1
}
 800398a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	2501      	movs	r5, #1
 800398e:	4e5b      	ldr	r6, [pc, #364]	; (8003afc <HAL_RCC_ClockConfig+0x17c>)
 8003990:	9a01      	ldr	r2, [sp, #4]
 8003992:	6833      	ldr	r3, [r6, #0]
 8003994:	402b      	ands	r3, r5
 8003996:	4293      	cmp	r3, r2
 8003998:	d331      	bcc.n	80039fe <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399a:	6822      	ldr	r2, [r4, #0]
 800399c:	0793      	lsls	r3, r2, #30
 800399e:	d443      	bmi.n	8003a28 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a0:	07d3      	lsls	r3, r2, #31
 80039a2:	d449      	bmi.n	8003a38 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	2501      	movs	r5, #1
 80039a6:	6833      	ldr	r3, [r6, #0]
 80039a8:	9a01      	ldr	r2, [sp, #4]
 80039aa:	402b      	ands	r3, r5
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d909      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b0:	6833      	ldr	r3, [r6, #0]
 80039b2:	43ab      	bics	r3, r5
 80039b4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80039b6:	f7fe f951 	bl	8001c5c <HAL_GetTick>
 80039ba:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039bc:	6833      	ldr	r3, [r6, #0]
 80039be:	422b      	tst	r3, r5
 80039c0:	d000      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x44>
 80039c2:	e08c      	b.n	8003ade <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	4d4e      	ldr	r5, [pc, #312]	; (8003b00 <HAL_RCC_ClockConfig+0x180>)
 80039c8:	0753      	lsls	r3, r2, #29
 80039ca:	d500      	bpl.n	80039ce <HAL_RCC_ClockConfig+0x4e>
 80039cc:	e08f      	b.n	8003aee <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	0713      	lsls	r3, r2, #28
 80039d0:	d506      	bpl.n	80039e0 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039d2:	68e9      	ldr	r1, [r5, #12]
 80039d4:	6923      	ldr	r3, [r4, #16]
 80039d6:	4a4b      	ldr	r2, [pc, #300]	; (8003b04 <HAL_RCC_ClockConfig+0x184>)
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	400a      	ands	r2, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039e0:	f7ff fd04 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80039e4:	68eb      	ldr	r3, [r5, #12]
 80039e6:	4a48      	ldr	r2, [pc, #288]	; (8003b08 <HAL_RCC_ClockConfig+0x188>)
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	0f1b      	lsrs	r3, r3, #28
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	40d8      	lsrs	r0, r3
 80039f0:	4b46      	ldr	r3, [pc, #280]	; (8003b0c <HAL_RCC_ClockConfig+0x18c>)
 80039f2:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80039f4:	4b46      	ldr	r3, [pc, #280]	; (8003b10 <HAL_RCC_ClockConfig+0x190>)
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	f7fe f8ec 	bl	8001bd4 <HAL_InitTick>
  if(status != HAL_OK)
 80039fc:	e7c5      	b.n	800398a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	6833      	ldr	r3, [r6, #0]
 8003a00:	9a01      	ldr	r2, [sp, #4]
 8003a02:	43ab      	bics	r3, r5
 8003a04:	4313      	orrs	r3, r2
 8003a06:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003a08:	f7fe f928 	bl	8001c5c <HAL_GetTick>
 8003a0c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	6833      	ldr	r3, [r6, #0]
 8003a10:	9a01      	ldr	r2, [sp, #4]
 8003a12:	402b      	ands	r3, r5
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d0c0      	beq.n	800399a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7fe f920 	bl	8001c5c <HAL_GetTick>
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_ClockConfig+0x194>)
 8003a1e:	1bc0      	subs	r0, r0, r7
 8003a20:	4298      	cmp	r0, r3
 8003a22:	d9f4      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8003a24:	2003      	movs	r0, #3
 8003a26:	e7b0      	b.n	800398a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	20f0      	movs	r0, #240	; 0xf0
 8003a2a:	4935      	ldr	r1, [pc, #212]	; (8003b00 <HAL_RCC_ClockConfig+0x180>)
 8003a2c:	68cb      	ldr	r3, [r1, #12]
 8003a2e:	4383      	bics	r3, r0
 8003a30:	68a0      	ldr	r0, [r4, #8]
 8003a32:	4303      	orrs	r3, r0
 8003a34:	60cb      	str	r3, [r1, #12]
 8003a36:	e7b3      	b.n	80039a0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a38:	4d31      	ldr	r5, [pc, #196]	; (8003b00 <HAL_RCC_ClockConfig+0x180>)
 8003a3a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a3c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3e:	2a02      	cmp	r2, #2
 8003a40:	d118      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a42:	039b      	lsls	r3, r3, #14
 8003a44:	d5a0      	bpl.n	8003988 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	2103      	movs	r1, #3
 8003a48:	68eb      	ldr	r3, [r5, #12]
 8003a4a:	438b      	bics	r3, r1
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8003a50:	f7fe f904 	bl	8001c5c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a54:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003a56:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d118      	bne.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a5c:	220c      	movs	r2, #12
 8003a5e:	68eb      	ldr	r3, [r5, #12]
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d09e      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a66:	f7fe f8f9 	bl	8001c5c <HAL_GetTick>
 8003a6a:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <HAL_RCC_ClockConfig+0x194>)
 8003a6c:	1bc0      	subs	r0, r0, r7
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	d9f4      	bls.n	8003a5c <HAL_RCC_ClockConfig+0xdc>
 8003a72:	e7d7      	b.n	8003a24 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a74:	2a03      	cmp	r2, #3
 8003a76:	d102      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	d4e4      	bmi.n	8003a46 <HAL_RCC_ClockConfig+0xc6>
 8003a7c:	e784      	b.n	8003988 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a7e:	2a01      	cmp	r2, #1
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a82:	075b      	lsls	r3, r3, #29
 8003a84:	d4df      	bmi.n	8003a46 <HAL_RCC_ClockConfig+0xc6>
 8003a86:	e77f      	b.n	8003988 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a88:	059b      	lsls	r3, r3, #22
 8003a8a:	d4dc      	bmi.n	8003a46 <HAL_RCC_ClockConfig+0xc6>
 8003a8c:	e77c      	b.n	8003988 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d10b      	bne.n	8003aaa <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a92:	220c      	movs	r2, #12
 8003a94:	68eb      	ldr	r3, [r5, #12]
 8003a96:	4013      	ands	r3, r2
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d083      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9c:	f7fe f8de 	bl	8001c5c <HAL_GetTick>
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_RCC_ClockConfig+0x194>)
 8003aa2:	1bc0      	subs	r0, r0, r7
 8003aa4:	4298      	cmp	r0, r3
 8003aa6:	d9f4      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x112>
 8003aa8:	e7bc      	b.n	8003a24 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d011      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003aae:	220c      	movs	r2, #12
 8003ab0:	68eb      	ldr	r3, [r5, #12]
 8003ab2:	4213      	tst	r3, r2
 8003ab4:	d100      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x138>
 8003ab6:	e775      	b.n	80039a4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fe f8d0 	bl	8001c5c <HAL_GetTick>
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <HAL_RCC_ClockConfig+0x194>)
 8003abe:	1bc0      	subs	r0, r0, r7
 8003ac0:	4298      	cmp	r0, r3
 8003ac2:	d9f4      	bls.n	8003aae <HAL_RCC_ClockConfig+0x12e>
 8003ac4:	e7ae      	b.n	8003a24 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac6:	f7fe f8c9 	bl	8001c5c <HAL_GetTick>
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_ClockConfig+0x194>)
 8003acc:	1bc0      	subs	r0, r0, r7
 8003ace:	4298      	cmp	r0, r3
 8003ad0:	d8a8      	bhi.n	8003a24 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad2:	220c      	movs	r2, #12
 8003ad4:	68eb      	ldr	r3, [r5, #12]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d1f4      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0x146>
 8003adc:	e762      	b.n	80039a4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ade:	f7fe f8bd 	bl	8001c5c <HAL_GetTick>
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_RCC_ClockConfig+0x194>)
 8003ae4:	1bc0      	subs	r0, r0, r7
 8003ae6:	4298      	cmp	r0, r3
 8003ae8:	d800      	bhi.n	8003aec <HAL_RCC_ClockConfig+0x16c>
 8003aea:	e767      	b.n	80039bc <HAL_RCC_ClockConfig+0x3c>
 8003aec:	e79a      	b.n	8003a24 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aee:	68eb      	ldr	r3, [r5, #12]
 8003af0:	4909      	ldr	r1, [pc, #36]	; (8003b18 <HAL_RCC_ClockConfig+0x198>)
 8003af2:	400b      	ands	r3, r1
 8003af4:	68e1      	ldr	r1, [r4, #12]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	60eb      	str	r3, [r5, #12]
 8003afa:	e768      	b.n	80039ce <HAL_RCC_ClockConfig+0x4e>
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40021000 	.word	0x40021000
 8003b04:	ffffc7ff 	.word	0xffffc7ff
 8003b08:	08004cf6 	.word	0x08004cf6
 8003b0c:	20000010 	.word	0x20000010
 8003b10:	20000018 	.word	0x20000018
 8003b14:	00001388 	.word	0x00001388
 8003b18:	fffff8ff 	.word	0xfffff8ff

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003b1e:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	055b      	lsls	r3, r3, #21
 8003b24:	0f5b      	lsrs	r3, r3, #29
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	4a03      	ldr	r2, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b2a:	6810      	ldr	r0, [r2, #0]
 8003b2c:	40d8      	lsrs	r0, r3
}
 8003b2e:	4770      	bx	lr
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08004d06 	.word	0x08004d06
 8003b38:	20000010 	.word	0x20000010

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	049b      	lsls	r3, r3, #18
 8003b44:	0f5b      	lsrs	r3, r3, #29
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	4a03      	ldr	r2, [pc, #12]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003b4a:	6810      	ldr	r0, [r2, #0]
 8003b4c:	40d8      	lsrs	r0, r3
}
 8003b4e:	4770      	bx	lr
 8003b50:	40021000 	.word	0x40021000
 8003b54:	08004d06 	.word	0x08004d06
 8003b58:	20000010 	.word	0x20000010

08003b5c <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b5c:	2382      	movs	r3, #130	; 0x82
{
 8003b5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b60:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b62:	011b      	lsls	r3, r3, #4
{
 8003b64:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b66:	421a      	tst	r2, r3
 8003b68:	d047      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8003b6c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6e:	4c60      	ldr	r4, [pc, #384]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003b70:	055b      	lsls	r3, r3, #21
 8003b72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8003b74:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	421a      	tst	r2, r3
 8003b78:	d104      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	2780      	movs	r7, #128	; 0x80
 8003b86:	4e5b      	ldr	r6, [pc, #364]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003b88:	007f      	lsls	r7, r7, #1
 8003b8a:	6833      	ldr	r3, [r6, #0]
 8003b8c:	423b      	tst	r3, r7
 8003b8e:	d06d      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b90:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b92:	21c0      	movs	r1, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b94:	001e      	movs	r6, r3
 8003b96:	22c0      	movs	r2, #192	; 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	0389      	lsls	r1, r1, #14
 8003b9c:	4008      	ands	r0, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b9e:	400e      	ands	r6, r1
 8003ba0:	0292      	lsls	r2, r2, #10
 8003ba2:	4286      	cmp	r6, r0
 8003ba4:	d103      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x52>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003ba6:	68a8      	ldr	r0, [r5, #8]
 8003ba8:	4001      	ands	r1, r0
 8003baa:	42b1      	cmp	r1, r6
 8003bac:	d007      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003bae:	0019      	movs	r1, r3
 8003bb0:	4011      	ands	r1, r2
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	d103      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bb6:	6821      	ldr	r1, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bba:	0389      	lsls	r1, r1, #14
 8003bbc:	d466      	bmi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003bbe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003bc0:	0008      	movs	r0, r1
 8003bc2:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003bc4:	4211      	tst	r1, r2
 8003bc6:	d162      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc8:	6869      	ldr	r1, [r5, #4]
 8003bca:	23c0      	movs	r3, #192	; 0xc0
 8003bcc:	000a      	movs	r2, r1
 8003bce:	029b      	lsls	r3, r3, #10
 8003bd0:	401a      	ands	r2, r3
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	4847      	ldr	r0, [pc, #284]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8003bda:	4003      	ands	r3, r0
 8003bdc:	20c0      	movs	r0, #192	; 0xc0
 8003bde:	0380      	lsls	r0, r0, #14
 8003be0:	4001      	ands	r1, r0
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003be8:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bea:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bec:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d103      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bf4:	4a41      	ldr	r2, [pc, #260]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	07da      	lsls	r2, r3, #31
 8003bfe:	d506      	bpl.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c00:	2003      	movs	r0, #3
 8003c02:	493b      	ldr	r1, [pc, #236]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c04:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003c06:	4382      	bics	r2, r0
 8003c08:	68e8      	ldr	r0, [r5, #12]
 8003c0a:	4302      	orrs	r2, r0
 8003c0c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c0e:	079a      	lsls	r2, r3, #30
 8003c10:	d506      	bpl.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c12:	200c      	movs	r0, #12
 8003c14:	4936      	ldr	r1, [pc, #216]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c16:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003c18:	4382      	bics	r2, r0
 8003c1a:	6928      	ldr	r0, [r5, #16]
 8003c1c:	4302      	orrs	r2, r0
 8003c1e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c20:	075a      	lsls	r2, r3, #29
 8003c22:	d506      	bpl.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c24:	4932      	ldr	r1, [pc, #200]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c26:	4836      	ldr	r0, [pc, #216]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c28:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003c2a:	4002      	ands	r2, r0
 8003c2c:	6968      	ldr	r0, [r5, #20]
 8003c2e:	4302      	orrs	r2, r0
 8003c30:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c32:	071a      	lsls	r2, r3, #28
 8003c34:	d506      	bpl.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c36:	492e      	ldr	r1, [pc, #184]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c38:	4832      	ldr	r0, [pc, #200]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c3a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003c3c:	4002      	ands	r2, r0
 8003c3e:	69a8      	ldr	r0, [r5, #24]
 8003c40:	4302      	orrs	r2, r0
 8003c42:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c44:	065a      	lsls	r2, r3, #25
 8003c46:	d506      	bpl.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c48:	4929      	ldr	r1, [pc, #164]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c4a:	482f      	ldr	r0, [pc, #188]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003c4e:	4002      	ands	r2, r0
 8003c50:	6a28      	ldr	r0, [r5, #32]
 8003c52:	4302      	orrs	r2, r0
 8003c54:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003c56:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	d517      	bpl.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003c5c:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c5e:	492b      	ldr	r1, [pc, #172]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c60:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c62:	400b      	ands	r3, r1
 8003c64:	69e9      	ldr	r1, [r5, #28]
 8003c66:	430b      	orrs	r3, r1
 8003c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c6a:	e00f      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	433b      	orrs	r3, r7
 8003c70:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003c72:	f7fd fff3 	bl	8001c5c <HAL_GetTick>
 8003c76:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	6833      	ldr	r3, [r6, #0]
 8003c7a:	423b      	tst	r3, r7
 8003c7c:	d188      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7e:	f7fd ffed 	bl	8001c5c <HAL_GetTick>
 8003c82:	9b01      	ldr	r3, [sp, #4]
 8003c84:	1ac0      	subs	r0, r0, r3
 8003c86:	2864      	cmp	r0, #100	; 0x64
 8003c88:	d9f6      	bls.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8003c8a:	2003      	movs	r0, #3
}
 8003c8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c8e:	6829      	ldr	r1, [r5, #0]
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003c90:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c92:	4298      	cmp	r0, r3
 8003c94:	d001      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c96:	068b      	lsls	r3, r1, #26
 8003c98:	d409      	bmi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x152>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c9a:	23c0      	movs	r3, #192	; 0xc0
 8003c9c:	68aa      	ldr	r2, [r5, #8]
 8003c9e:	029b      	lsls	r3, r3, #10
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	4283      	cmp	r3, r0
 8003ca4:	d100      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003ca6:	e78f      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003ca8:	050b      	lsls	r3, r1, #20
 8003caa:	d400      	bmi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cac:	e78c      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cae:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003cb0:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cb2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003cb4:	0312      	lsls	r2, r2, #12
 8003cb6:	4302      	orrs	r2, r0
 8003cb8:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cba:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003cbc:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cbe:	4815      	ldr	r0, [pc, #84]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003cc0:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc2:	4002      	ands	r2, r0
 8003cc4:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003cc6:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003cc8:	05cb      	lsls	r3, r1, #23
 8003cca:	d400      	bmi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003ccc:	e77c      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8003cce:	f7fd ffc5 	bl	8001c5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd2:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003cd4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd6:	00bf      	lsls	r7, r7, #2
 8003cd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003cda:	423b      	tst	r3, r7
 8003cdc:	d000      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003cde:	e773      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fd ffbc 	bl	8001c5c <HAL_GetTick>
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ce6:	1b80      	subs	r0, r0, r6
 8003ce8:	4298      	cmp	r0, r3
 8003cea:	d9f5      	bls.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cec:	e7cd      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	ffcfffff 	.word	0xffcfffff
 8003cfc:	efffffff 	.word	0xefffffff
 8003d00:	fffff3ff 	.word	0xfffff3ff
 8003d04:	ffffcfff 	.word	0xffffcfff
 8003d08:	fbffffff 	.word	0xfbffffff
 8003d0c:	fff3ffff 	.word	0xfff3ffff
 8003d10:	fffcffff 	.word	0xfffcffff
 8003d14:	fff7ffff 	.word	0xfff7ffff
 8003d18:	00001388 	.word	0x00001388

08003d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d20:	6925      	ldr	r5, [r4, #16]
 8003d22:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d24:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d26:	4329      	orrs	r1, r5
 8003d28:	6965      	ldr	r5, [r4, #20]
 8003d2a:	69c3      	ldr	r3, [r0, #28]
 8003d2c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d2e:	6810      	ldr	r0, [r2, #0]
 8003d30:	4d72      	ldr	r5, [pc, #456]	; (8003efc <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d32:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d34:	4028      	ands	r0, r5
 8003d36:	4301      	orrs	r1, r0
 8003d38:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3a:	6851      	ldr	r1, [r2, #4]
 8003d3c:	4870      	ldr	r0, [pc, #448]	; (8003f00 <UART_SetConfig+0x1e4>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d3e:	4d71      	ldr	r5, [pc, #452]	; (8003f04 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d40:	4001      	ands	r1, r0
 8003d42:	68e0      	ldr	r0, [r4, #12]
 8003d44:	4301      	orrs	r1, r0
 8003d46:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d48:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d4a:	42aa      	cmp	r2, r5
 8003d4c:	d001      	beq.n	8003d52 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d4e:	6a21      	ldr	r1, [r4, #32]
 8003d50:	4308      	orrs	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d52:	6891      	ldr	r1, [r2, #8]
 8003d54:	4e6c      	ldr	r6, [pc, #432]	; (8003f08 <UART_SetConfig+0x1ec>)
 8003d56:	4031      	ands	r1, r6
 8003d58:	4301      	orrs	r1, r0
 8003d5a:	6091      	str	r1, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5c:	496b      	ldr	r1, [pc, #428]	; (8003f0c <UART_SetConfig+0x1f0>)
 8003d5e:	428a      	cmp	r2, r1
 8003d60:	d10f      	bne.n	8003d82 <UART_SetConfig+0x66>
 8003d62:	2103      	movs	r1, #3
 8003d64:	4a6a      	ldr	r2, [pc, #424]	; (8003f10 <UART_SetConfig+0x1f4>)
 8003d66:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d68:	400a      	ands	r2, r1
 8003d6a:	3a01      	subs	r2, #1
 8003d6c:	4969      	ldr	r1, [pc, #420]	; (8003f14 <UART_SetConfig+0x1f8>)
 8003d6e:	2a02      	cmp	r2, #2
 8003d70:	d90f      	bls.n	8003d92 <UART_SetConfig+0x76>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	0212      	lsls	r2, r2, #8
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d100      	bne.n	8003d7c <UART_SetConfig+0x60>
 8003d7a:	e069      	b.n	8003e50 <UART_SetConfig+0x134>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d7c:	f7ff fede 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
        break;
 8003d80:	e09c      	b.n	8003ebc <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d82:	4965      	ldr	r1, [pc, #404]	; (8003f18 <UART_SetConfig+0x1fc>)
 8003d84:	428a      	cmp	r2, r1
 8003d86:	d113      	bne.n	8003db0 <UART_SetConfig+0x94>
 8003d88:	210c      	movs	r1, #12
 8003d8a:	4a61      	ldr	r2, [pc, #388]	; (8003f10 <UART_SetConfig+0x1f4>)
 8003d8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d8e:	400a      	ands	r2, r1
 8003d90:	4962      	ldr	r1, [pc, #392]	; (8003f1c <UART_SetConfig+0x200>)
 8003d92:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d94:	2280      	movs	r2, #128	; 0x80
 8003d96:	0212      	lsls	r2, r2, #8
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d000      	beq.n	8003d9e <UART_SetConfig+0x82>
 8003d9c:	e07f      	b.n	8003e9e <UART_SetConfig+0x182>
    switch (clocksource)
 8003d9e:	2808      	cmp	r0, #8
 8003da0:	d818      	bhi.n	8003dd4 <UART_SetConfig+0xb8>
 8003da2:	f7fc f9b1 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003da6:	5550      	.short	0x5550
 8003da8:	17791758 	.word	0x17791758
 8003dac:	1717      	.short	0x1717
 8003dae:	63          	.byte	0x63
 8003daf:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003db0:	42aa      	cmp	r2, r5
 8003db2:	d10f      	bne.n	8003dd4 <UART_SetConfig+0xb8>
 8003db4:	21c0      	movs	r1, #192	; 0xc0
 8003db6:	2080      	movs	r0, #128	; 0x80
 8003db8:	4a55      	ldr	r2, [pc, #340]	; (8003f10 <UART_SetConfig+0x1f4>)
 8003dba:	0109      	lsls	r1, r1, #4
 8003dbc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003dbe:	0100      	lsls	r0, r0, #4
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	4283      	cmp	r3, r0
 8003dc4:	d016      	beq.n	8003df4 <UART_SetConfig+0xd8>
 8003dc6:	d807      	bhi.n	8003dd8 <UART_SetConfig+0xbc>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_SetConfig+0xc6>
 8003dcc:	2280      	movs	r2, #128	; 0x80
 8003dce:	00d2      	lsls	r2, r2, #3
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d035      	beq.n	8003e40 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	e009      	b.n	8003dec <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	d1fb      	bne.n	8003dd4 <UART_SetConfig+0xb8>
 8003ddc:	2080      	movs	r0, #128	; 0x80
 8003dde:	0200      	lsls	r0, r0, #8
 8003de0:	e012      	b.n	8003e08 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7ff fe9b 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d10e      	bne.n	8003e08 <UART_SetConfig+0xec>
 8003dea:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003df0:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003df4:	2310      	movs	r3, #16
 8003df6:	6810      	ldr	r0, [r2, #0]
 8003df8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dfa:	4243      	negs	r3, r0
 8003dfc:	4158      	adcs	r0, r3
 8003dfe:	4b48      	ldr	r3, [pc, #288]	; (8003f20 <UART_SetConfig+0x204>)
 8003e00:	4240      	negs	r0, r0
 8003e02:	4018      	ands	r0, r3
 8003e04:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <UART_SetConfig+0x208>)
 8003e06:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e08:	2203      	movs	r2, #3
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	435a      	muls	r2, r3
 8003e0e:	4282      	cmp	r2, r0
 8003e10:	d8e0      	bhi.n	8003dd4 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e12:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e14:	4282      	cmp	r2, r0
 8003e16:	d3dd      	bcc.n	8003dd4 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e18:	2700      	movs	r7, #0
 8003e1a:	0e02      	lsrs	r2, r0, #24
 8003e1c:	0201      	lsls	r1, r0, #8
 8003e1e:	085e      	lsrs	r6, r3, #1
 8003e20:	1989      	adds	r1, r1, r6
 8003e22:	417a      	adcs	r2, r7
 8003e24:	0008      	movs	r0, r1
 8003e26:	0011      	movs	r1, r2
 8003e28:	001a      	movs	r2, r3
 8003e2a:	003b      	movs	r3, r7
 8003e2c:	f7fc fa0c 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e30:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <UART_SetConfig+0x20c>)
 8003e32:	18c2      	adds	r2, r0, r3
 8003e34:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d8cc      	bhi.n	8003dd4 <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	60d8      	str	r0, [r3, #12]
 8003e3e:	e7d4      	b.n	8003dea <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e40:	f7ff fad4 	bl	80033ec <HAL_RCC_GetSysClockFreq>
        break;
 8003e44:	e7cf      	b.n	8003de6 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e46:	f7ff fe69 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003e4c:	d0cd      	beq.n	8003dea <UART_SetConfig+0xce>
 8003e4e:	e00d      	b.n	8003e6c <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7ff fe74 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 8003e54:	e7f9      	b.n	8003e4a <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e58:	4a32      	ldr	r2, [pc, #200]	; (8003f24 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e60:	4243      	negs	r3, r0
 8003e62:	4158      	adcs	r0, r3
 8003e64:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <UART_SetConfig+0x204>)
 8003e66:	4240      	negs	r0, r0
 8003e68:	4003      	ands	r3, r0
 8003e6a:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e6c:	0058      	lsls	r0, r3, #1
 8003e6e:	6863      	ldr	r3, [r4, #4]
 8003e70:	6861      	ldr	r1, [r4, #4]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	18c0      	adds	r0, r0, r3
 8003e76:	f7fc f95b 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7a:	492d      	ldr	r1, [pc, #180]	; (8003f30 <UART_SetConfig+0x214>)
 8003e7c:	b282      	uxth	r2, r0
 8003e7e:	3a10      	subs	r2, #16
 8003e80:	0403      	lsls	r3, r0, #16
 8003e82:	428a      	cmp	r2, r1
 8003e84:	d8a6      	bhi.n	8003dd4 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e86:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e88:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e8a:	4390      	bics	r0, r2
 8003e8c:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003e8e:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e90:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8003e92:	4318      	orrs	r0, r3
 8003e94:	60d0      	str	r0, [r2, #12]
 8003e96:	e7a8      	b.n	8003dea <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e98:	f7ff faa8 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003e9c:	e7d5      	b.n	8003e4a <UART_SetConfig+0x12e>
    switch (clocksource)
 8003e9e:	2808      	cmp	r0, #8
 8003ea0:	d898      	bhi.n	8003dd4 <UART_SetConfig+0xb8>
 8003ea2:	f7fc f93b 	bl	800011c <__gnu_thumb1_case_shi>
 8003ea6:	0009      	.short	0x0009
 8003ea8:	000fff6b 	.word	0x000fff6b
 8003eac:	0025ff97 	.word	0x0025ff97
 8003eb0:	ff97ff97 	.word	0xff97ff97
 8003eb4:	0028ff97 	.word	0x0028ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7ff fe30 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d100      	bne.n	8003ec2 <UART_SetConfig+0x1a6>
 8003ec0:	e793      	b.n	8003dea <UART_SetConfig+0xce>
 8003ec2:	e00a      	b.n	8003eda <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <UART_SetConfig+0x1f4>)
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	2310      	movs	r3, #16
 8003eca:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003ecc:	4243      	negs	r3, r0
 8003ece:	4158      	adcs	r0, r3
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <UART_SetConfig+0x204>)
 8003ed2:	4240      	negs	r0, r0
 8003ed4:	4018      	ands	r0, r3
 8003ed6:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <UART_SetConfig+0x208>)
 8003ed8:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eda:	6863      	ldr	r3, [r4, #4]
 8003edc:	6861      	ldr	r1, [r4, #4]
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	1818      	adds	r0, r3, r0
 8003ee2:	f7fc f925 	bl	8000130 <__udivsi3>
 8003ee6:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee8:	0002      	movs	r2, r0
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <UART_SetConfig+0x214>)
 8003eec:	3a10      	subs	r2, #16
 8003eee:	e7a2      	b.n	8003e36 <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef0:	f7ff fa7c 	bl	80033ec <HAL_RCC_GetSysClockFreq>
        break;
 8003ef4:	e7e2      	b.n	8003ebc <UART_SetConfig+0x1a0>
    switch (clocksource)
 8003ef6:	2080      	movs	r0, #128	; 0x80
 8003ef8:	0200      	lsls	r0, r0, #8
 8003efa:	e7ee      	b.n	8003eda <UART_SetConfig+0x1be>
 8003efc:	efff69f3 	.word	0xefff69f3
 8003f00:	ffffcfff 	.word	0xffffcfff
 8003f04:	40004800 	.word	0x40004800
 8003f08:	fffff4ff 	.word	0xfffff4ff
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08004d17 	.word	0x08004d17
 8003f18:	40004400 	.word	0x40004400
 8003f1c:	08004d1a 	.word	0x08004d1a
 8003f20:	00b71b00 	.word	0x00b71b00
 8003f24:	003d0900 	.word	0x003d0900
 8003f28:	fffffd00 	.word	0xfffffd00
 8003f2c:	000ffcff 	.word	0x000ffcff
 8003f30:	0000ffef 	.word	0x0000ffef

08003f34 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f34:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003f36:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f38:	07da      	lsls	r2, r3, #31
 8003f3a:	d506      	bpl.n	8003f4a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f3c:	6801      	ldr	r1, [r0, #0]
 8003f3e:	4c28      	ldr	r4, [pc, #160]	; (8003fe0 <UART_AdvFeatureConfig+0xac>)
 8003f40:	684a      	ldr	r2, [r1, #4]
 8003f42:	4022      	ands	r2, r4
 8003f44:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003f46:	4322      	orrs	r2, r4
 8003f48:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f4a:	079a      	lsls	r2, r3, #30
 8003f4c:	d506      	bpl.n	8003f5c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f4e:	6801      	ldr	r1, [r0, #0]
 8003f50:	4c24      	ldr	r4, [pc, #144]	; (8003fe4 <UART_AdvFeatureConfig+0xb0>)
 8003f52:	684a      	ldr	r2, [r1, #4]
 8003f54:	4022      	ands	r2, r4
 8003f56:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003f58:	4322      	orrs	r2, r4
 8003f5a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f5c:	075a      	lsls	r2, r3, #29
 8003f5e:	d506      	bpl.n	8003f6e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f60:	6801      	ldr	r1, [r0, #0]
 8003f62:	4c21      	ldr	r4, [pc, #132]	; (8003fe8 <UART_AdvFeatureConfig+0xb4>)
 8003f64:	684a      	ldr	r2, [r1, #4]
 8003f66:	4022      	ands	r2, r4
 8003f68:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003f6a:	4322      	orrs	r2, r4
 8003f6c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f6e:	071a      	lsls	r2, r3, #28
 8003f70:	d506      	bpl.n	8003f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f72:	6801      	ldr	r1, [r0, #0]
 8003f74:	4c1d      	ldr	r4, [pc, #116]	; (8003fec <UART_AdvFeatureConfig+0xb8>)
 8003f76:	684a      	ldr	r2, [r1, #4]
 8003f78:	4022      	ands	r2, r4
 8003f7a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003f7c:	4322      	orrs	r2, r4
 8003f7e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f80:	06da      	lsls	r2, r3, #27
 8003f82:	d506      	bpl.n	8003f92 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f84:	6801      	ldr	r1, [r0, #0]
 8003f86:	4c1a      	ldr	r4, [pc, #104]	; (8003ff0 <UART_AdvFeatureConfig+0xbc>)
 8003f88:	688a      	ldr	r2, [r1, #8]
 8003f8a:	4022      	ands	r2, r4
 8003f8c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003f8e:	4322      	orrs	r2, r4
 8003f90:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f92:	069a      	lsls	r2, r3, #26
 8003f94:	d506      	bpl.n	8003fa4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f96:	6801      	ldr	r1, [r0, #0]
 8003f98:	4c16      	ldr	r4, [pc, #88]	; (8003ff4 <UART_AdvFeatureConfig+0xc0>)
 8003f9a:	688a      	ldr	r2, [r1, #8]
 8003f9c:	4022      	ands	r2, r4
 8003f9e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003fa0:	4322      	orrs	r2, r4
 8003fa2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa4:	065a      	lsls	r2, r3, #25
 8003fa6:	d510      	bpl.n	8003fca <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fa8:	6801      	ldr	r1, [r0, #0]
 8003faa:	4d13      	ldr	r5, [pc, #76]	; (8003ff8 <UART_AdvFeatureConfig+0xc4>)
 8003fac:	684a      	ldr	r2, [r1, #4]
 8003fae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003fb0:	402a      	ands	r2, r5
 8003fb2:	4322      	orrs	r2, r4
 8003fb4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	0352      	lsls	r2, r2, #13
 8003fba:	4294      	cmp	r4, r2
 8003fbc:	d105      	bne.n	8003fca <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fbe:	684a      	ldr	r2, [r1, #4]
 8003fc0:	4c0e      	ldr	r4, [pc, #56]	; (8003ffc <UART_AdvFeatureConfig+0xc8>)
 8003fc2:	4022      	ands	r2, r4
 8003fc4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003fc6:	4322      	orrs	r2, r4
 8003fc8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fca:	061b      	lsls	r3, r3, #24
 8003fcc:	d506      	bpl.n	8003fdc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fce:	6802      	ldr	r2, [r0, #0]
 8003fd0:	490b      	ldr	r1, [pc, #44]	; (8004000 <UART_AdvFeatureConfig+0xcc>)
 8003fd2:	6853      	ldr	r3, [r2, #4]
 8003fd4:	400b      	ands	r3, r1
 8003fd6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6053      	str	r3, [r2, #4]
  }
}
 8003fdc:	bd30      	pop	{r4, r5, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	fffdffff 	.word	0xfffdffff
 8003fe4:	fffeffff 	.word	0xfffeffff
 8003fe8:	fffbffff 	.word	0xfffbffff
 8003fec:	ffff7fff 	.word	0xffff7fff
 8003ff0:	ffffefff 	.word	0xffffefff
 8003ff4:	ffffdfff 	.word	0xffffdfff
 8003ff8:	ffefffff 	.word	0xffefffff
 8003ffc:	ff9fffff 	.word	0xff9fffff
 8004000:	fff7ffff 	.word	0xfff7ffff

08004004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004006:	2780      	movs	r7, #128	; 0x80
{
 8004008:	0004      	movs	r4, r0
 800400a:	000d      	movs	r5, r1
 800400c:	0016      	movs	r6, r2
 800400e:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004010:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	69d3      	ldr	r3, [r2, #28]
 8004016:	402b      	ands	r3, r5
 8004018:	1b5b      	subs	r3, r3, r5
 800401a:	4259      	negs	r1, r3
 800401c:	414b      	adcs	r3, r1
 800401e:	42b3      	cmp	r3, r6
 8004020:	d001      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2000      	movs	r0, #0
 8004024:	e028      	b.n	8004078 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8004026:	9b08      	ldr	r3, [sp, #32]
 8004028:	3301      	adds	r3, #1
 800402a:	d0f3      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7fd fe16 	bl	8001c5c <HAL_GetTick>
 8004030:	9b01      	ldr	r3, [sp, #4]
 8004032:	1ac0      	subs	r0, r0, r3
 8004034:	9b08      	ldr	r3, [sp, #32]
 8004036:	4298      	cmp	r0, r3
 8004038:	d801      	bhi.n	800403e <UART_WaitOnFlagUntilTimeout+0x3a>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11d      	bne.n	800407a <UART_WaitOnFlagUntilTimeout+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	2201      	movs	r2, #1
 8004044:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004048:	6821      	ldr	r1, [r4, #0]
 800404a:	4d1e      	ldr	r5, [pc, #120]	; (80040c4 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800404c:	680b      	ldr	r3, [r1, #0]
 800404e:	402b      	ands	r3, r5
 8004050:	600b      	str	r3, [r1, #0]
 8004052:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004056:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405e:	6821      	ldr	r1, [r4, #0]
 8004060:	688b      	ldr	r3, [r1, #8]
 8004062:	4393      	bics	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
 8004066:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800406a:	2320      	movs	r3, #32
 800406c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800406e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004070:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004072:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004074:	3474      	adds	r4, #116	; 0x74
 8004076:	7023      	strb	r3, [r4, #0]
}
 8004078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800407a:	2104      	movs	r1, #4
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	420a      	tst	r2, r1
 8004082:	d0c6      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	423a      	tst	r2, r7
 8004088:	d0c3      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800408a:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004090:	2201      	movs	r2, #1
 8004092:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004096:	6821      	ldr	r1, [r4, #0]
 8004098:	4d0a      	ldr	r5, [pc, #40]	; (80040c4 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800409a:	680b      	ldr	r3, [r1, #0]
 800409c:	402b      	ands	r3, r5
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	6821      	ldr	r1, [r4, #0]
 80040ae:	688b      	ldr	r3, [r1, #8]
 80040b0:	4393      	bics	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]
 80040b4:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80040b8:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ba:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80040bc:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040be:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040c0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80040c2:	e7d5      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0x6c>
 80040c4:	fffffe5f 	.word	0xfffffe5f

080040c8 <HAL_UART_Transmit>:
{
 80040c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ca:	b087      	sub	sp, #28
 80040cc:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80040ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80040d0:	0004      	movs	r4, r0
 80040d2:	000d      	movs	r5, r1
 80040d4:	0016      	movs	r6, r2
    return HAL_BUSY;
 80040d6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d151      	bne.n	8004180 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 80040dc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80040de:	2900      	cmp	r1, #0
 80040e0:	d04e      	beq.n	8004180 <HAL_UART_Transmit+0xb8>
 80040e2:	2a00      	cmp	r2, #0
 80040e4:	d04c      	beq.n	8004180 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	68a2      	ldr	r2, [r4, #8]
 80040ea:	015b      	lsls	r3, r3, #5
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d104      	bne.n	80040fa <HAL_UART_Transmit+0x32>
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80040f6:	4201      	tst	r1, r0
 80040f8:	d142      	bne.n	8004180 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 80040fa:	0023      	movs	r3, r4
 80040fc:	3374      	adds	r3, #116	; 0x74
 80040fe:	9303      	str	r3, [sp, #12]
 8004100:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8004102:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004104:	2b01      	cmp	r3, #1
 8004106:	d03b      	beq.n	8004180 <HAL_UART_Transmit+0xb8>
 8004108:	2301      	movs	r3, #1
 800410a:	9a03      	ldr	r2, [sp, #12]
 800410c:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410e:	2200      	movs	r2, #0
 8004110:	1d23      	adds	r3, r4, #4
 8004112:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004114:	2321      	movs	r3, #33	; 0x21
 8004116:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004118:	f7fd fda0 	bl	8001c5c <HAL_GetTick>
    huart->TxXferSize  = Size;
 800411c:	0023      	movs	r3, r4
 800411e:	3350      	adds	r3, #80	; 0x50
 8004120:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8004122:	3302      	adds	r3, #2
 8004124:	801e      	strh	r6, [r3, #0]
 8004126:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800412c:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800412e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004130:	015b      	lsls	r3, r3, #5
 8004132:	429a      	cmp	r2, r3
 8004134:	d104      	bne.n	8004140 <HAL_UART_Transmit+0x78>
 8004136:	6923      	ldr	r3, [r4, #16]
 8004138:	42b3      	cmp	r3, r6
 800413a:	d101      	bne.n	8004140 <HAL_UART_Transmit+0x78>
 800413c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800413e:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 8004140:	2300      	movs	r3, #0
 8004142:	9a03      	ldr	r2, [sp, #12]
 8004144:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 8004146:	0023      	movs	r3, r4
 8004148:	3352      	adds	r3, #82	; 0x52
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29a      	uxth	r2, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	9b05      	ldr	r3, [sp, #20]
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	0020      	movs	r0, r4
 800415a:	003b      	movs	r3, r7
 800415c:	f7ff ff52 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 8004160:	2800      	cmp	r0, #0
 8004162:	d10c      	bne.n	800417e <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8004164:	2320      	movs	r3, #32
 8004166:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8004168:	e00a      	b.n	8004180 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	9b05      	ldr	r3, [sp, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	003b      	movs	r3, r7
 8004174:	0020      	movs	r0, r4
 8004176:	f7ff ff45 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 800417a:	2800      	cmp	r0, #0
 800417c:	d002      	beq.n	8004184 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 800417e:	2003      	movs	r0, #3
}
 8004180:	b007      	add	sp, #28
 8004182:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004184:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004186:	2d00      	cmp	r5, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800418c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418e:	05db      	lsls	r3, r3, #23
 8004190:	0ddb      	lsrs	r3, r3, #23
 8004192:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004194:	9b04      	ldr	r3, [sp, #16]
 8004196:	9a04      	ldr	r2, [sp, #16]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	3b01      	subs	r3, #1
 800419c:	b29b      	uxth	r3, r3
 800419e:	8013      	strh	r3, [r2, #0]
 80041a0:	e7d1      	b.n	8004146 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80041a4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80041a8:	e7f4      	b.n	8004194 <HAL_UART_Transmit+0xcc>
	...

080041ac <HAL_UART_Receive>:
{
 80041ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ae:	b087      	sub	sp, #28
 80041b0:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80041b2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80041b4:	0004      	movs	r4, r0
 80041b6:	000f      	movs	r7, r1
 80041b8:	0015      	movs	r5, r2
    return HAL_BUSY;
 80041ba:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d144      	bne.n	800424a <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 80041c0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80041c2:	2900      	cmp	r1, #0
 80041c4:	d041      	beq.n	800424a <HAL_UART_Receive+0x9e>
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	d03f      	beq.n	800424a <HAL_UART_Receive+0x9e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	68a2      	ldr	r2, [r4, #8]
 80041ce:	015b      	lsls	r3, r3, #5
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d104      	bne.n	80041de <HAL_UART_Receive+0x32>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80041da:	4201      	tst	r1, r0
 80041dc:	d135      	bne.n	800424a <HAL_UART_Receive+0x9e>
    __HAL_LOCK(huart);
 80041de:	0026      	movs	r6, r4
 80041e0:	3674      	adds	r6, #116	; 0x74
 80041e2:	7833      	ldrb	r3, [r6, #0]
    return HAL_BUSY;
 80041e4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d02f      	beq.n	800424a <HAL_UART_Receive+0x9e>
 80041ea:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	2200      	movs	r2, #0
    __HAL_LOCK(huart);
 80041ee:	7033      	strb	r3, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f0:	1d23      	adds	r3, r4, #4
 80041f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041f4:	2322      	movs	r3, #34	; 0x22
 80041f6:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f8:	6622      	str	r2, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 80041fa:	f7fd fd2f 	bl	8001c5c <HAL_GetTick>
    huart->RxXferSize  = Size;
 80041fe:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8004200:	2180      	movs	r1, #128	; 0x80
 8004202:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 8004204:	3358      	adds	r3, #88	; 0x58
 8004206:	801d      	strh	r5, [r3, #0]
    huart->RxXferCount = Size;
 8004208:	805d      	strh	r5, [r3, #2]
    tickstart = HAL_GetTick();
 800420a:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 800420c:	0149      	lsls	r1, r1, #5
 800420e:	3304      	adds	r3, #4
 8004210:	428a      	cmp	r2, r1
 8004212:	d11e      	bne.n	8004252 <HAL_UART_Receive+0xa6>
 8004214:	6921      	ldr	r1, [r4, #16]
 8004216:	2900      	cmp	r1, #0
 8004218:	d119      	bne.n	800424e <HAL_UART_Receive+0xa2>
 800421a:	4925      	ldr	r1, [pc, #148]	; (80042b0 <HAL_UART_Receive+0x104>)
 800421c:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 800421e:	881b      	ldrh	r3, [r3, #0]
      pdata16bits = NULL;
 8004220:	2500      	movs	r5, #0
    uhMask = huart->Mask;
 8004222:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	015b      	lsls	r3, r3, #5
 8004228:	429a      	cmp	r2, r3
 800422a:	d104      	bne.n	8004236 <HAL_UART_Receive+0x8a>
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	42ab      	cmp	r3, r5
 8004230:	d101      	bne.n	8004236 <HAL_UART_Receive+0x8a>
 8004232:	003d      	movs	r5, r7
      pdata8bits  = NULL;
 8004234:	001f      	movs	r7, r3
    __HAL_UNLOCK(huart);
 8004236:	2300      	movs	r3, #0
 8004238:	7033      	strb	r3, [r6, #0]
    while (huart->RxXferCount > 0U)
 800423a:	0026      	movs	r6, r4
 800423c:	365a      	adds	r6, #90	; 0x5a
 800423e:	8833      	ldrh	r3, [r6, #0]
 8004240:	b298      	uxth	r0, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d117      	bne.n	8004276 <HAL_UART_Receive+0xca>
    huart->RxState = HAL_UART_STATE_READY;
 8004246:	3320      	adds	r3, #32
 8004248:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800424a:	b007      	add	sp, #28
 800424c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800424e:	21ff      	movs	r1, #255	; 0xff
 8004250:	e7e4      	b.n	800421c <HAL_UART_Receive+0x70>
 8004252:	2a00      	cmp	r2, #0
 8004254:	d104      	bne.n	8004260 <HAL_UART_Receive+0xb4>
 8004256:	6921      	ldr	r1, [r4, #16]
 8004258:	2900      	cmp	r1, #0
 800425a:	d0f8      	beq.n	800424e <HAL_UART_Receive+0xa2>
 800425c:	217f      	movs	r1, #127	; 0x7f
 800425e:	e7dd      	b.n	800421c <HAL_UART_Receive+0x70>
 8004260:	2180      	movs	r1, #128	; 0x80
 8004262:	0549      	lsls	r1, r1, #21
 8004264:	428a      	cmp	r2, r1
 8004266:	d104      	bne.n	8004272 <HAL_UART_Receive+0xc6>
 8004268:	6921      	ldr	r1, [r4, #16]
 800426a:	2900      	cmp	r1, #0
 800426c:	d0f6      	beq.n	800425c <HAL_UART_Receive+0xb0>
 800426e:	213f      	movs	r1, #63	; 0x3f
 8004270:	e7d4      	b.n	800421c <HAL_UART_Receive+0x70>
 8004272:	2100      	movs	r1, #0
 8004274:	e7d2      	b.n	800421c <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004276:	9b05      	ldr	r3, [sp, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2120      	movs	r1, #32
 800427e:	0020      	movs	r0, r4
 8004280:	9b04      	ldr	r3, [sp, #16]
 8004282:	f7ff febf 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 8004286:	2800      	cmp	r0, #0
 8004288:	d10f      	bne.n	80042aa <HAL_UART_Receive+0xfe>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	9a03      	ldr	r2, [sp, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 8004292:	2f00      	cmp	r7, #0
 8004294:	d106      	bne.n	80042a4 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004296:	802b      	strh	r3, [r5, #0]
        pdata16bits++;
 8004298:	3502      	adds	r5, #2
      huart->RxXferCount--;
 800429a:	8833      	ldrh	r3, [r6, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8033      	strh	r3, [r6, #0]
 80042a2:	e7ca      	b.n	800423a <HAL_UART_Receive+0x8e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80042a4:	703b      	strb	r3, [r7, #0]
        pdata8bits++;
 80042a6:	3701      	adds	r7, #1
 80042a8:	e7f7      	b.n	800429a <HAL_UART_Receive+0xee>
        return HAL_TIMEOUT;
 80042aa:	2003      	movs	r0, #3
 80042ac:	e7cd      	b.n	800424a <HAL_UART_Receive+0x9e>
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	000001ff 	.word	0x000001ff

080042b4 <UART_CheckIdleState>:
{
 80042b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	2600      	movs	r6, #0
{
 80042b8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	1d03      	adds	r3, r0, #4
 80042bc:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80042be:	f7fd fccd 	bl	8001c5c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80042c4:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	071b      	lsls	r3, r3, #28
 80042ca:	d416      	bmi.n	80042fa <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	075b      	lsls	r3, r3, #29
 80042d2:	d50a      	bpl.n	80042ea <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <UART_CheckIdleState+0x60>)
 80042d8:	2200      	movs	r2, #0
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	0020      	movs	r0, r4
 80042de:	002b      	movs	r3, r5
 80042e0:	03c9      	lsls	r1, r1, #15
 80042e2:	f7ff fe8f 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d112      	bne.n	8004310 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80042ea:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ec:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80042ee:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f2:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80042f4:	3474      	adds	r4, #116	; 0x74
 80042f6:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80042f8:	e00b      	b.n	8004312 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <UART_CheckIdleState+0x60>)
 80042fe:	0032      	movs	r2, r6
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	0389      	lsls	r1, r1, #14
 8004304:	0003      	movs	r3, r0
 8004306:	0020      	movs	r0, r4
 8004308:	f7ff fe7c 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 800430c:	2800      	cmp	r0, #0
 800430e:	d0dd      	beq.n	80042cc <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004310:	2003      	movs	r0, #3
}
 8004312:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004314:	01ffffff 	.word	0x01ffffff

08004318 <HAL_UART_Init>:
{
 8004318:	b510      	push	{r4, lr}
 800431a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800431e:	2001      	movs	r0, #1
}
 8004320:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8004328:	0002      	movs	r2, r0
 800432a:	3274      	adds	r2, #116	; 0x74
 800432c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800432e:	f7fd fbf9 	bl	8001b24 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004332:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004334:	2101      	movs	r1, #1
 8004336:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800433a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800433c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800433e:	438b      	bics	r3, r1
 8004340:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004342:	f7ff fceb 	bl	8003d1c <UART_SetConfig>
 8004346:	2801      	cmp	r0, #1
 8004348:	d0e9      	beq.n	800431e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8004350:	0020      	movs	r0, r4
 8004352:	f7ff fdef 	bl	8003f34 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	4907      	ldr	r1, [pc, #28]	; (8004378 <HAL_UART_Init+0x60>)
 800435a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800435c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004360:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	438a      	bics	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800436a:	2201      	movs	r2, #1
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004372:	f7ff ff9f 	bl	80042b4 <UART_CheckIdleState>
 8004376:	e7d3      	b.n	8004320 <HAL_UART_Init+0x8>
 8004378:	ffffb7ff 	.word	0xffffb7ff

0800437c <__errno>:
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <__errno+0x8>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	4770      	bx	lr
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	2000001c 	.word	0x2000001c

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	2600      	movs	r6, #0
 800438c:	4d0c      	ldr	r5, [pc, #48]	; (80043c0 <__libc_init_array+0x38>)
 800438e:	4c0d      	ldr	r4, [pc, #52]	; (80043c4 <__libc_init_array+0x3c>)
 8004390:	1b64      	subs	r4, r4, r5
 8004392:	10a4      	asrs	r4, r4, #2
 8004394:	42a6      	cmp	r6, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	2600      	movs	r6, #0
 800439a:	f000 fc8b 	bl	8004cb4 <_init>
 800439e:	4d0a      	ldr	r5, [pc, #40]	; (80043c8 <__libc_init_array+0x40>)
 80043a0:	4c0a      	ldr	r4, [pc, #40]	; (80043cc <__libc_init_array+0x44>)
 80043a2:	1b64      	subs	r4, r4, r5
 80043a4:	10a4      	asrs	r4, r4, #2
 80043a6:	42a6      	cmp	r6, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	00b3      	lsls	r3, r6, #2
 80043ae:	58eb      	ldr	r3, [r5, r3]
 80043b0:	4798      	blx	r3
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	00b3      	lsls	r3, r6, #2
 80043b8:	58eb      	ldr	r3, [r5, r3]
 80043ba:	4798      	blx	r3
 80043bc:	3601      	adds	r6, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	08004d64 	.word	0x08004d64
 80043c4:	08004d64 	.word	0x08004d64
 80043c8:	08004d64 	.word	0x08004d64
 80043cc:	08004d68 	.word	0x08004d68

080043d0 <memcpy>:
 80043d0:	2300      	movs	r3, #0
 80043d2:	b510      	push	{r4, lr}
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d100      	bne.n	80043da <memcpy+0xa>
 80043d8:	bd10      	pop	{r4, pc}
 80043da:	5ccc      	ldrb	r4, [r1, r3]
 80043dc:	54c4      	strb	r4, [r0, r3]
 80043de:	3301      	adds	r3, #1
 80043e0:	e7f8      	b.n	80043d4 <memcpy+0x4>

080043e2 <memset>:
 80043e2:	0003      	movs	r3, r0
 80043e4:	1882      	adds	r2, r0, r2
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d100      	bne.n	80043ec <memset+0xa>
 80043ea:	4770      	bx	lr
 80043ec:	7019      	strb	r1, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	e7f9      	b.n	80043e6 <memset+0x4>
	...

080043f4 <siprintf>:
 80043f4:	b40e      	push	{r1, r2, r3}
 80043f6:	b500      	push	{lr}
 80043f8:	490b      	ldr	r1, [pc, #44]	; (8004428 <siprintf+0x34>)
 80043fa:	b09c      	sub	sp, #112	; 0x70
 80043fc:	ab1d      	add	r3, sp, #116	; 0x74
 80043fe:	9002      	str	r0, [sp, #8]
 8004400:	9006      	str	r0, [sp, #24]
 8004402:	9107      	str	r1, [sp, #28]
 8004404:	9104      	str	r1, [sp, #16]
 8004406:	4809      	ldr	r0, [pc, #36]	; (800442c <siprintf+0x38>)
 8004408:	4909      	ldr	r1, [pc, #36]	; (8004430 <siprintf+0x3c>)
 800440a:	cb04      	ldmia	r3!, {r2}
 800440c:	9105      	str	r1, [sp, #20]
 800440e:	6800      	ldr	r0, [r0, #0]
 8004410:	a902      	add	r1, sp, #8
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	f000 f870 	bl	80044f8 <_svfiprintf_r>
 8004418:	2300      	movs	r3, #0
 800441a:	9a02      	ldr	r2, [sp, #8]
 800441c:	7013      	strb	r3, [r2, #0]
 800441e:	b01c      	add	sp, #112	; 0x70
 8004420:	bc08      	pop	{r3}
 8004422:	b003      	add	sp, #12
 8004424:	4718      	bx	r3
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	7fffffff 	.word	0x7fffffff
 800442c:	2000001c 	.word	0x2000001c
 8004430:	ffff0208 	.word	0xffff0208

08004434 <__ssputs_r>:
 8004434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004436:	688e      	ldr	r6, [r1, #8]
 8004438:	b085      	sub	sp, #20
 800443a:	0007      	movs	r7, r0
 800443c:	000c      	movs	r4, r1
 800443e:	9203      	str	r2, [sp, #12]
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	429e      	cmp	r6, r3
 8004444:	d83c      	bhi.n	80044c0 <__ssputs_r+0x8c>
 8004446:	2390      	movs	r3, #144	; 0x90
 8004448:	898a      	ldrh	r2, [r1, #12]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	421a      	tst	r2, r3
 800444e:	d034      	beq.n	80044ba <__ssputs_r+0x86>
 8004450:	6909      	ldr	r1, [r1, #16]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	6960      	ldr	r0, [r4, #20]
 8004456:	1a5b      	subs	r3, r3, r1
 8004458:	9302      	str	r3, [sp, #8]
 800445a:	2303      	movs	r3, #3
 800445c:	4343      	muls	r3, r0
 800445e:	0fdd      	lsrs	r5, r3, #31
 8004460:	18ed      	adds	r5, r5, r3
 8004462:	9b01      	ldr	r3, [sp, #4]
 8004464:	9802      	ldr	r0, [sp, #8]
 8004466:	3301      	adds	r3, #1
 8004468:	181b      	adds	r3, r3, r0
 800446a:	106d      	asrs	r5, r5, #1
 800446c:	42ab      	cmp	r3, r5
 800446e:	d900      	bls.n	8004472 <__ssputs_r+0x3e>
 8004470:	001d      	movs	r5, r3
 8004472:	0553      	lsls	r3, r2, #21
 8004474:	d532      	bpl.n	80044dc <__ssputs_r+0xa8>
 8004476:	0029      	movs	r1, r5
 8004478:	0038      	movs	r0, r7
 800447a:	f000 fb49 	bl	8004b10 <_malloc_r>
 800447e:	1e06      	subs	r6, r0, #0
 8004480:	d109      	bne.n	8004496 <__ssputs_r+0x62>
 8004482:	230c      	movs	r3, #12
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	2340      	movs	r3, #64	; 0x40
 8004488:	2001      	movs	r0, #1
 800448a:	89a2      	ldrh	r2, [r4, #12]
 800448c:	4240      	negs	r0, r0
 800448e:	4313      	orrs	r3, r2
 8004490:	81a3      	strh	r3, [r4, #12]
 8004492:	b005      	add	sp, #20
 8004494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004496:	9a02      	ldr	r2, [sp, #8]
 8004498:	6921      	ldr	r1, [r4, #16]
 800449a:	f7ff ff99 	bl	80043d0 <memcpy>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <__ssputs_r+0xc0>)
 80044a2:	401a      	ands	r2, r3
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	4313      	orrs	r3, r2
 80044a8:	81a3      	strh	r3, [r4, #12]
 80044aa:	9b02      	ldr	r3, [sp, #8]
 80044ac:	6126      	str	r6, [r4, #16]
 80044ae:	18f6      	adds	r6, r6, r3
 80044b0:	6026      	str	r6, [r4, #0]
 80044b2:	6165      	str	r5, [r4, #20]
 80044b4:	9e01      	ldr	r6, [sp, #4]
 80044b6:	1aed      	subs	r5, r5, r3
 80044b8:	60a5      	str	r5, [r4, #8]
 80044ba:	9b01      	ldr	r3, [sp, #4]
 80044bc:	429e      	cmp	r6, r3
 80044be:	d900      	bls.n	80044c2 <__ssputs_r+0x8e>
 80044c0:	9e01      	ldr	r6, [sp, #4]
 80044c2:	0032      	movs	r2, r6
 80044c4:	9903      	ldr	r1, [sp, #12]
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	f000 faa3 	bl	8004a12 <memmove>
 80044cc:	68a3      	ldr	r3, [r4, #8]
 80044ce:	2000      	movs	r0, #0
 80044d0:	1b9b      	subs	r3, r3, r6
 80044d2:	60a3      	str	r3, [r4, #8]
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	199e      	adds	r6, r3, r6
 80044d8:	6026      	str	r6, [r4, #0]
 80044da:	e7da      	b.n	8004492 <__ssputs_r+0x5e>
 80044dc:	002a      	movs	r2, r5
 80044de:	0038      	movs	r0, r7
 80044e0:	f000 fb8c 	bl	8004bfc <_realloc_r>
 80044e4:	1e06      	subs	r6, r0, #0
 80044e6:	d1e0      	bne.n	80044aa <__ssputs_r+0x76>
 80044e8:	0038      	movs	r0, r7
 80044ea:	6921      	ldr	r1, [r4, #16]
 80044ec:	f000 faa4 	bl	8004a38 <_free_r>
 80044f0:	e7c7      	b.n	8004482 <__ssputs_r+0x4e>
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	fffffb7f 	.word	0xfffffb7f

080044f8 <_svfiprintf_r>:
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b0a1      	sub	sp, #132	; 0x84
 80044fc:	9003      	str	r0, [sp, #12]
 80044fe:	001d      	movs	r5, r3
 8004500:	898b      	ldrh	r3, [r1, #12]
 8004502:	000f      	movs	r7, r1
 8004504:	0016      	movs	r6, r2
 8004506:	061b      	lsls	r3, r3, #24
 8004508:	d511      	bpl.n	800452e <_svfiprintf_r+0x36>
 800450a:	690b      	ldr	r3, [r1, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10e      	bne.n	800452e <_svfiprintf_r+0x36>
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	f000 fafd 	bl	8004b10 <_malloc_r>
 8004516:	6038      	str	r0, [r7, #0]
 8004518:	6138      	str	r0, [r7, #16]
 800451a:	2800      	cmp	r0, #0
 800451c:	d105      	bne.n	800452a <_svfiprintf_r+0x32>
 800451e:	230c      	movs	r3, #12
 8004520:	9a03      	ldr	r2, [sp, #12]
 8004522:	3801      	subs	r0, #1
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	b021      	add	sp, #132	; 0x84
 8004528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452a:	2340      	movs	r3, #64	; 0x40
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	2300      	movs	r3, #0
 8004530:	ac08      	add	r4, sp, #32
 8004532:	6163      	str	r3, [r4, #20]
 8004534:	3320      	adds	r3, #32
 8004536:	7663      	strb	r3, [r4, #25]
 8004538:	3310      	adds	r3, #16
 800453a:	76a3      	strb	r3, [r4, #26]
 800453c:	9507      	str	r5, [sp, #28]
 800453e:	0035      	movs	r5, r6
 8004540:	782b      	ldrb	r3, [r5, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <_svfiprintf_r+0x52>
 8004546:	2b25      	cmp	r3, #37	; 0x25
 8004548:	d147      	bne.n	80045da <_svfiprintf_r+0xe2>
 800454a:	1bab      	subs	r3, r5, r6
 800454c:	9305      	str	r3, [sp, #20]
 800454e:	42b5      	cmp	r5, r6
 8004550:	d00c      	beq.n	800456c <_svfiprintf_r+0x74>
 8004552:	0032      	movs	r2, r6
 8004554:	0039      	movs	r1, r7
 8004556:	9803      	ldr	r0, [sp, #12]
 8004558:	f7ff ff6c 	bl	8004434 <__ssputs_r>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d100      	bne.n	8004562 <_svfiprintf_r+0x6a>
 8004560:	e0ae      	b.n	80046c0 <_svfiprintf_r+0x1c8>
 8004562:	6962      	ldr	r2, [r4, #20]
 8004564:	9b05      	ldr	r3, [sp, #20]
 8004566:	4694      	mov	ip, r2
 8004568:	4463      	add	r3, ip
 800456a:	6163      	str	r3, [r4, #20]
 800456c:	782b      	ldrb	r3, [r5, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d100      	bne.n	8004574 <_svfiprintf_r+0x7c>
 8004572:	e0a5      	b.n	80046c0 <_svfiprintf_r+0x1c8>
 8004574:	2201      	movs	r2, #1
 8004576:	2300      	movs	r3, #0
 8004578:	4252      	negs	r2, r2
 800457a:	6062      	str	r2, [r4, #4]
 800457c:	a904      	add	r1, sp, #16
 800457e:	3254      	adds	r2, #84	; 0x54
 8004580:	1852      	adds	r2, r2, r1
 8004582:	1c6e      	adds	r6, r5, #1
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	60e3      	str	r3, [r4, #12]
 8004588:	60a3      	str	r3, [r4, #8]
 800458a:	7013      	strb	r3, [r2, #0]
 800458c:	65a3      	str	r3, [r4, #88]	; 0x58
 800458e:	2205      	movs	r2, #5
 8004590:	7831      	ldrb	r1, [r6, #0]
 8004592:	4854      	ldr	r0, [pc, #336]	; (80046e4 <_svfiprintf_r+0x1ec>)
 8004594:	f000 fa32 	bl	80049fc <memchr>
 8004598:	1c75      	adds	r5, r6, #1
 800459a:	2800      	cmp	r0, #0
 800459c:	d11f      	bne.n	80045de <_svfiprintf_r+0xe6>
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	06d3      	lsls	r3, r2, #27
 80045a2:	d504      	bpl.n	80045ae <_svfiprintf_r+0xb6>
 80045a4:	2353      	movs	r3, #83	; 0x53
 80045a6:	a904      	add	r1, sp, #16
 80045a8:	185b      	adds	r3, r3, r1
 80045aa:	2120      	movs	r1, #32
 80045ac:	7019      	strb	r1, [r3, #0]
 80045ae:	0713      	lsls	r3, r2, #28
 80045b0:	d504      	bpl.n	80045bc <_svfiprintf_r+0xc4>
 80045b2:	2353      	movs	r3, #83	; 0x53
 80045b4:	a904      	add	r1, sp, #16
 80045b6:	185b      	adds	r3, r3, r1
 80045b8:	212b      	movs	r1, #43	; 0x2b
 80045ba:	7019      	strb	r1, [r3, #0]
 80045bc:	7833      	ldrb	r3, [r6, #0]
 80045be:	2b2a      	cmp	r3, #42	; 0x2a
 80045c0:	d016      	beq.n	80045f0 <_svfiprintf_r+0xf8>
 80045c2:	0035      	movs	r5, r6
 80045c4:	2100      	movs	r1, #0
 80045c6:	200a      	movs	r0, #10
 80045c8:	68e3      	ldr	r3, [r4, #12]
 80045ca:	782a      	ldrb	r2, [r5, #0]
 80045cc:	1c6e      	adds	r6, r5, #1
 80045ce:	3a30      	subs	r2, #48	; 0x30
 80045d0:	2a09      	cmp	r2, #9
 80045d2:	d94e      	bls.n	8004672 <_svfiprintf_r+0x17a>
 80045d4:	2900      	cmp	r1, #0
 80045d6:	d111      	bne.n	80045fc <_svfiprintf_r+0x104>
 80045d8:	e017      	b.n	800460a <_svfiprintf_r+0x112>
 80045da:	3501      	adds	r5, #1
 80045dc:	e7b0      	b.n	8004540 <_svfiprintf_r+0x48>
 80045de:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <_svfiprintf_r+0x1ec>)
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	1ac0      	subs	r0, r0, r3
 80045e4:	2301      	movs	r3, #1
 80045e6:	4083      	lsls	r3, r0
 80045e8:	4313      	orrs	r3, r2
 80045ea:	002e      	movs	r6, r5
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	e7ce      	b.n	800458e <_svfiprintf_r+0x96>
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	1d19      	adds	r1, r3, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	9107      	str	r1, [sp, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db01      	blt.n	8004600 <_svfiprintf_r+0x108>
 80045fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80045fe:	e004      	b.n	800460a <_svfiprintf_r+0x112>
 8004600:	425b      	negs	r3, r3
 8004602:	60e3      	str	r3, [r4, #12]
 8004604:	2302      	movs	r3, #2
 8004606:	4313      	orrs	r3, r2
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	782b      	ldrb	r3, [r5, #0]
 800460c:	2b2e      	cmp	r3, #46	; 0x2e
 800460e:	d10a      	bne.n	8004626 <_svfiprintf_r+0x12e>
 8004610:	786b      	ldrb	r3, [r5, #1]
 8004612:	2b2a      	cmp	r3, #42	; 0x2a
 8004614:	d135      	bne.n	8004682 <_svfiprintf_r+0x18a>
 8004616:	9b07      	ldr	r3, [sp, #28]
 8004618:	3502      	adds	r5, #2
 800461a:	1d1a      	adds	r2, r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	9207      	str	r2, [sp, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db2b      	blt.n	800467c <_svfiprintf_r+0x184>
 8004624:	9309      	str	r3, [sp, #36]	; 0x24
 8004626:	4e30      	ldr	r6, [pc, #192]	; (80046e8 <_svfiprintf_r+0x1f0>)
 8004628:	2203      	movs	r2, #3
 800462a:	0030      	movs	r0, r6
 800462c:	7829      	ldrb	r1, [r5, #0]
 800462e:	f000 f9e5 	bl	80049fc <memchr>
 8004632:	2800      	cmp	r0, #0
 8004634:	d006      	beq.n	8004644 <_svfiprintf_r+0x14c>
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	1b80      	subs	r0, r0, r6
 800463a:	4083      	lsls	r3, r0
 800463c:	6822      	ldr	r2, [r4, #0]
 800463e:	3501      	adds	r5, #1
 8004640:	4313      	orrs	r3, r2
 8004642:	6023      	str	r3, [r4, #0]
 8004644:	7829      	ldrb	r1, [r5, #0]
 8004646:	2206      	movs	r2, #6
 8004648:	4828      	ldr	r0, [pc, #160]	; (80046ec <_svfiprintf_r+0x1f4>)
 800464a:	1c6e      	adds	r6, r5, #1
 800464c:	7621      	strb	r1, [r4, #24]
 800464e:	f000 f9d5 	bl	80049fc <memchr>
 8004652:	2800      	cmp	r0, #0
 8004654:	d03c      	beq.n	80046d0 <_svfiprintf_r+0x1d8>
 8004656:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <_svfiprintf_r+0x1f8>)
 8004658:	2b00      	cmp	r3, #0
 800465a:	d125      	bne.n	80046a8 <_svfiprintf_r+0x1b0>
 800465c:	2207      	movs	r2, #7
 800465e:	9b07      	ldr	r3, [sp, #28]
 8004660:	3307      	adds	r3, #7
 8004662:	4393      	bics	r3, r2
 8004664:	3308      	adds	r3, #8
 8004666:	9307      	str	r3, [sp, #28]
 8004668:	6963      	ldr	r3, [r4, #20]
 800466a:	9a04      	ldr	r2, [sp, #16]
 800466c:	189b      	adds	r3, r3, r2
 800466e:	6163      	str	r3, [r4, #20]
 8004670:	e765      	b.n	800453e <_svfiprintf_r+0x46>
 8004672:	4343      	muls	r3, r0
 8004674:	0035      	movs	r5, r6
 8004676:	2101      	movs	r1, #1
 8004678:	189b      	adds	r3, r3, r2
 800467a:	e7a6      	b.n	80045ca <_svfiprintf_r+0xd2>
 800467c:	2301      	movs	r3, #1
 800467e:	425b      	negs	r3, r3
 8004680:	e7d0      	b.n	8004624 <_svfiprintf_r+0x12c>
 8004682:	2300      	movs	r3, #0
 8004684:	200a      	movs	r0, #10
 8004686:	001a      	movs	r2, r3
 8004688:	3501      	adds	r5, #1
 800468a:	6063      	str	r3, [r4, #4]
 800468c:	7829      	ldrb	r1, [r5, #0]
 800468e:	1c6e      	adds	r6, r5, #1
 8004690:	3930      	subs	r1, #48	; 0x30
 8004692:	2909      	cmp	r1, #9
 8004694:	d903      	bls.n	800469e <_svfiprintf_r+0x1a6>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0c5      	beq.n	8004626 <_svfiprintf_r+0x12e>
 800469a:	9209      	str	r2, [sp, #36]	; 0x24
 800469c:	e7c3      	b.n	8004626 <_svfiprintf_r+0x12e>
 800469e:	4342      	muls	r2, r0
 80046a0:	0035      	movs	r5, r6
 80046a2:	2301      	movs	r3, #1
 80046a4:	1852      	adds	r2, r2, r1
 80046a6:	e7f1      	b.n	800468c <_svfiprintf_r+0x194>
 80046a8:	ab07      	add	r3, sp, #28
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	003a      	movs	r2, r7
 80046ae:	0021      	movs	r1, r4
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <_svfiprintf_r+0x1fc>)
 80046b2:	9803      	ldr	r0, [sp, #12]
 80046b4:	e000      	b.n	80046b8 <_svfiprintf_r+0x1c0>
 80046b6:	bf00      	nop
 80046b8:	9004      	str	r0, [sp, #16]
 80046ba:	9b04      	ldr	r3, [sp, #16]
 80046bc:	3301      	adds	r3, #1
 80046be:	d1d3      	bne.n	8004668 <_svfiprintf_r+0x170>
 80046c0:	89bb      	ldrh	r3, [r7, #12]
 80046c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80046c4:	065b      	lsls	r3, r3, #25
 80046c6:	d400      	bmi.n	80046ca <_svfiprintf_r+0x1d2>
 80046c8:	e72d      	b.n	8004526 <_svfiprintf_r+0x2e>
 80046ca:	2001      	movs	r0, #1
 80046cc:	4240      	negs	r0, r0
 80046ce:	e72a      	b.n	8004526 <_svfiprintf_r+0x2e>
 80046d0:	ab07      	add	r3, sp, #28
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	003a      	movs	r2, r7
 80046d6:	0021      	movs	r1, r4
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <_svfiprintf_r+0x1fc>)
 80046da:	9803      	ldr	r0, [sp, #12]
 80046dc:	f000 f87c 	bl	80047d8 <_printf_i>
 80046e0:	e7ea      	b.n	80046b8 <_svfiprintf_r+0x1c0>
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	08004d27 	.word	0x08004d27
 80046e8:	08004d2d 	.word	0x08004d2d
 80046ec:	08004d31 	.word	0x08004d31
 80046f0:	00000000 	.word	0x00000000
 80046f4:	08004435 	.word	0x08004435

080046f8 <_printf_common>:
 80046f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046fa:	0015      	movs	r5, r2
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	688a      	ldr	r2, [r1, #8]
 8004700:	690b      	ldr	r3, [r1, #16]
 8004702:	000c      	movs	r4, r1
 8004704:	9000      	str	r0, [sp, #0]
 8004706:	4293      	cmp	r3, r2
 8004708:	da00      	bge.n	800470c <_printf_common+0x14>
 800470a:	0013      	movs	r3, r2
 800470c:	0022      	movs	r2, r4
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	3243      	adds	r2, #67	; 0x43
 8004712:	7812      	ldrb	r2, [r2, #0]
 8004714:	2a00      	cmp	r2, #0
 8004716:	d001      	beq.n	800471c <_printf_common+0x24>
 8004718:	3301      	adds	r3, #1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	069b      	lsls	r3, r3, #26
 8004720:	d502      	bpl.n	8004728 <_printf_common+0x30>
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	3302      	adds	r3, #2
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	2306      	movs	r3, #6
 800472c:	0017      	movs	r7, r2
 800472e:	401f      	ands	r7, r3
 8004730:	421a      	tst	r2, r3
 8004732:	d027      	beq.n	8004784 <_printf_common+0x8c>
 8004734:	0023      	movs	r3, r4
 8004736:	3343      	adds	r3, #67	; 0x43
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	1e5a      	subs	r2, r3, #1
 800473c:	4193      	sbcs	r3, r2
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	0692      	lsls	r2, r2, #26
 8004742:	d430      	bmi.n	80047a6 <_printf_common+0xae>
 8004744:	0022      	movs	r2, r4
 8004746:	9901      	ldr	r1, [sp, #4]
 8004748:	9800      	ldr	r0, [sp, #0]
 800474a:	9e08      	ldr	r6, [sp, #32]
 800474c:	3243      	adds	r2, #67	; 0x43
 800474e:	47b0      	blx	r6
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d025      	beq.n	80047a0 <_printf_common+0xa8>
 8004754:	2306      	movs	r3, #6
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	682a      	ldr	r2, [r5, #0]
 800475a:	68e1      	ldr	r1, [r4, #12]
 800475c:	2500      	movs	r5, #0
 800475e:	4003      	ands	r3, r0
 8004760:	2b04      	cmp	r3, #4
 8004762:	d103      	bne.n	800476c <_printf_common+0x74>
 8004764:	1a8d      	subs	r5, r1, r2
 8004766:	43eb      	mvns	r3, r5
 8004768:	17db      	asrs	r3, r3, #31
 800476a:	401d      	ands	r5, r3
 800476c:	68a3      	ldr	r3, [r4, #8]
 800476e:	6922      	ldr	r2, [r4, #16]
 8004770:	4293      	cmp	r3, r2
 8004772:	dd01      	ble.n	8004778 <_printf_common+0x80>
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	18ed      	adds	r5, r5, r3
 8004778:	2700      	movs	r7, #0
 800477a:	42bd      	cmp	r5, r7
 800477c:	d120      	bne.n	80047c0 <_printf_common+0xc8>
 800477e:	2000      	movs	r0, #0
 8004780:	e010      	b.n	80047a4 <_printf_common+0xac>
 8004782:	3701      	adds	r7, #1
 8004784:	68e3      	ldr	r3, [r4, #12]
 8004786:	682a      	ldr	r2, [r5, #0]
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	42bb      	cmp	r3, r7
 800478c:	ddd2      	ble.n	8004734 <_printf_common+0x3c>
 800478e:	0022      	movs	r2, r4
 8004790:	2301      	movs	r3, #1
 8004792:	9901      	ldr	r1, [sp, #4]
 8004794:	9800      	ldr	r0, [sp, #0]
 8004796:	9e08      	ldr	r6, [sp, #32]
 8004798:	3219      	adds	r2, #25
 800479a:	47b0      	blx	r6
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d1f0      	bne.n	8004782 <_printf_common+0x8a>
 80047a0:	2001      	movs	r0, #1
 80047a2:	4240      	negs	r0, r0
 80047a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047a6:	2030      	movs	r0, #48	; 0x30
 80047a8:	18e1      	adds	r1, r4, r3
 80047aa:	3143      	adds	r1, #67	; 0x43
 80047ac:	7008      	strb	r0, [r1, #0]
 80047ae:	0021      	movs	r1, r4
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	3145      	adds	r1, #69	; 0x45
 80047b4:	7809      	ldrb	r1, [r1, #0]
 80047b6:	18a2      	adds	r2, r4, r2
 80047b8:	3243      	adds	r2, #67	; 0x43
 80047ba:	3302      	adds	r3, #2
 80047bc:	7011      	strb	r1, [r2, #0]
 80047be:	e7c1      	b.n	8004744 <_printf_common+0x4c>
 80047c0:	0022      	movs	r2, r4
 80047c2:	2301      	movs	r3, #1
 80047c4:	9901      	ldr	r1, [sp, #4]
 80047c6:	9800      	ldr	r0, [sp, #0]
 80047c8:	9e08      	ldr	r6, [sp, #32]
 80047ca:	321a      	adds	r2, #26
 80047cc:	47b0      	blx	r6
 80047ce:	1c43      	adds	r3, r0, #1
 80047d0:	d0e6      	beq.n	80047a0 <_printf_common+0xa8>
 80047d2:	3701      	adds	r7, #1
 80047d4:	e7d1      	b.n	800477a <_printf_common+0x82>
	...

080047d8 <_printf_i>:
 80047d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047da:	b08b      	sub	sp, #44	; 0x2c
 80047dc:	9206      	str	r2, [sp, #24]
 80047de:	000a      	movs	r2, r1
 80047e0:	3243      	adds	r2, #67	; 0x43
 80047e2:	9307      	str	r3, [sp, #28]
 80047e4:	9005      	str	r0, [sp, #20]
 80047e6:	9204      	str	r2, [sp, #16]
 80047e8:	7e0a      	ldrb	r2, [r1, #24]
 80047ea:	000c      	movs	r4, r1
 80047ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047ee:	2a78      	cmp	r2, #120	; 0x78
 80047f0:	d807      	bhi.n	8004802 <_printf_i+0x2a>
 80047f2:	2a62      	cmp	r2, #98	; 0x62
 80047f4:	d809      	bhi.n	800480a <_printf_i+0x32>
 80047f6:	2a00      	cmp	r2, #0
 80047f8:	d100      	bne.n	80047fc <_printf_i+0x24>
 80047fa:	e0c1      	b.n	8004980 <_printf_i+0x1a8>
 80047fc:	2a58      	cmp	r2, #88	; 0x58
 80047fe:	d100      	bne.n	8004802 <_printf_i+0x2a>
 8004800:	e08c      	b.n	800491c <_printf_i+0x144>
 8004802:	0026      	movs	r6, r4
 8004804:	3642      	adds	r6, #66	; 0x42
 8004806:	7032      	strb	r2, [r6, #0]
 8004808:	e022      	b.n	8004850 <_printf_i+0x78>
 800480a:	0010      	movs	r0, r2
 800480c:	3863      	subs	r0, #99	; 0x63
 800480e:	2815      	cmp	r0, #21
 8004810:	d8f7      	bhi.n	8004802 <_printf_i+0x2a>
 8004812:	f7fb fc83 	bl	800011c <__gnu_thumb1_case_shi>
 8004816:	0016      	.short	0x0016
 8004818:	fff6001f 	.word	0xfff6001f
 800481c:	fff6fff6 	.word	0xfff6fff6
 8004820:	001ffff6 	.word	0x001ffff6
 8004824:	fff6fff6 	.word	0xfff6fff6
 8004828:	fff6fff6 	.word	0xfff6fff6
 800482c:	003600a8 	.word	0x003600a8
 8004830:	fff6009a 	.word	0xfff6009a
 8004834:	00b9fff6 	.word	0x00b9fff6
 8004838:	0036fff6 	.word	0x0036fff6
 800483c:	fff6fff6 	.word	0xfff6fff6
 8004840:	009e      	.short	0x009e
 8004842:	0026      	movs	r6, r4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	3642      	adds	r6, #66	; 0x42
 8004848:	1d11      	adds	r1, r2, #4
 800484a:	6019      	str	r1, [r3, #0]
 800484c:	6813      	ldr	r3, [r2, #0]
 800484e:	7033      	strb	r3, [r6, #0]
 8004850:	2301      	movs	r3, #1
 8004852:	e0a7      	b.n	80049a4 <_printf_i+0x1cc>
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	6819      	ldr	r1, [r3, #0]
 8004858:	1d0a      	adds	r2, r1, #4
 800485a:	0605      	lsls	r5, r0, #24
 800485c:	d50b      	bpl.n	8004876 <_printf_i+0x9e>
 800485e:	680d      	ldr	r5, [r1, #0]
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	2d00      	cmp	r5, #0
 8004864:	da03      	bge.n	800486e <_printf_i+0x96>
 8004866:	232d      	movs	r3, #45	; 0x2d
 8004868:	9a04      	ldr	r2, [sp, #16]
 800486a:	426d      	negs	r5, r5
 800486c:	7013      	strb	r3, [r2, #0]
 800486e:	4b61      	ldr	r3, [pc, #388]	; (80049f4 <_printf_i+0x21c>)
 8004870:	270a      	movs	r7, #10
 8004872:	9303      	str	r3, [sp, #12]
 8004874:	e01b      	b.n	80048ae <_printf_i+0xd6>
 8004876:	680d      	ldr	r5, [r1, #0]
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	0641      	lsls	r1, r0, #25
 800487c:	d5f1      	bpl.n	8004862 <_printf_i+0x8a>
 800487e:	b22d      	sxth	r5, r5
 8004880:	e7ef      	b.n	8004862 <_printf_i+0x8a>
 8004882:	680d      	ldr	r5, [r1, #0]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	1d08      	adds	r0, r1, #4
 8004888:	6018      	str	r0, [r3, #0]
 800488a:	062e      	lsls	r6, r5, #24
 800488c:	d501      	bpl.n	8004892 <_printf_i+0xba>
 800488e:	680d      	ldr	r5, [r1, #0]
 8004890:	e003      	b.n	800489a <_printf_i+0xc2>
 8004892:	066d      	lsls	r5, r5, #25
 8004894:	d5fb      	bpl.n	800488e <_printf_i+0xb6>
 8004896:	680d      	ldr	r5, [r1, #0]
 8004898:	b2ad      	uxth	r5, r5
 800489a:	4b56      	ldr	r3, [pc, #344]	; (80049f4 <_printf_i+0x21c>)
 800489c:	2708      	movs	r7, #8
 800489e:	9303      	str	r3, [sp, #12]
 80048a0:	2a6f      	cmp	r2, #111	; 0x6f
 80048a2:	d000      	beq.n	80048a6 <_printf_i+0xce>
 80048a4:	3702      	adds	r7, #2
 80048a6:	0023      	movs	r3, r4
 80048a8:	2200      	movs	r2, #0
 80048aa:	3343      	adds	r3, #67	; 0x43
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	6863      	ldr	r3, [r4, #4]
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	db03      	blt.n	80048be <_printf_i+0xe6>
 80048b6:	2204      	movs	r2, #4
 80048b8:	6821      	ldr	r1, [r4, #0]
 80048ba:	4391      	bics	r1, r2
 80048bc:	6021      	str	r1, [r4, #0]
 80048be:	2d00      	cmp	r5, #0
 80048c0:	d102      	bne.n	80048c8 <_printf_i+0xf0>
 80048c2:	9e04      	ldr	r6, [sp, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00c      	beq.n	80048e2 <_printf_i+0x10a>
 80048c8:	9e04      	ldr	r6, [sp, #16]
 80048ca:	0028      	movs	r0, r5
 80048cc:	0039      	movs	r1, r7
 80048ce:	f7fb fcb5 	bl	800023c <__aeabi_uidivmod>
 80048d2:	9b03      	ldr	r3, [sp, #12]
 80048d4:	3e01      	subs	r6, #1
 80048d6:	5c5b      	ldrb	r3, [r3, r1]
 80048d8:	7033      	strb	r3, [r6, #0]
 80048da:	002b      	movs	r3, r5
 80048dc:	0005      	movs	r5, r0
 80048de:	429f      	cmp	r7, r3
 80048e0:	d9f3      	bls.n	80048ca <_printf_i+0xf2>
 80048e2:	2f08      	cmp	r7, #8
 80048e4:	d109      	bne.n	80048fa <_printf_i+0x122>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	07db      	lsls	r3, r3, #31
 80048ea:	d506      	bpl.n	80048fa <_printf_i+0x122>
 80048ec:	6863      	ldr	r3, [r4, #4]
 80048ee:	6922      	ldr	r2, [r4, #16]
 80048f0:	4293      	cmp	r3, r2
 80048f2:	dc02      	bgt.n	80048fa <_printf_i+0x122>
 80048f4:	2330      	movs	r3, #48	; 0x30
 80048f6:	3e01      	subs	r6, #1
 80048f8:	7033      	strb	r3, [r6, #0]
 80048fa:	9b04      	ldr	r3, [sp, #16]
 80048fc:	1b9b      	subs	r3, r3, r6
 80048fe:	6123      	str	r3, [r4, #16]
 8004900:	9b07      	ldr	r3, [sp, #28]
 8004902:	0021      	movs	r1, r4
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	9805      	ldr	r0, [sp, #20]
 8004908:	9b06      	ldr	r3, [sp, #24]
 800490a:	aa09      	add	r2, sp, #36	; 0x24
 800490c:	f7ff fef4 	bl	80046f8 <_printf_common>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d14c      	bne.n	80049ae <_printf_i+0x1d6>
 8004914:	2001      	movs	r0, #1
 8004916:	4240      	negs	r0, r0
 8004918:	b00b      	add	sp, #44	; 0x2c
 800491a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491c:	3145      	adds	r1, #69	; 0x45
 800491e:	700a      	strb	r2, [r1, #0]
 8004920:	4a34      	ldr	r2, [pc, #208]	; (80049f4 <_printf_i+0x21c>)
 8004922:	9203      	str	r2, [sp, #12]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	6821      	ldr	r1, [r4, #0]
 8004928:	ca20      	ldmia	r2!, {r5}
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	0608      	lsls	r0, r1, #24
 800492e:	d516      	bpl.n	800495e <_printf_i+0x186>
 8004930:	07cb      	lsls	r3, r1, #31
 8004932:	d502      	bpl.n	800493a <_printf_i+0x162>
 8004934:	2320      	movs	r3, #32
 8004936:	4319      	orrs	r1, r3
 8004938:	6021      	str	r1, [r4, #0]
 800493a:	2710      	movs	r7, #16
 800493c:	2d00      	cmp	r5, #0
 800493e:	d1b2      	bne.n	80048a6 <_printf_i+0xce>
 8004940:	2320      	movs	r3, #32
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	439a      	bics	r2, r3
 8004946:	6022      	str	r2, [r4, #0]
 8004948:	e7ad      	b.n	80048a6 <_printf_i+0xce>
 800494a:	2220      	movs	r2, #32
 800494c:	6809      	ldr	r1, [r1, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	6022      	str	r2, [r4, #0]
 8004952:	0022      	movs	r2, r4
 8004954:	2178      	movs	r1, #120	; 0x78
 8004956:	3245      	adds	r2, #69	; 0x45
 8004958:	7011      	strb	r1, [r2, #0]
 800495a:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <_printf_i+0x220>)
 800495c:	e7e1      	b.n	8004922 <_printf_i+0x14a>
 800495e:	0648      	lsls	r0, r1, #25
 8004960:	d5e6      	bpl.n	8004930 <_printf_i+0x158>
 8004962:	b2ad      	uxth	r5, r5
 8004964:	e7e4      	b.n	8004930 <_printf_i+0x158>
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	680d      	ldr	r5, [r1, #0]
 800496a:	1d10      	adds	r0, r2, #4
 800496c:	6949      	ldr	r1, [r1, #20]
 800496e:	6018      	str	r0, [r3, #0]
 8004970:	6813      	ldr	r3, [r2, #0]
 8004972:	062e      	lsls	r6, r5, #24
 8004974:	d501      	bpl.n	800497a <_printf_i+0x1a2>
 8004976:	6019      	str	r1, [r3, #0]
 8004978:	e002      	b.n	8004980 <_printf_i+0x1a8>
 800497a:	066d      	lsls	r5, r5, #25
 800497c:	d5fb      	bpl.n	8004976 <_printf_i+0x19e>
 800497e:	8019      	strh	r1, [r3, #0]
 8004980:	2300      	movs	r3, #0
 8004982:	9e04      	ldr	r6, [sp, #16]
 8004984:	6123      	str	r3, [r4, #16]
 8004986:	e7bb      	b.n	8004900 <_printf_i+0x128>
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	1d11      	adds	r1, r2, #4
 800498c:	6019      	str	r1, [r3, #0]
 800498e:	6816      	ldr	r6, [r2, #0]
 8004990:	2100      	movs	r1, #0
 8004992:	0030      	movs	r0, r6
 8004994:	6862      	ldr	r2, [r4, #4]
 8004996:	f000 f831 	bl	80049fc <memchr>
 800499a:	2800      	cmp	r0, #0
 800499c:	d001      	beq.n	80049a2 <_printf_i+0x1ca>
 800499e:	1b80      	subs	r0, r0, r6
 80049a0:	6060      	str	r0, [r4, #4]
 80049a2:	6863      	ldr	r3, [r4, #4]
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	2300      	movs	r3, #0
 80049a8:	9a04      	ldr	r2, [sp, #16]
 80049aa:	7013      	strb	r3, [r2, #0]
 80049ac:	e7a8      	b.n	8004900 <_printf_i+0x128>
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	0032      	movs	r2, r6
 80049b2:	9906      	ldr	r1, [sp, #24]
 80049b4:	9805      	ldr	r0, [sp, #20]
 80049b6:	9d07      	ldr	r5, [sp, #28]
 80049b8:	47a8      	blx	r5
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	d0aa      	beq.n	8004914 <_printf_i+0x13c>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	079b      	lsls	r3, r3, #30
 80049c2:	d415      	bmi.n	80049f0 <_printf_i+0x218>
 80049c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c6:	68e0      	ldr	r0, [r4, #12]
 80049c8:	4298      	cmp	r0, r3
 80049ca:	daa5      	bge.n	8004918 <_printf_i+0x140>
 80049cc:	0018      	movs	r0, r3
 80049ce:	e7a3      	b.n	8004918 <_printf_i+0x140>
 80049d0:	0022      	movs	r2, r4
 80049d2:	2301      	movs	r3, #1
 80049d4:	9906      	ldr	r1, [sp, #24]
 80049d6:	9805      	ldr	r0, [sp, #20]
 80049d8:	9e07      	ldr	r6, [sp, #28]
 80049da:	3219      	adds	r2, #25
 80049dc:	47b0      	blx	r6
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d098      	beq.n	8004914 <_printf_i+0x13c>
 80049e2:	3501      	adds	r5, #1
 80049e4:	68e3      	ldr	r3, [r4, #12]
 80049e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	42ab      	cmp	r3, r5
 80049ec:	dcf0      	bgt.n	80049d0 <_printf_i+0x1f8>
 80049ee:	e7e9      	b.n	80049c4 <_printf_i+0x1ec>
 80049f0:	2500      	movs	r5, #0
 80049f2:	e7f7      	b.n	80049e4 <_printf_i+0x20c>
 80049f4:	08004d38 	.word	0x08004d38
 80049f8:	08004d49 	.word	0x08004d49

080049fc <memchr>:
 80049fc:	b2c9      	uxtb	r1, r1
 80049fe:	1882      	adds	r2, r0, r2
 8004a00:	4290      	cmp	r0, r2
 8004a02:	d101      	bne.n	8004a08 <memchr+0xc>
 8004a04:	2000      	movs	r0, #0
 8004a06:	4770      	bx	lr
 8004a08:	7803      	ldrb	r3, [r0, #0]
 8004a0a:	428b      	cmp	r3, r1
 8004a0c:	d0fb      	beq.n	8004a06 <memchr+0xa>
 8004a0e:	3001      	adds	r0, #1
 8004a10:	e7f6      	b.n	8004a00 <memchr+0x4>

08004a12 <memmove>:
 8004a12:	b510      	push	{r4, lr}
 8004a14:	4288      	cmp	r0, r1
 8004a16:	d902      	bls.n	8004a1e <memmove+0xc>
 8004a18:	188b      	adds	r3, r1, r2
 8004a1a:	4298      	cmp	r0, r3
 8004a1c:	d303      	bcc.n	8004a26 <memmove+0x14>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e007      	b.n	8004a32 <memmove+0x20>
 8004a22:	5c8b      	ldrb	r3, [r1, r2]
 8004a24:	5483      	strb	r3, [r0, r2]
 8004a26:	3a01      	subs	r2, #1
 8004a28:	d2fb      	bcs.n	8004a22 <memmove+0x10>
 8004a2a:	bd10      	pop	{r4, pc}
 8004a2c:	5ccc      	ldrb	r4, [r1, r3]
 8004a2e:	54c4      	strb	r4, [r0, r3]
 8004a30:	3301      	adds	r3, #1
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d1fa      	bne.n	8004a2c <memmove+0x1a>
 8004a36:	e7f8      	b.n	8004a2a <memmove+0x18>

08004a38 <_free_r>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	0005      	movs	r5, r0
 8004a3c:	2900      	cmp	r1, #0
 8004a3e:	d010      	beq.n	8004a62 <_free_r+0x2a>
 8004a40:	1f0c      	subs	r4, r1, #4
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da00      	bge.n	8004a4a <_free_r+0x12>
 8004a48:	18e4      	adds	r4, r4, r3
 8004a4a:	0028      	movs	r0, r5
 8004a4c:	f000 f918 	bl	8004c80 <__malloc_lock>
 8004a50:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <_free_r+0x90>)
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <_free_r+0x2c>
 8004a58:	6063      	str	r3, [r4, #4]
 8004a5a:	6014      	str	r4, [r2, #0]
 8004a5c:	0028      	movs	r0, r5
 8004a5e:	f000 f917 	bl	8004c90 <__malloc_unlock>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d908      	bls.n	8004a7a <_free_r+0x42>
 8004a68:	6821      	ldr	r1, [r4, #0]
 8004a6a:	1860      	adds	r0, r4, r1
 8004a6c:	4283      	cmp	r3, r0
 8004a6e:	d1f3      	bne.n	8004a58 <_free_r+0x20>
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	1841      	adds	r1, r0, r1
 8004a76:	6021      	str	r1, [r4, #0]
 8004a78:	e7ee      	b.n	8004a58 <_free_r+0x20>
 8004a7a:	001a      	movs	r2, r3
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <_free_r+0x4e>
 8004a82:	42a3      	cmp	r3, r4
 8004a84:	d9f9      	bls.n	8004a7a <_free_r+0x42>
 8004a86:	6811      	ldr	r1, [r2, #0]
 8004a88:	1850      	adds	r0, r2, r1
 8004a8a:	42a0      	cmp	r0, r4
 8004a8c:	d10b      	bne.n	8004aa6 <_free_r+0x6e>
 8004a8e:	6820      	ldr	r0, [r4, #0]
 8004a90:	1809      	adds	r1, r1, r0
 8004a92:	1850      	adds	r0, r2, r1
 8004a94:	6011      	str	r1, [r2, #0]
 8004a96:	4283      	cmp	r3, r0
 8004a98:	d1e0      	bne.n	8004a5c <_free_r+0x24>
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	1841      	adds	r1, r0, r1
 8004aa0:	6011      	str	r1, [r2, #0]
 8004aa2:	6053      	str	r3, [r2, #4]
 8004aa4:	e7da      	b.n	8004a5c <_free_r+0x24>
 8004aa6:	42a0      	cmp	r0, r4
 8004aa8:	d902      	bls.n	8004ab0 <_free_r+0x78>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	e7d5      	b.n	8004a5c <_free_r+0x24>
 8004ab0:	6821      	ldr	r1, [r4, #0]
 8004ab2:	1860      	adds	r0, r4, r1
 8004ab4:	4283      	cmp	r3, r0
 8004ab6:	d103      	bne.n	8004ac0 <_free_r+0x88>
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	1841      	adds	r1, r0, r1
 8004abe:	6021      	str	r1, [r4, #0]
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	6054      	str	r4, [r2, #4]
 8004ac4:	e7ca      	b.n	8004a5c <_free_r+0x24>
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	200011ac 	.word	0x200011ac

08004acc <sbrk_aligned>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4e0f      	ldr	r6, [pc, #60]	; (8004b0c <sbrk_aligned+0x40>)
 8004ad0:	000d      	movs	r5, r1
 8004ad2:	6831      	ldr	r1, [r6, #0]
 8004ad4:	0004      	movs	r4, r0
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d102      	bne.n	8004ae0 <sbrk_aligned+0x14>
 8004ada:	f000 f8bf 	bl	8004c5c <_sbrk_r>
 8004ade:	6030      	str	r0, [r6, #0]
 8004ae0:	0029      	movs	r1, r5
 8004ae2:	0020      	movs	r0, r4
 8004ae4:	f000 f8ba 	bl	8004c5c <_sbrk_r>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d00a      	beq.n	8004b02 <sbrk_aligned+0x36>
 8004aec:	2303      	movs	r3, #3
 8004aee:	1cc5      	adds	r5, r0, #3
 8004af0:	439d      	bics	r5, r3
 8004af2:	42a8      	cmp	r0, r5
 8004af4:	d007      	beq.n	8004b06 <sbrk_aligned+0x3a>
 8004af6:	1a29      	subs	r1, r5, r0
 8004af8:	0020      	movs	r0, r4
 8004afa:	f000 f8af 	bl	8004c5c <_sbrk_r>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d101      	bne.n	8004b06 <sbrk_aligned+0x3a>
 8004b02:	2501      	movs	r5, #1
 8004b04:	426d      	negs	r5, r5
 8004b06:	0028      	movs	r0, r5
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	200011b0 	.word	0x200011b0

08004b10 <_malloc_r>:
 8004b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b12:	2203      	movs	r2, #3
 8004b14:	1ccb      	adds	r3, r1, #3
 8004b16:	4393      	bics	r3, r2
 8004b18:	3308      	adds	r3, #8
 8004b1a:	0006      	movs	r6, r0
 8004b1c:	001f      	movs	r7, r3
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d232      	bcs.n	8004b88 <_malloc_r+0x78>
 8004b22:	270c      	movs	r7, #12
 8004b24:	42b9      	cmp	r1, r7
 8004b26:	d831      	bhi.n	8004b8c <_malloc_r+0x7c>
 8004b28:	0030      	movs	r0, r6
 8004b2a:	f000 f8a9 	bl	8004c80 <__malloc_lock>
 8004b2e:	4d32      	ldr	r5, [pc, #200]	; (8004bf8 <_malloc_r+0xe8>)
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	001c      	movs	r4, r3
 8004b34:	2c00      	cmp	r4, #0
 8004b36:	d12e      	bne.n	8004b96 <_malloc_r+0x86>
 8004b38:	0039      	movs	r1, r7
 8004b3a:	0030      	movs	r0, r6
 8004b3c:	f7ff ffc6 	bl	8004acc <sbrk_aligned>
 8004b40:	0004      	movs	r4, r0
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d11e      	bne.n	8004b84 <_malloc_r+0x74>
 8004b46:	682c      	ldr	r4, [r5, #0]
 8004b48:	0025      	movs	r5, r4
 8004b4a:	2d00      	cmp	r5, #0
 8004b4c:	d14a      	bne.n	8004be4 <_malloc_r+0xd4>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	0029      	movs	r1, r5
 8004b52:	18e3      	adds	r3, r4, r3
 8004b54:	0030      	movs	r0, r6
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	f000 f880 	bl	8004c5c <_sbrk_r>
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	4283      	cmp	r3, r0
 8004b60:	d143      	bne.n	8004bea <_malloc_r+0xda>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	3703      	adds	r7, #3
 8004b66:	1aff      	subs	r7, r7, r3
 8004b68:	2303      	movs	r3, #3
 8004b6a:	439f      	bics	r7, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	2f0c      	cmp	r7, #12
 8004b70:	d200      	bcs.n	8004b74 <_malloc_r+0x64>
 8004b72:	270c      	movs	r7, #12
 8004b74:	0039      	movs	r1, r7
 8004b76:	0030      	movs	r0, r6
 8004b78:	f7ff ffa8 	bl	8004acc <sbrk_aligned>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d034      	beq.n	8004bea <_malloc_r+0xda>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	19df      	adds	r7, r3, r7
 8004b84:	6027      	str	r7, [r4, #0]
 8004b86:	e013      	b.n	8004bb0 <_malloc_r+0xa0>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	dacb      	bge.n	8004b24 <_malloc_r+0x14>
 8004b8c:	230c      	movs	r3, #12
 8004b8e:	2500      	movs	r5, #0
 8004b90:	6033      	str	r3, [r6, #0]
 8004b92:	0028      	movs	r0, r5
 8004b94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	1bd1      	subs	r1, r2, r7
 8004b9a:	d420      	bmi.n	8004bde <_malloc_r+0xce>
 8004b9c:	290b      	cmp	r1, #11
 8004b9e:	d917      	bls.n	8004bd0 <_malloc_r+0xc0>
 8004ba0:	19e2      	adds	r2, r4, r7
 8004ba2:	6027      	str	r7, [r4, #0]
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	d111      	bne.n	8004bcc <_malloc_r+0xbc>
 8004ba8:	602a      	str	r2, [r5, #0]
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	6053      	str	r3, [r2, #4]
 8004bb0:	0030      	movs	r0, r6
 8004bb2:	0025      	movs	r5, r4
 8004bb4:	f000 f86c 	bl	8004c90 <__malloc_unlock>
 8004bb8:	2207      	movs	r2, #7
 8004bba:	350b      	adds	r5, #11
 8004bbc:	1d23      	adds	r3, r4, #4
 8004bbe:	4395      	bics	r5, r2
 8004bc0:	1aea      	subs	r2, r5, r3
 8004bc2:	429d      	cmp	r5, r3
 8004bc4:	d0e5      	beq.n	8004b92 <_malloc_r+0x82>
 8004bc6:	1b5b      	subs	r3, r3, r5
 8004bc8:	50a3      	str	r3, [r4, r2]
 8004bca:	e7e2      	b.n	8004b92 <_malloc_r+0x82>
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	e7ec      	b.n	8004baa <_malloc_r+0x9a>
 8004bd0:	6862      	ldr	r2, [r4, #4]
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	d101      	bne.n	8004bda <_malloc_r+0xca>
 8004bd6:	602a      	str	r2, [r5, #0]
 8004bd8:	e7ea      	b.n	8004bb0 <_malloc_r+0xa0>
 8004bda:	605a      	str	r2, [r3, #4]
 8004bdc:	e7e8      	b.n	8004bb0 <_malloc_r+0xa0>
 8004bde:	0023      	movs	r3, r4
 8004be0:	6864      	ldr	r4, [r4, #4]
 8004be2:	e7a7      	b.n	8004b34 <_malloc_r+0x24>
 8004be4:	002c      	movs	r4, r5
 8004be6:	686d      	ldr	r5, [r5, #4]
 8004be8:	e7af      	b.n	8004b4a <_malloc_r+0x3a>
 8004bea:	230c      	movs	r3, #12
 8004bec:	0030      	movs	r0, r6
 8004bee:	6033      	str	r3, [r6, #0]
 8004bf0:	f000 f84e 	bl	8004c90 <__malloc_unlock>
 8004bf4:	e7cd      	b.n	8004b92 <_malloc_r+0x82>
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	200011ac 	.word	0x200011ac

08004bfc <_realloc_r>:
 8004bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bfe:	0007      	movs	r7, r0
 8004c00:	000e      	movs	r6, r1
 8004c02:	0014      	movs	r4, r2
 8004c04:	2900      	cmp	r1, #0
 8004c06:	d105      	bne.n	8004c14 <_realloc_r+0x18>
 8004c08:	0011      	movs	r1, r2
 8004c0a:	f7ff ff81 	bl	8004b10 <_malloc_r>
 8004c0e:	0005      	movs	r5, r0
 8004c10:	0028      	movs	r0, r5
 8004c12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	d103      	bne.n	8004c20 <_realloc_r+0x24>
 8004c18:	f7ff ff0e 	bl	8004a38 <_free_r>
 8004c1c:	0025      	movs	r5, r4
 8004c1e:	e7f7      	b.n	8004c10 <_realloc_r+0x14>
 8004c20:	f000 f83e 	bl	8004ca0 <_malloc_usable_size_r>
 8004c24:	9001      	str	r0, [sp, #4]
 8004c26:	4284      	cmp	r4, r0
 8004c28:	d803      	bhi.n	8004c32 <_realloc_r+0x36>
 8004c2a:	0035      	movs	r5, r6
 8004c2c:	0843      	lsrs	r3, r0, #1
 8004c2e:	42a3      	cmp	r3, r4
 8004c30:	d3ee      	bcc.n	8004c10 <_realloc_r+0x14>
 8004c32:	0021      	movs	r1, r4
 8004c34:	0038      	movs	r0, r7
 8004c36:	f7ff ff6b 	bl	8004b10 <_malloc_r>
 8004c3a:	1e05      	subs	r5, r0, #0
 8004c3c:	d0e8      	beq.n	8004c10 <_realloc_r+0x14>
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	0022      	movs	r2, r4
 8004c42:	429c      	cmp	r4, r3
 8004c44:	d900      	bls.n	8004c48 <_realloc_r+0x4c>
 8004c46:	001a      	movs	r2, r3
 8004c48:	0031      	movs	r1, r6
 8004c4a:	0028      	movs	r0, r5
 8004c4c:	f7ff fbc0 	bl	80043d0 <memcpy>
 8004c50:	0031      	movs	r1, r6
 8004c52:	0038      	movs	r0, r7
 8004c54:	f7ff fef0 	bl	8004a38 <_free_r>
 8004c58:	e7da      	b.n	8004c10 <_realloc_r+0x14>
	...

08004c5c <_sbrk_r>:
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	b570      	push	{r4, r5, r6, lr}
 8004c60:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <_sbrk_r+0x20>)
 8004c62:	0004      	movs	r4, r0
 8004c64:	0008      	movs	r0, r1
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	f7fc ff18 	bl	8001a9c <_sbrk>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d103      	bne.n	8004c78 <_sbrk_r+0x1c>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d000      	beq.n	8004c78 <_sbrk_r+0x1c>
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	bd70      	pop	{r4, r5, r6, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	200011b4 	.word	0x200011b4

08004c80 <__malloc_lock>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	4802      	ldr	r0, [pc, #8]	; (8004c8c <__malloc_lock+0xc>)
 8004c84:	f000 f814 	bl	8004cb0 <__retarget_lock_acquire_recursive>
 8004c88:	bd10      	pop	{r4, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	200011b8 	.word	0x200011b8

08004c90 <__malloc_unlock>:
 8004c90:	b510      	push	{r4, lr}
 8004c92:	4802      	ldr	r0, [pc, #8]	; (8004c9c <__malloc_unlock+0xc>)
 8004c94:	f000 f80d 	bl	8004cb2 <__retarget_lock_release_recursive>
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	200011b8 	.word	0x200011b8

08004ca0 <_malloc_usable_size_r>:
 8004ca0:	1f0b      	subs	r3, r1, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1f18      	subs	r0, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da01      	bge.n	8004cae <_malloc_usable_size_r+0xe>
 8004caa:	580b      	ldr	r3, [r1, r0]
 8004cac:	18c0      	adds	r0, r0, r3
 8004cae:	4770      	bx	lr

08004cb0 <__retarget_lock_acquire_recursive>:
 8004cb0:	4770      	bx	lr

08004cb2 <__retarget_lock_release_recursive>:
 8004cb2:	4770      	bx	lr

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr
