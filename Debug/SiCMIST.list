
SiCMIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c74  08004c74  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bcc  20000080  08004cfc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  08004cfc  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d30a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ee  00000000  00000000  0003d3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00041aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ddb  00000000  00000000  00043c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c892  00000000  00000000  00049a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081880  00000000  00000000  000662d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7b55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a4  00000000  00000000  000e7ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000c295  00000000  00000000  000eae4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b1c 	.word	0x08004b1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08004b1c 	.word	0x08004b1c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f82e 	bl	80002d8 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_lmul>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	0415      	lsls	r5, r2, #16
 800028c:	0c2d      	lsrs	r5, r5, #16
 800028e:	000f      	movs	r7, r1
 8000290:	0001      	movs	r1, r0
 8000292:	002e      	movs	r6, r5
 8000294:	46c6      	mov	lr, r8
 8000296:	4684      	mov	ip, r0
 8000298:	0400      	lsls	r0, r0, #16
 800029a:	0c14      	lsrs	r4, r2, #16
 800029c:	0c00      	lsrs	r0, r0, #16
 800029e:	0c09      	lsrs	r1, r1, #16
 80002a0:	4346      	muls	r6, r0
 80002a2:	434d      	muls	r5, r1
 80002a4:	4360      	muls	r0, r4
 80002a6:	4361      	muls	r1, r4
 80002a8:	1940      	adds	r0, r0, r5
 80002aa:	0c34      	lsrs	r4, r6, #16
 80002ac:	1824      	adds	r4, r4, r0
 80002ae:	b500      	push	{lr}
 80002b0:	42a5      	cmp	r5, r4
 80002b2:	d903      	bls.n	80002bc <__aeabi_lmul+0x34>
 80002b4:	2080      	movs	r0, #128	; 0x80
 80002b6:	0240      	lsls	r0, r0, #9
 80002b8:	4680      	mov	r8, r0
 80002ba:	4441      	add	r1, r8
 80002bc:	0c25      	lsrs	r5, r4, #16
 80002be:	186d      	adds	r5, r5, r1
 80002c0:	4661      	mov	r1, ip
 80002c2:	4359      	muls	r1, r3
 80002c4:	437a      	muls	r2, r7
 80002c6:	0430      	lsls	r0, r6, #16
 80002c8:	1949      	adds	r1, r1, r5
 80002ca:	0424      	lsls	r4, r4, #16
 80002cc:	0c00      	lsrs	r0, r0, #16
 80002ce:	1820      	adds	r0, r4, r0
 80002d0:	1889      	adds	r1, r1, r2
 80002d2:	bc80      	pop	{r7}
 80002d4:	46b8      	mov	r8, r7
 80002d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d8 <__udivmoddi4>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	4657      	mov	r7, sl
 80002dc:	464e      	mov	r6, r9
 80002de:	4645      	mov	r5, r8
 80002e0:	46de      	mov	lr, fp
 80002e2:	b5e0      	push	{r5, r6, r7, lr}
 80002e4:	0004      	movs	r4, r0
 80002e6:	000d      	movs	r5, r1
 80002e8:	4692      	mov	sl, r2
 80002ea:	4699      	mov	r9, r3
 80002ec:	b083      	sub	sp, #12
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d830      	bhi.n	8000354 <__udivmoddi4+0x7c>
 80002f2:	d02d      	beq.n	8000350 <__udivmoddi4+0x78>
 80002f4:	4649      	mov	r1, r9
 80002f6:	4650      	mov	r0, sl
 80002f8:	f000 f8ba 	bl	8000470 <__clzdi2>
 80002fc:	0029      	movs	r1, r5
 80002fe:	0006      	movs	r6, r0
 8000300:	0020      	movs	r0, r4
 8000302:	f000 f8b5 	bl	8000470 <__clzdi2>
 8000306:	1a33      	subs	r3, r6, r0
 8000308:	4698      	mov	r8, r3
 800030a:	3b20      	subs	r3, #32
 800030c:	469b      	mov	fp, r3
 800030e:	d433      	bmi.n	8000378 <__udivmoddi4+0xa0>
 8000310:	465a      	mov	r2, fp
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	4642      	mov	r2, r8
 8000318:	001f      	movs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d83a      	bhi.n	800039a <__udivmoddi4+0xc2>
 8000324:	42af      	cmp	r7, r5
 8000326:	d100      	bne.n	800032a <__udivmoddi4+0x52>
 8000328:	e078      	b.n	800041c <__udivmoddi4+0x144>
 800032a:	465b      	mov	r3, fp
 800032c:	1ba4      	subs	r4, r4, r6
 800032e:	41bd      	sbcs	r5, r7
 8000330:	2b00      	cmp	r3, #0
 8000332:	da00      	bge.n	8000336 <__udivmoddi4+0x5e>
 8000334:	e075      	b.n	8000422 <__udivmoddi4+0x14a>
 8000336:	2200      	movs	r2, #0
 8000338:	2300      	movs	r3, #0
 800033a:	9200      	str	r2, [sp, #0]
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	465a      	mov	r2, fp
 8000342:	4093      	lsls	r3, r2
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	4642      	mov	r2, r8
 800034a:	4093      	lsls	r3, r2
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	e028      	b.n	80003a2 <__udivmoddi4+0xca>
 8000350:	4282      	cmp	r2, r0
 8000352:	d9cf      	bls.n	80002f4 <__udivmoddi4+0x1c>
 8000354:	2200      	movs	r2, #0
 8000356:	2300      	movs	r3, #0
 8000358:	9200      	str	r2, [sp, #0]
 800035a:	9301      	str	r3, [sp, #4]
 800035c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <__udivmoddi4+0x8e>
 8000362:	601c      	str	r4, [r3, #0]
 8000364:	605d      	str	r5, [r3, #4]
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	b003      	add	sp, #12
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
 800036e:	46bb      	mov	fp, r7
 8000370:	46b2      	mov	sl, r6
 8000372:	46a9      	mov	r9, r5
 8000374:	46a0      	mov	r8, r4
 8000376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000378:	4642      	mov	r2, r8
 800037a:	2320      	movs	r3, #32
 800037c:	1a9b      	subs	r3, r3, r2
 800037e:	4652      	mov	r2, sl
 8000380:	40da      	lsrs	r2, r3
 8000382:	4641      	mov	r1, r8
 8000384:	0013      	movs	r3, r2
 8000386:	464a      	mov	r2, r9
 8000388:	408a      	lsls	r2, r1
 800038a:	0017      	movs	r7, r2
 800038c:	4642      	mov	r2, r8
 800038e:	431f      	orrs	r7, r3
 8000390:	4653      	mov	r3, sl
 8000392:	4093      	lsls	r3, r2
 8000394:	001e      	movs	r6, r3
 8000396:	42af      	cmp	r7, r5
 8000398:	d9c4      	bls.n	8000324 <__udivmoddi4+0x4c>
 800039a:	2200      	movs	r2, #0
 800039c:	2300      	movs	r3, #0
 800039e:	9200      	str	r2, [sp, #0]
 80003a0:	9301      	str	r3, [sp, #4]
 80003a2:	4643      	mov	r3, r8
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0d9      	beq.n	800035c <__udivmoddi4+0x84>
 80003a8:	07fb      	lsls	r3, r7, #31
 80003aa:	0872      	lsrs	r2, r6, #1
 80003ac:	431a      	orrs	r2, r3
 80003ae:	4646      	mov	r6, r8
 80003b0:	087b      	lsrs	r3, r7, #1
 80003b2:	e00e      	b.n	80003d2 <__udivmoddi4+0xfa>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d101      	bne.n	80003bc <__udivmoddi4+0xe4>
 80003b8:	42a2      	cmp	r2, r4
 80003ba:	d80c      	bhi.n	80003d6 <__udivmoddi4+0xfe>
 80003bc:	1aa4      	subs	r4, r4, r2
 80003be:	419d      	sbcs	r5, r3
 80003c0:	2001      	movs	r0, #1
 80003c2:	1924      	adds	r4, r4, r4
 80003c4:	416d      	adcs	r5, r5
 80003c6:	2100      	movs	r1, #0
 80003c8:	3e01      	subs	r6, #1
 80003ca:	1824      	adds	r4, r4, r0
 80003cc:	414d      	adcs	r5, r1
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d006      	beq.n	80003e0 <__udivmoddi4+0x108>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d9ee      	bls.n	80003b4 <__udivmoddi4+0xdc>
 80003d6:	3e01      	subs	r6, #1
 80003d8:	1924      	adds	r4, r4, r4
 80003da:	416d      	adcs	r5, r5
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d1f8      	bne.n	80003d2 <__udivmoddi4+0xfa>
 80003e0:	9800      	ldr	r0, [sp, #0]
 80003e2:	9901      	ldr	r1, [sp, #4]
 80003e4:	465b      	mov	r3, fp
 80003e6:	1900      	adds	r0, r0, r4
 80003e8:	4169      	adcs	r1, r5
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	db24      	blt.n	8000438 <__udivmoddi4+0x160>
 80003ee:	002b      	movs	r3, r5
 80003f0:	465a      	mov	r2, fp
 80003f2:	4644      	mov	r4, r8
 80003f4:	40d3      	lsrs	r3, r2
 80003f6:	002a      	movs	r2, r5
 80003f8:	40e2      	lsrs	r2, r4
 80003fa:	001c      	movs	r4, r3
 80003fc:	465b      	mov	r3, fp
 80003fe:	0015      	movs	r5, r2
 8000400:	2b00      	cmp	r3, #0
 8000402:	db2a      	blt.n	800045a <__udivmoddi4+0x182>
 8000404:	0026      	movs	r6, r4
 8000406:	409e      	lsls	r6, r3
 8000408:	0033      	movs	r3, r6
 800040a:	0026      	movs	r6, r4
 800040c:	4647      	mov	r7, r8
 800040e:	40be      	lsls	r6, r7
 8000410:	0032      	movs	r2, r6
 8000412:	1a80      	subs	r0, r0, r2
 8000414:	4199      	sbcs	r1, r3
 8000416:	9000      	str	r0, [sp, #0]
 8000418:	9101      	str	r1, [sp, #4]
 800041a:	e79f      	b.n	800035c <__udivmoddi4+0x84>
 800041c:	42a3      	cmp	r3, r4
 800041e:	d8bc      	bhi.n	800039a <__udivmoddi4+0xc2>
 8000420:	e783      	b.n	800032a <__udivmoddi4+0x52>
 8000422:	4642      	mov	r2, r8
 8000424:	2320      	movs	r3, #32
 8000426:	2100      	movs	r1, #0
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	2200      	movs	r2, #0
 800042c:	9100      	str	r1, [sp, #0]
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	2201      	movs	r2, #1
 8000432:	40da      	lsrs	r2, r3
 8000434:	9201      	str	r2, [sp, #4]
 8000436:	e786      	b.n	8000346 <__udivmoddi4+0x6e>
 8000438:	4642      	mov	r2, r8
 800043a:	2320      	movs	r3, #32
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	002a      	movs	r2, r5
 8000440:	4646      	mov	r6, r8
 8000442:	409a      	lsls	r2, r3
 8000444:	0023      	movs	r3, r4
 8000446:	40f3      	lsrs	r3, r6
 8000448:	4644      	mov	r4, r8
 800044a:	4313      	orrs	r3, r2
 800044c:	002a      	movs	r2, r5
 800044e:	40e2      	lsrs	r2, r4
 8000450:	001c      	movs	r4, r3
 8000452:	465b      	mov	r3, fp
 8000454:	0015      	movs	r5, r2
 8000456:	2b00      	cmp	r3, #0
 8000458:	dad4      	bge.n	8000404 <__udivmoddi4+0x12c>
 800045a:	4642      	mov	r2, r8
 800045c:	002f      	movs	r7, r5
 800045e:	2320      	movs	r3, #32
 8000460:	0026      	movs	r6, r4
 8000462:	4097      	lsls	r7, r2
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	40de      	lsrs	r6, r3
 8000468:	003b      	movs	r3, r7
 800046a:	4333      	orrs	r3, r6
 800046c:	e7cd      	b.n	800040a <__udivmoddi4+0x132>
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__clzdi2>:
 8000470:	b510      	push	{r4, lr}
 8000472:	2900      	cmp	r1, #0
 8000474:	d103      	bne.n	800047e <__clzdi2+0xe>
 8000476:	f000 f807 	bl	8000488 <__clzsi2>
 800047a:	3020      	adds	r0, #32
 800047c:	e002      	b.n	8000484 <__clzdi2+0x14>
 800047e:	1c08      	adds	r0, r1, #0
 8000480:	f000 f802 	bl	8000488 <__clzsi2>
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__clzsi2>:
 8000488:	211c      	movs	r1, #28
 800048a:	2301      	movs	r3, #1
 800048c:	041b      	lsls	r3, r3, #16
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0xe>
 8000492:	0c00      	lsrs	r0, r0, #16
 8000494:	3910      	subs	r1, #16
 8000496:	0a1b      	lsrs	r3, r3, #8
 8000498:	4298      	cmp	r0, r3
 800049a:	d301      	bcc.n	80004a0 <__clzsi2+0x18>
 800049c:	0a00      	lsrs	r0, r0, #8
 800049e:	3908      	subs	r1, #8
 80004a0:	091b      	lsrs	r3, r3, #4
 80004a2:	4298      	cmp	r0, r3
 80004a4:	d301      	bcc.n	80004aa <__clzsi2+0x22>
 80004a6:	0900      	lsrs	r0, r0, #4
 80004a8:	3904      	subs	r1, #4
 80004aa:	a202      	add	r2, pc, #8	; (adr r2, 80004b4 <__clzsi2+0x2c>)
 80004ac:	5c10      	ldrb	r0, [r2, r0]
 80004ae:	1840      	adds	r0, r0, r1
 80004b0:	4770      	bx	lr
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	02020304 	.word	0x02020304
 80004b8:	01010101 	.word	0x01010101
	...

080004c4 <msp_exp_state_initialize>:
 * If available, the sequence flags passed as an argument should be the
 * sequence flags that were saved to non-volatile memory/storage before the
 * experiment was restarted/powered off.
 */
void msp_exp_state_initialize(msp_seqflags_t seqflags)
{
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	b085      	sub	sp, #20
 80004c8:	466c      	mov	r4, sp
 80004ca:	6061      	str	r1, [r4, #4]
	msp_exp_state.type = MSP_EXP_STATE_READY;
 80004cc:	4907      	ldr	r1, [pc, #28]	; (80004ec <msp_exp_state_initialize+0x28>)
{
 80004ce:	9000      	str	r0, [sp, #0]
 80004d0:	60a2      	str	r2, [r4, #8]
	msp_exp_state.type = MSP_EXP_STATE_READY;
 80004d2:	2000      	movs	r0, #0

	msp_exp_state.seqflags = seqflags;
 80004d4:	000a      	movs	r2, r1
	msp_exp_state.type = MSP_EXP_STATE_READY;
 80004d6:	7008      	strb	r0, [r1, #0]
	msp_exp_state.seqflags = seqflags;
 80004d8:	3208      	adds	r2, #8
 80004da:	cce0      	ldmia	r4!, {r5, r6, r7}
 80004dc:	c2e0      	stmia	r2!, {r5, r6, r7}
 80004de:	6013      	str	r3, [r2, #0]

	msp_exp_state.busy = 0;
	msp_exp_state.initialized = 1;
 80004e0:	2301      	movs	r3, #1
	msp_exp_state.busy = 0;
 80004e2:	7088      	strb	r0, [r1, #2]
	msp_exp_state.initialized = 1;
 80004e4:	704b      	strb	r3, [r1, #1]
}
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	2000009c 	.word	0x2000009c

080004f0 <msp_seqflags_init>:
	flags.inits[0] = 0;
	flags.inits[1] = 0;
	flags.inits[2] = 0;
	flags.inits[3] = 0;
	
	return flags;
 80004f0:	2300      	movs	r3, #0
 80004f2:	8003      	strh	r3, [r0, #0]
 80004f4:	8043      	strh	r3, [r0, #2]
 80004f6:	8083      	strh	r3, [r0, #4]
 80004f8:	80c3      	strh	r3, [r0, #6]
 80004fa:	8103      	strh	r3, [r0, #8]
 80004fc:	8143      	strh	r3, [r0, #10]
 80004fe:	8183      	strh	r3, [r0, #12]
 8000500:	81c3      	strh	r3, [r0, #14]
}
 8000502:	4770      	bx	lr

08000504 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000504:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	2208      	movs	r2, #8
 8000508:	2100      	movs	r1, #0
 800050a:	4668      	mov	r0, sp
 800050c:	f003 f8c3 	bl	8003696 <memset>
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000510:	2203      	movs	r2, #3
  hadc.Init.OversamplingMode = DISABLE;
 8000512:	4c3a      	ldr	r4, [pc, #232]	; (80005fc <MX_ADC_Init+0xf8>)
 8000514:	2300      	movs	r3, #0
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000516:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000518:	22c2      	movs	r2, #194	; 0xc2
 800051a:	32ff      	adds	r2, #255	; 0xff
 800051c:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800051e:	0022      	movs	r2, r4
 8000520:	322c      	adds	r2, #44	; 0x2c
 8000522:	7013      	strb	r3, [r2, #0]
  hadc.Instance = ADC1;
 8000524:	4a36      	ldr	r2, [pc, #216]	; (8000600 <MX_ADC_Init+0xfc>)
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000526:	2501      	movs	r5, #1
  hadc.Instance = ADC1;
 8000528:	6022      	str	r2, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800052a:	22c0      	movs	r2, #192	; 0xc0
 800052c:	0612      	lsls	r2, r2, #24
 800052e:	6062      	str	r2, [r4, #4]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000530:	2204      	movs	r2, #4
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000532:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode = ENABLE;
 8000534:	8425      	strh	r5, [r4, #32]
  hadc.Init.OversamplingMode = DISABLE;
 8000536:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000538:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800053a:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800053c:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800053e:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000540:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000542:	6125      	str	r5, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000544:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000546:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000548:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800054a:	f001 f91b 	bl	8001784 <HAL_ADC_Init>
 800054e:	2800      	cmp	r0, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC_Init+0x52>
  {
    Error_Handler();
 8000552:	f000 fc0f 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000556:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000558:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800055a:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800055c:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 800055e:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000560:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000562:	f001 fa9b 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000566:	2800      	cmp	r0, #0
 8000568:	d001      	beq.n	800056e <MX_ADC_Init+0x6a>
  {
    Error_Handler();
 800056a:	f000 fc03 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <MX_ADC_Init+0x100>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000570:	4669      	mov	r1, sp
 8000572:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000574:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000576:	f001 fa91 	bl	8001a9c <HAL_ADC_ConfigChannel>
 800057a:	2800      	cmp	r0, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 800057e:	f000 fbf9 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_ADC_Init+0x104>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000584:	4669      	mov	r1, sp
 8000586:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8000588:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800058a:	f001 fa87 	bl	8001a9c <HAL_ADC_ConfigChannel>
 800058e:	2800      	cmp	r0, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8000592:	f000 fbef 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC_Init+0x108>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000598:	4669      	mov	r1, sp
 800059a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 800059c:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800059e:	f001 fa7d 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80005a6:	f000 fbe5 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_ADC_Init+0x10c>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005ac:	4669      	mov	r1, sp
 80005ae:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80005b0:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005b2:	f001 fa73 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC_Init+0xba>
  {
    Error_Handler();
 80005ba:	f000 fbdb 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_ADC_Init+0x110>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005c0:	4669      	mov	r1, sp
 80005c2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 80005c4:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005c6:	f001 fa69 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC_Init+0xce>
  {
    Error_Handler();
 80005ce:	f000 fbd1 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_ADC_Init+0x114>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005d4:	4669      	mov	r1, sp
 80005d6:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_7;
 80005d8:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005da:	f001 fa5f 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80005de:	2800      	cmp	r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC_Init+0xe2>
  {
    Error_Handler();
 80005e2:	f000 fbc7 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MX_ADC_Init+0x118>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005e8:	4669      	mov	r1, sp
 80005ea:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 80005ec:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005ee:	f001 fa55 	bl	8001a9c <HAL_ADC_ConfigChannel>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC_Init+0xf6>
  {
    Error_Handler();
 80005f6:	f000 fbbd 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005fa:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80005fc:	200001b8 	.word	0x200001b8
 8000600:	40012400 	.word	0x40012400
 8000604:	04000002 	.word	0x04000002
 8000608:	08000004 	.word	0x08000004
 800060c:	0c000008 	.word	0x0c000008
 8000610:	14000020 	.word	0x14000020
 8000614:	18000040 	.word	0x18000040
 8000618:	1c000080 	.word	0x1c000080
 800061c:	20000100 	.word	0x20000100

08000620 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	0004      	movs	r4, r0
 8000624:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	2214      	movs	r2, #20
 8000628:	2100      	movs	r1, #0
 800062a:	a803      	add	r0, sp, #12
 800062c:	f003 f833 	bl	8003696 <memset>
  if(adcHandle->Instance==ADC1)
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <HAL_ADC_MspInit+0x6c>)
 8000632:	6822      	ldr	r2, [r4, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	d127      	bne.n	8000688 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000638:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2401      	movs	r4, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_ADC_MspInit+0x70>)
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	6b59      	ldr	r1, [r3, #52]	; 0x34
    */
    GPIO_InitStruct.Pin = IN0_VT_Si_Pin|IN1_Vbe_Si_Pin|IN2_Vb_Si_Pin|IN3_Vc_Si_Pin
                          |IN5_VT_SiC_Pin|IN6_Vbe_SiC_Pin|IN7_Vb_SiC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000644:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2102      	movs	r1, #2
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064c:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4322      	orrs	r2, r4
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
 8000652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4022      	ands	r2, r4
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	430a      	orrs	r2, r1
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000666:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	400b      	ands	r3, r1
 800066a:	9302      	str	r3, [sp, #8]
 800066c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IN0_VT_Si_Pin|IN1_Vbe_Si_Pin|IN2_Vb_Si_Pin|IN3_Vc_Si_Pin
 800066e:	23ef      	movs	r3, #239	; 0xef
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = IN0_VT_Si_Pin|IN1_Vbe_Si_Pin|IN2_Vb_Si_Pin|IN3_Vc_Si_Pin
 8000672:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f001 fba5 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN8_Vc_SiC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(IN8_Vc_SiC_GPIO_Port, &GPIO_InitStruct);
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <HAL_ADC_MspInit+0x74>)
 800067c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = IN8_Vc_SiC_Pin;
 800067e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(IN8_Vc_SiC_GPIO_Port, &GPIO_InitStruct);
 8000684:	f001 fb9e 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000688:	b008      	add	sp, #32
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	40012400 	.word	0x40012400
 8000690:	40021000 	.word	0x40021000
 8000694:	50000400 	.word	0x50000400

08000698 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000698:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800069a:	2208      	movs	r2, #8
 800069c:	2100      	movs	r1, #0
 800069e:	4668      	mov	r0, sp
 80006a0:	f002 fff9 	bl	8003696 <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006a4:	4c0a      	ldr	r4, [pc, #40]	; (80006d0 <MX_DAC_Init+0x38>)
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_DAC_Init+0x3c>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006a8:	0020      	movs	r0, r4
  hdac.Instance = DAC;
 80006aa:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006ac:	f001 fafe 	bl	8001cac <HAL_DAC_Init>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_DAC_Init+0x20>
  {
    Error_Handler();
 80006b4:	f000 fb5e 	bl	8000d74 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b8:	2200      	movs	r2, #0
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006ba:	4669      	mov	r1, sp
 80006bc:	0020      	movs	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006be:	9200      	str	r2, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006c0:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006c2:	f001 fb07 	bl	8001cd4 <HAL_DAC_ConfigChannel>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_DAC_Init+0x36>
  {
    Error_Handler();
 80006ca:	f000 fb53 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006ce:	bd13      	pop	{r0, r1, r4, pc}
 80006d0:	20000214 	.word	0x20000214
 80006d4:	40007400 	.word	0x40007400

080006d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006d8:	b510      	push	{r4, lr}
 80006da:	0004      	movs	r4, r0
 80006dc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	2214      	movs	r2, #20
 80006e0:	2100      	movs	r1, #0
 80006e2:	a801      	add	r0, sp, #4
 80006e4:	f002 ffd7 	bl	8003696 <memset>
  if(dacHandle->Instance==DAC)
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_DAC_MspInit+0x50>)
 80006ea:	6822      	ldr	r2, [r4, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d118      	bne.n	8000722 <HAL_DAC_MspInit+0x4a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_DAC_MspInit+0x54>)
 80006f4:	0592      	lsls	r2, r2, #22
 80006f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_DAC_CLK_ENABLE();
 80006fa:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	2101      	movs	r1, #1
    __HAL_RCC_DAC_CLK_ENABLE();
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	430a      	orrs	r2, r1
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	400b      	ands	r3, r1
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000710:	2310      	movs	r3, #16
 8000712:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000714:	3b0d      	subs	r3, #13
 8000716:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f001 fb51 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000722:	b006      	add	sp, #24
 8000724:	bd10      	pop	{r4, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40007400 	.word	0x40007400
 800072c:	40021000 	.word	0x40021000

08000730 <find_current_EEPROM_address>:
 * @return the offset from the base adress of the buffer
 *
 * finds the offset for the current memory location
 */
static int find_current_EEPROM_address(void)
{
 8000730:	b510      	push	{r4, lr}
  int offset = 0;
 8000732:	2000      	movs	r0, #0

  while (((*(__IO uint16_t *)(INDEX_BUFFER_START_ADDR + offset))+1) == (*(__IO uint16_t *)(INDEX_BUFFER_START_ADDR + offset +2)))
  {
    offset = (offset + 2)%BUFFER_SIZE;
 8000734:	2444      	movs	r4, #68	; 0x44
  while (((*(__IO uint16_t *)(INDEX_BUFFER_START_ADDR + offset))+1) == (*(__IO uint16_t *)(INDEX_BUFFER_START_ADDR + offset +2)))
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <find_current_EEPROM_address+0x28>)
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <find_current_EEPROM_address+0x2c>)
 800073a:	18c3      	adds	r3, r0, r3
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	1882      	adds	r2, r0, r2
 8000740:	8812      	ldrh	r2, [r2, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4293      	cmp	r3, r2
 8000746:	d000      	beq.n	800074a <find_current_EEPROM_address+0x1a>
  }
  return offset;
}
 8000748:	bd10      	pop	{r4, pc}
    offset = (offset + 2)%BUFFER_SIZE;
 800074a:	0021      	movs	r1, r4
 800074c:	3002      	adds	r0, #2
 800074e:	f7ff fd75 	bl	800023c <__aeabi_uidivmod>
 8000752:	0008      	movs	r0, r1
 8000754:	e7ef      	b.n	8000736 <find_current_EEPROM_address+0x6>
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	08080000 	.word	0x08080000
 800075c:	08080002 	.word	0x08080002

08000760 <checksum>:
{
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	0004      	movs	r4, r0
    uint16_t chk = 0;
 8000764:	2000      	movs	r0, #0
    while (size1-- != 0)
 8000766:	3901      	subs	r1, #1
 8000768:	b2c9      	uxtb	r1, r1
 800076a:	29ff      	cmp	r1, #255	; 0xff
 800076c:	d104      	bne.n	8000778 <checksum+0x18>
    while (size2-- != 0)
 800076e:	3b01      	subs	r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2bff      	cmp	r3, #255	; 0xff
 8000774:	d105      	bne.n	8000782 <checksum+0x22>
}
 8000776:	bd30      	pop	{r4, r5, pc}
        chk -= *ptr1++;
 8000778:	8825      	ldrh	r5, [r4, #0]
 800077a:	3402      	adds	r4, #2
 800077c:	1b40      	subs	r0, r0, r5
 800077e:	b280      	uxth	r0, r0
 8000780:	e7f1      	b.n	8000766 <checksum+0x6>
        chk -= *ptr2++;
 8000782:	8811      	ldrh	r1, [r2, #0]
 8000784:	3202      	adds	r2, #2
 8000786:	1a40      	subs	r0, r0, r1
 8000788:	b280      	uxth	r0, r0
 800078a:	e7f0      	b.n	800076e <checksum+0xe>

0800078c <EEPROM_read_buffer>:
 * function written inorder to save 64 bit of data. shoud
 * be used for saving msp sequence flags
 *  
 */
bool EEPROM_read_buffer(unsigned short *data1, unsigned short *data2)
{
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	0005      	movs	r5, r0
 8000790:	000e      	movs	r6, r1
  int offset = find_current_EEPROM_address();
 8000792:	f7ff ffcd 	bl	8000730 <find_current_EEPROM_address>
  uint16_t checksum_stored;
  
  if (offset == 0)
 8000796:	2800      	cmp	r0, #0
 8000798:	d125      	bne.n	80007e6 <EEPROM_read_buffer+0x5a>
  {
    data1[0] = (*(__IO uint16_t *)(BUFFER_1_START_ADDR));
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <EEPROM_read_buffer+0xa4>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	802b      	strh	r3, [r5, #0]
    data1[1] = (*(__IO uint16_t *)(BUFFER_2_START_ADDR));
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <EEPROM_read_buffer+0xa8>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	806b      	strh	r3, [r5, #2]
    data1[2] = (*(__IO uint16_t *)(BUFFER_3_START_ADDR));
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <EEPROM_read_buffer+0xac>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	80ab      	strh	r3, [r5, #4]
    data1[3] = (*(__IO uint16_t *)(BUFFER_4_START_ADDR));
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <EEPROM_read_buffer+0xb0>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	80eb      	strh	r3, [r5, #6]
    
    data2[0] = (*(__IO uint16_t *)(BUFFER_5_START_ADDR));
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <EEPROM_read_buffer+0xb4>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	8033      	strh	r3, [r6, #0]
    data2[1] = (*(__IO uint16_t *)(BUFFER_6_START_ADDR));
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <EEPROM_read_buffer+0xb8>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	8073      	strh	r3, [r6, #2]
    data2[2] = (*(__IO uint16_t *)(BUFFER_7_START_ADDR));
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <EEPROM_read_buffer+0xbc>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	80b3      	strh	r3, [r6, #4]
    data2[3] = (*(__IO uint16_t *)(BUFFER_8_START_ADDR));
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <EEPROM_read_buffer+0xc0>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	80f3      	strh	r3, [r6, #6]
    
    checksum_stored = (*(__IO uint16_t *)(CHECKSUM_BUFFER));
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <EEPROM_read_buffer+0xc4>)
 80007cc:	881c      	ldrh	r4, [r3, #0]
    
    checksum_stored = (*(__IO uint16_t *)(CHECKSUM_BUFFER + offset));
  }
  

  uint16_t checksum_result = checksum(data1, 4, data2, 4);
 80007ce:	2304      	movs	r3, #4
 80007d0:	0032      	movs	r2, r6
 80007d2:	0028      	movs	r0, r5
 80007d4:	0019      	movs	r1, r3
 80007d6:	f7ff ffc3 	bl	8000760 <checksum>
    checksum_stored = (*(__IO uint16_t *)(CHECKSUM_BUFFER + offset));
 80007da:	b2a4      	uxth	r4, r4
  return ((checksum_result-checksum_stored) == 0);
 80007dc:	1a20      	subs	r0, r4, r0
 80007de:	4244      	negs	r4, r0
 80007e0:	4160      	adcs	r0, r4
 80007e2:	b2c0      	uxtb	r0, r0
}
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
    data1[0] = (*(__IO uint16_t *)(BUFFER_1_START_ADDR + offset));
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <EEPROM_read_buffer+0xc8>)
 80007e8:	18c3      	adds	r3, r0, r3
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	802b      	strh	r3, [r5, #0]
    data1[1] = (*(__IO uint16_t *)(BUFFER_2_START_ADDR + offset));
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <EEPROM_read_buffer+0xcc>)
 80007f0:	18c3      	adds	r3, r0, r3
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	806b      	strh	r3, [r5, #2]
    data1[2] = (*(__IO uint16_t *)(BUFFER_3_START_ADDR + offset));
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <EEPROM_read_buffer+0xd0>)
 80007f8:	18c3      	adds	r3, r0, r3
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	80ab      	strh	r3, [r5, #4]
    data1[3] = (*(__IO uint16_t *)(BUFFER_4_START_ADDR + offset));
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <EEPROM_read_buffer+0xd4>)
 8000800:	18c3      	adds	r3, r0, r3
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	80eb      	strh	r3, [r5, #6]
    data2[0] = (*(__IO uint16_t *)(BUFFER_5_START_ADDR + offset));
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <EEPROM_read_buffer+0xd8>)
 8000808:	18c3      	adds	r3, r0, r3
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	8033      	strh	r3, [r6, #0]
    data2[1] = (*(__IO uint16_t *)(BUFFER_6_START_ADDR + offset));
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <EEPROM_read_buffer+0xdc>)
 8000810:	18c3      	adds	r3, r0, r3
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	8073      	strh	r3, [r6, #2]
    data2[2] = (*(__IO uint16_t *)(BUFFER_7_START_ADDR + offset));
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <EEPROM_read_buffer+0xe0>)
 8000818:	18c3      	adds	r3, r0, r3
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	80b3      	strh	r3, [r6, #4]
    data2[3] = (*(__IO uint16_t *)(BUFFER_8_START_ADDR + offset));
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <EEPROM_read_buffer+0xe4>)
 8000820:	18c3      	adds	r3, r0, r3
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	80f3      	strh	r3, [r6, #6]
    checksum_stored = (*(__IO uint16_t *)(CHECKSUM_BUFFER + offset));
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <EEPROM_read_buffer+0xe8>)
 8000828:	18c0      	adds	r0, r0, r3
 800082a:	8804      	ldrh	r4, [r0, #0]
 800082c:	e7cf      	b.n	80007ce <EEPROM_read_buffer+0x42>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	08080044 	.word	0x08080044
 8000834:	08080088 	.word	0x08080088
 8000838:	080800cc 	.word	0x080800cc
 800083c:	08080110 	.word	0x08080110
 8000840:	08080154 	.word	0x08080154
 8000844:	08080198 	.word	0x08080198
 8000848:	080801dc 	.word	0x080801dc
 800084c:	08080220 	.word	0x08080220
 8000850:	08080264 	.word	0x08080264
 8000854:	08080042 	.word	0x08080042
 8000858:	08080086 	.word	0x08080086
 800085c:	080800ca 	.word	0x080800ca
 8000860:	0808010e 	.word	0x0808010e
 8000864:	08080152 	.word	0x08080152
 8000868:	08080196 	.word	0x08080196
 800086c:	080801da 	.word	0x080801da
 8000870:	0808021e 	.word	0x0808021e
 8000874:	08080262 	.word	0x08080262

08000878 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	2214      	movs	r2, #20
 800087e:	2100      	movs	r1, #0
 8000880:	a805      	add	r0, sp, #20
 8000882:	f002 ff08 	bl	8003696 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2004      	movs	r0, #4
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 800088a:	4f38      	ldr	r7, [pc, #224]	; (800096c <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin|USART1_DE_Pin, GPIO_PIN_RESET);
 800088e:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000890:	4301      	orrs	r1, r0
 8000892:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin|USART1_DE_Pin, GPIO_PIN_RESET);
 8000896:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	4002      	ands	r2, r0
 800089a:	9201      	str	r2, [sp, #4]
 800089c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008a0:	307c      	adds	r0, #124	; 0x7c
 80008a2:	4301      	orrs	r1, r0
 80008a4:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2101      	movs	r1, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ac:	4002      	ands	r2, r0
 80008ae:	9202      	str	r2, [sp, #8]
 80008b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 80008b4:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	430a      	orrs	r2, r1
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008bc:	2503      	movs	r5, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	400a      	ands	r2, r1
 80008c0:	9203      	str	r2, [sp, #12]
 80008c2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c6:	1849      	adds	r1, r1, r1
 80008c8:	430a      	orrs	r2, r1
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 80008d2:	21f0      	movs	r1, #240	; 0xf0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 80008d6:	0189      	lsls	r1, r1, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin, GPIO_PIN_RESET);
 80008da:	f001 fb2f 	bl	8001f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin|USART1_DE_Pin, GPIO_PIN_RESET);
 80008de:	21c0      	movs	r1, #192	; 0xc0
 80008e0:	2200      	movs	r2, #0
 80008e2:	0030      	movs	r0, r6
 80008e4:	0149      	lsls	r1, r1, #5
 80008e6:	f001 fb29 	bl	8001f3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008ea:	23e0      	movs	r3, #224	; 0xe0
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f0:	ab05      	add	r3, sp, #20
 80008f2:	0019      	movs	r1, r3
 80008f4:	481e      	ldr	r0, [pc, #120]	; (8000970 <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f001 fa63 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008fe:	ab05      	add	r3, sp, #20
 8000900:	0019      	movs	r1, r3
 8000902:	481c      	ldr	r0, [pc, #112]	; (8000974 <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000904:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000906:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800090a:	f001 fa5b 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_GPIO_Init+0x100>)
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 8000912:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	ab05      	add	r3, sp, #20
 8000916:	0019      	movs	r1, r3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000918:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f001 fa52 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin;
 8000920:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = Linear_10V_ON_Pin|Piezo_48V_ON_Pin|Battery_SW_ON_Pin|Piezo_ON_Pin;
 8000924:	019b      	lsls	r3, r3, #6
 8000926:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	ab05      	add	r3, sp, #20
 800092a:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	9106      	str	r1, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	0019      	movs	r1, r3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f001 fa46 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000938:	2381      	movs	r3, #129	; 0x81
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	ab05      	add	r3, sp, #20
 8000940:	0019      	movs	r1, r3
 8000942:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f001 fa3c 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART1_NRE_Pin|USART1_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = USART1_NRE_Pin|USART1_DE_Pin;
 800094e:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	9106      	str	r1, [sp, #24]
  GPIO_InitStruct.Pin = USART1_NRE_Pin|USART1_DE_Pin;
 8000952:	015b      	lsls	r3, r3, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	0030      	movs	r0, r6
 8000956:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = USART1_NRE_Pin|USART1_DE_Pin;
 8000958:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f001 fa31 	bl	8001dc4 <HAL_GPIO_Init>

}
 8000962:	b00b      	add	sp, #44	; 0x2c
 8000964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40021000 	.word	0x40021000
 800096c:	50000400 	.word	0x50000400
 8000970:	50000800 	.word	0x50000800
 8000974:	50001c00 	.word	0x50001c00
 8000978:	0000c33e 	.word	0x0000c33e

0800097c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800097c:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_I2C1_Init+0x50>)
 8000980:	4c13      	ldr	r4, [pc, #76]	; (80009d0 <MX_I2C1_Init+0x54>)
 8000982:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000004;
 8000984:	2304      	movs	r3, #4
 8000986:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 138;
 8000988:	3386      	adds	r3, #134	; 0x86
 800098a:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098c:	3b89      	subs	r3, #137	; 0x89
 800098e:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000992:	0020      	movs	r0, r4
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000998:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099c:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099e:	f001 fb05 	bl	8001fac <HAL_I2C_Init>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x2e>
  {
    Error_Handler();
 80009a6:	f000 f9e5 	bl	8000d74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	0020      	movs	r0, r4
 80009ae:	f001 fe2b 	bl	8002608 <HAL_I2CEx_ConfigAnalogFilter>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C1_Init+0x3e>
  {
    Error_Handler();
 80009b6:	f000 f9dd 	bl	8000d74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	0020      	movs	r0, r4
 80009be:	f001 fe49 	bl	8002654 <HAL_I2CEx_ConfigDigitalFilter>
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80009c6:	f000 f9d5 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ca:	bd10      	pop	{r4, pc}
 80009cc:	40005400 	.word	0x40005400
 80009d0:	20000224 	.word	0x20000224

080009d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009d4:	b530      	push	{r4, r5, lr}
 80009d6:	0004      	movs	r4, r0
 80009d8:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	2214      	movs	r2, #20
 80009dc:	2100      	movs	r1, #0
 80009de:	a801      	add	r0, sp, #4
 80009e0:	f002 fe59 	bl	8003696 <memset>
  if(i2cHandle->Instance==I2C1)
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_I2C_MspInit+0x64>)
 80009e6:	6822      	ldr	r2, [r4, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d123      	bne.n	8000a34 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	2102      	movs	r1, #2
 80009ee:	4c13      	ldr	r4, [pc, #76]	; (8000a3c <HAL_I2C_MspInit+0x68>)
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	4812      	ldr	r0, [pc, #72]	; (8000a40 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	430a      	orrs	r2, r1
 80009f8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80009fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	400b      	ands	r3, r1
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a04:	23c0      	movs	r3, #192	; 0xc0
 8000a06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a08:	3bae      	subs	r3, #174	; 0xae
 8000a0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	3b0f      	subs	r3, #15
 8000a0e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a12:	3b02      	subs	r3, #2
 8000a14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f001 f9d5 	bl	8001dc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a1e:	039b      	lsls	r3, r3, #14
 8000a20:	4313      	orrs	r3, r2

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000a22:	2017      	movs	r0, #23
 8000a24:	002a      	movs	r2, r5
 8000a26:	0029      	movs	r1, r5
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a28:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000a2a:	f001 f8ef 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000a2e:	2017      	movs	r0, #23
 8000a30:	f001 f916 	bl	8001c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a34:	b007      	add	sp, #28
 8000a36:	bd30      	pop	{r4, r5, pc}
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	50000400 	.word	0x50000400

08000a44 <restore_seqflags>:
#include "msp_exp_state.h"
#include "eeprom_circular.h"
#include "interface_flags.h"

void restore_seqflags(void)
{
 8000a44:	b500      	push	{lr}
 8000a46:	b089      	sub	sp, #36	; 0x24
    msp_seqflags_t seqflags;

    bool checksum_correct = EEPROM_read_buffer(seqflags.values, seqflags.inits);
 8000a48:	4668      	mov	r0, sp
 8000a4a:	a902      	add	r1, sp, #8
 8000a4c:	f7ff fe9e 	bl	800078c <EEPROM_read_buffer>
    if (checksum_correct)
 8000a50:	2800      	cmp	r0, #0
 8000a52:	d007      	beq.n	8000a64 <restore_seqflags+0x20>
    {
        msp_exp_state_initialize(seqflags);
 8000a54:	9800      	ldr	r0, [sp, #0]
 8000a56:	9901      	ldr	r1, [sp, #4]
 8000a58:	9a02      	ldr	r2, [sp, #8]
 8000a5a:	9b03      	ldr	r3, [sp, #12]
    }
    else
    {
        msp_exp_state_initialize(msp_seqflags_init());
 8000a5c:	f7ff fd32 	bl	80004c4 <msp_exp_state_initialize>
    }
}
 8000a60:	b009      	add	sp, #36	; 0x24
 8000a62:	bd00      	pop	{pc}
        msp_exp_state_initialize(msp_seqflags_init());
 8000a64:	a804      	add	r0, sp, #16
 8000a66:	f7ff fd43 	bl	80004f0 <msp_seqflags_init>
 8000a6a:	9804      	ldr	r0, [sp, #16]
 8000a6c:	9905      	ldr	r1, [sp, #20]
 8000a6e:	9a06      	ldr	r2, [sp, #24]
 8000a70:	9b07      	ldr	r3, [sp, #28]
 8000a72:	e7f3      	b.n	8000a5c <restore_seqflags+0x18>

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b500      	push	{lr}
 8000a76:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a78:	2234      	movs	r2, #52	; 0x34
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	a80f      	add	r0, sp, #60	; 0x3c
 8000a7e:	f002 fe0a 	bl	8003696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a82:	2214      	movs	r2, #20
 8000a84:	2100      	movs	r1, #0
 8000a86:	4668      	mov	r0, sp
 8000a88:	f002 fe05 	bl	8003696 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	2224      	movs	r2, #36	; 0x24
 8000a8e:	2100      	movs	r1, #0
 8000a90:	a805      	add	r0, sp, #20
 8000a92:	f002 fe00 	bl	8003696 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a96:	4919      	ldr	r1, [pc, #100]	; (8000afc <SystemClock_Config+0x88>)
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <SystemClock_Config+0x8c>)
 8000a9a:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aa8:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aaa:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aac:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aae:	3b0f      	subs	r3, #15
 8000ab0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ab2:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ab4:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ab6:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ab8:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aba:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f001 fe36 	bl	800272c <HAL_RCC_OscConfig>
 8000ac0:	1e01      	subs	r1, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000aca:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad6:	f002 f8ad 	bl	8002c34 <HAL_RCC_ClockConfig>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x6e>
 8000ade:	b672      	cpsid	i
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <SystemClock_Config+0x6c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000ae2:	2309      	movs	r3, #9
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ae4:	9008      	str	r0, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ae6:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000aea:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f002 f990 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x84>
 8000af4:	b672      	cpsid	i
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <SystemClock_Config+0x82>
}
 8000af8:	b01d      	add	sp, #116	; 0x74
 8000afa:	bd00      	pop	{pc}
 8000afc:	40007000 	.word	0x40007000
 8000b00:	ffffe7ff 	.word	0xffffe7ff

08000b04 <print16bit>:
  uint16_t val = (biggest_number << 8) + smallest_number;
 8000b04:	0200      	lsls	r0, r0, #8
 8000b06:	1841      	adds	r1, r0, r1
void print16bit(uint8_t biggest_number, uint8_t smallest_number, uint8_t number_format){
 8000b08:	b510      	push	{r4, lr}
  uint16_t val = (biggest_number << 8) + smallest_number;
 8000b0a:	b289      	uxth	r1, r1
  switch(number_format){
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	d005      	beq.n	8000b1c <print16bit+0x18>
 8000b10:	2a02      	cmp	r2, #2
 8000b12:	d007      	beq.n	8000b24 <print16bit+0x20>
      printf("%d\t", val);
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <print16bit+0x24>)
  switch(number_format){
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d001      	beq.n	8000b1e <print16bit+0x1a>
}
 8000b1a:	bd10      	pop	{r4, pc}
      printf("0x%x\t", val);
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <print16bit+0x28>)
      printf("0x02%x\t", val);
 8000b1e:	f002 fdc3 	bl	80036a8 <iprintf>
}
 8000b22:	e7fa      	b.n	8000b1a <print16bit+0x16>
      printf("0x02%x\t", val);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <print16bit+0x2c>)
 8000b26:	e7fa      	b.n	8000b1e <print16bit+0x1a>
 8000b28:	08004b34 	.word	0x08004b34
 8000b2c:	08004b38 	.word	0x08004b38
 8000b30:	08004b3e 	.word	0x08004b3e

08000b34 <start_driver>:
void start_driver(void){
 8000b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (run_transceiver_RE_DE){
 8000b36:	4b69      	ldr	r3, [pc, #420]	; (8000cdc <start_driver+0x1a8>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <start_driver+0x18>
     piezo_power_on();
 8000b3e:	f000 fa5b 	bl	8000ff8 <piezo_power_on>
     HAL_Delay(5000);
 8000b42:	4867      	ldr	r0, [pc, #412]	; (8000ce0 <start_driver+0x1ac>)
 8000b44:	f000 fd54 	bl	80015f0 <HAL_Delay>
     piezo_power_off();
 8000b48:	f000 fa72 	bl	8001030 <piezo_power_off>
    if(run_piezo || run_all){
 8000b4c:	4b65      	ldr	r3, [pc, #404]	; (8000ce4 <start_driver+0x1b0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d103      	bne.n	8000b5c <start_driver+0x28>
 8000b54:	4b64      	ldr	r3, [pc, #400]	; (8000ce8 <start_driver+0x1b4>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d021      	beq.n	8000ba0 <start_driver+0x6c>
      current_state = 0x1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4c63      	ldr	r4, [pc, #396]	; (8000cec <start_driver+0x1b8>)
       if(i % 8 == 0){
 8000b60:	2707      	movs	r7, #7
      current_state = 0x1;
 8000b62:	7023      	strb	r3, [r4, #0]
      piezo_start_exp();
 8000b64:	f000 f934 	bl	8000dd0 <piezo_start_exp>
      HAL_Delay(30000);
 8000b68:	4861      	ldr	r0, [pc, #388]	; (8000cf0 <start_driver+0x1bc>)
 8000b6a:	f000 fd41 	bl	80015f0 <HAL_Delay>
      current_state = 0x2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	7023      	strb	r3, [r4, #0]
      piezo_stop_exp();
 8000b72:	f000 fa27 	bl	8000fc4 <piezo_stop_exp>
      piezo_get_data((uint8_t*) piezoBufferDebug, 0);
 8000b76:	4e5f      	ldr	r6, [pc, #380]	; (8000cf4 <start_driver+0x1c0>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	0030      	movs	r0, r6
 8000b7c:	f000 f942 	bl	8000e04 <piezo_get_data>
      uint16_t length = piezo_get_data_length();
 8000b80:	f000 f950 	bl	8000e24 <piezo_get_data_length>
      for(uint8_t i = 0; i<length/2; i++){
 8000b84:	2400      	movs	r4, #0
      uint16_t length = piezo_get_data_length();
 8000b86:	b285      	uxth	r5, r0
      for(uint8_t i = 0; i<length/2; i++){
 8000b88:	086b      	lsrs	r3, r5, #1
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	9b01      	ldr	r3, [sp, #4]
 8000b8e:	429c      	cmp	r4, r3
 8000b90:	d36d      	bcc.n	8000c6e <start_driver+0x13a>
      for(uint8_t i = 0; i<length; i++){
 8000b92:	2400      	movs	r4, #0
        if(i % 8 == 0){
 8000b94:	2707      	movs	r7, #7
      for(uint8_t i = 0; i<length; i++){
 8000b96:	42ac      	cmp	r4, r5
 8000b98:	d378      	bcc.n	8000c8c <start_driver+0x158>
      HAL_Delay(60000);
 8000b9a:	4857      	ldr	r0, [pc, #348]	; (8000cf8 <start_driver+0x1c4>)
 8000b9c:	f000 fd28 	bl	80015f0 <HAL_Delay>
    if(run_10V || run_all){
 8000ba0:	4b56      	ldr	r3, [pc, #344]	; (8000cfc <start_driver+0x1c8>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d103      	bne.n	8000bb0 <start_driver+0x7c>
 8000ba8:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <start_driver+0x1b4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00e      	beq.n	8000bce <start_driver+0x9a>
      current_state = 0x3;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	4c4e      	ldr	r4, [pc, #312]	; (8000cec <start_driver+0x1b8>)
 8000bb4:	7023      	strb	r3, [r4, #0]
      sic_power_on();
 8000bb6:	f000 fa5b 	bl	8001070 <sic_power_on>
      HAL_Delay(5000);
 8000bba:	4849      	ldr	r0, [pc, #292]	; (8000ce0 <start_driver+0x1ac>)
 8000bbc:	f000 fd18 	bl	80015f0 <HAL_Delay>
      current_state = 0x4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	7023      	strb	r3, [r4, #0]
      sic_power_off();
 8000bc4:	f000 fa6a 	bl	800109c <sic_power_off>
      HAL_Delay(5000);
 8000bc8:	4845      	ldr	r0, [pc, #276]	; (8000ce0 <start_driver+0x1ac>)
 8000bca:	f000 fd11 	bl	80015f0 <HAL_Delay>
    if(run_sic_test || run_all){
 8000bce:	4b4c      	ldr	r3, [pc, #304]	; (8000d00 <start_driver+0x1cc>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d103      	bne.n	8000bde <start_driver+0xaa>
 8000bd6:	4b44      	ldr	r3, [pc, #272]	; (8000ce8 <start_driver+0x1b4>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d019      	beq.n	8000c12 <start_driver+0xde>
      if(max_number_lines < 360){
 8000bde:	23b4      	movs	r3, #180	; 0xb4
 8000be0:	4d48      	ldr	r5, [pc, #288]	; (8000d04 <start_driver+0x1d0>)
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	882a      	ldrh	r2, [r5, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d272      	bcs.n	8000cd0 <start_driver+0x19c>
        current_state = 0x4;
 8000bea:	2204      	movs	r2, #4
 8000bec:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <start_driver+0x1b8>)
          if(test_index % 8 == 0 && test_index != 0){
 8000bee:	2707      	movs	r7, #7
        current_state = 0x4;
 8000bf0:	701a      	strb	r2, [r3, #0]
        start_test();
 8000bf2:	f000 fb91 	bl	8001318 <start_test>
        sic_get_data((uint8_t*) sic_test_data, 0);
 8000bf6:	4e44      	ldr	r6, [pc, #272]	; (8000d08 <start_driver+0x1d4>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	0030      	movs	r0, r6
 8000bfc:	f000 fa90 	bl	8001120 <sic_get_data>
        for(test_index = 0; test_index<BUFFERLENGTH/2; test_index++){
 8000c00:	2300      	movs	r3, #0
 8000c02:	4c42      	ldr	r4, [pc, #264]	; (8000d0c <start_driver+0x1d8>)
 8000c04:	8023      	strh	r3, [r4, #0]
 8000c06:	8823      	ldrh	r3, [r4, #0]
 8000c08:	2b6b      	cmp	r3, #107	; 0x6b
 8000c0a:	d94b      	bls.n	8000ca4 <start_driver+0x170>
        printf("\n");
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f002 fd65 	bl	80036dc <putchar>
    if (run_dac){
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <start_driver+0x1dc>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d08d      	beq.n	8000b36 <start_driver+0x2>
      sic_power_on();
 8000c1a:	f000 fa29 	bl	8001070 <sic_power_on>
      setDAC_voltage(700);
 8000c1e:	20af      	movs	r0, #175	; 0xaf
 8000c20:	0080      	lsls	r0, r0, #2
 8000c22:	f000 fb6d 	bl	8001300 <setDAC_voltage>
      HAL_Delay(10000);
 8000c26:	483b      	ldr	r0, [pc, #236]	; (8000d14 <start_driver+0x1e0>)
 8000c28:	f000 fce2 	bl	80015f0 <HAL_Delay>
      setDAC_voltage(1200);
 8000c2c:	2096      	movs	r0, #150	; 0x96
 8000c2e:	00c0      	lsls	r0, r0, #3
 8000c30:	f000 fb66 	bl	8001300 <setDAC_voltage>
      HAL_Delay(10000);
 8000c34:	4837      	ldr	r0, [pc, #220]	; (8000d14 <start_driver+0x1e0>)
 8000c36:	f000 fcdb 	bl	80015f0 <HAL_Delay>
      setDAC_voltage(2100);
 8000c3a:	4837      	ldr	r0, [pc, #220]	; (8000d18 <start_driver+0x1e4>)
 8000c3c:	f000 fb60 	bl	8001300 <setDAC_voltage>
      HAL_Delay(10000);
 8000c40:	4834      	ldr	r0, [pc, #208]	; (8000d14 <start_driver+0x1e0>)
 8000c42:	f000 fcd5 	bl	80015f0 <HAL_Delay>
      setDAC_voltage(2800);
 8000c46:	20af      	movs	r0, #175	; 0xaf
 8000c48:	0100      	lsls	r0, r0, #4
 8000c4a:	f000 fb59 	bl	8001300 <setDAC_voltage>
      HAL_Delay(10000);
 8000c4e:	4831      	ldr	r0, [pc, #196]	; (8000d14 <start_driver+0x1e0>)
 8000c50:	f000 fcce 	bl	80015f0 <HAL_Delay>
      sic_power_off();
 8000c54:	f000 fa22 	bl	800109c <sic_power_off>
      setDAC(0);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fb41 	bl	80012e0 <setDAC>
      HAL_Delay(3000);
 8000c5e:	482f      	ldr	r0, [pc, #188]	; (8000d1c <start_driver+0x1e8>)
 8000c60:	f000 fcc6 	bl	80015f0 <HAL_Delay>
      HAL_Delay(1000);
 8000c64:	20fa      	movs	r0, #250	; 0xfa
 8000c66:	0080      	lsls	r0, r0, #2
 8000c68:	f000 fcc2 	bl	80015f0 <HAL_Delay>
 8000c6c:	e763      	b.n	8000b36 <start_driver+0x2>
       if(i % 8 == 0){
 8000c6e:	423c      	tst	r4, r7
 8000c70:	d102      	bne.n	8000c78 <start_driver+0x144>
         printf("\n");
 8000c72:	200a      	movs	r0, #10
 8000c74:	f002 fd32 	bl	80036dc <putchar>
        print16bit(piezoBufferDebug[i*2], piezoBufferDebug[i*2+1], 1);
 8000c78:	0063      	lsls	r3, r4, #1
 8000c7a:	18f2      	adds	r2, r6, r3
 8000c7c:	7851      	ldrb	r1, [r2, #1]
 8000c7e:	5cf0      	ldrb	r0, [r6, r3]
 8000c80:	2201      	movs	r2, #1
      for(uint8_t i = 0; i<length/2; i++){
 8000c82:	3401      	adds	r4, #1
        print16bit(piezoBufferDebug[i*2], piezoBufferDebug[i*2+1], 1);
 8000c84:	f7ff ff3e 	bl	8000b04 <print16bit>
      for(uint8_t i = 0; i<length/2; i++){
 8000c88:	b2e4      	uxtb	r4, r4
 8000c8a:	e77f      	b.n	8000b8c <start_driver+0x58>
        if(i % 8 == 0){
 8000c8c:	423c      	tst	r4, r7
 8000c8e:	d102      	bne.n	8000c96 <start_driver+0x162>
          printf("\n");
 8000c90:	200a      	movs	r0, #10
 8000c92:	f002 fd23 	bl	80036dc <putchar>
        printf("0x%02x\t", piezoBufferDebug[i]);
 8000c96:	5d31      	ldrb	r1, [r6, r4]
 8000c98:	4821      	ldr	r0, [pc, #132]	; (8000d20 <start_driver+0x1ec>)
      for(uint8_t i = 0; i<length; i++){
 8000c9a:	3401      	adds	r4, #1
        printf("0x%02x\t", piezoBufferDebug[i]);
 8000c9c:	f002 fd04 	bl	80036a8 <iprintf>
      for(uint8_t i = 0; i<length; i++){
 8000ca0:	b2e4      	uxtb	r4, r4
 8000ca2:	e778      	b.n	8000b96 <start_driver+0x62>
          if(test_index % 8 == 0 && test_index != 0){
 8000ca4:	423b      	tst	r3, r7
 8000ca6:	d107      	bne.n	8000cb8 <start_driver+0x184>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d005      	beq.n	8000cb8 <start_driver+0x184>
            printf("\n");
 8000cac:	200a      	movs	r0, #10
 8000cae:	f002 fd15 	bl	80036dc <putchar>
            max_number_lines++;
 8000cb2:	882b      	ldrh	r3, [r5, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	802b      	strh	r3, [r5, #0]
          print16bit(sic_test_data[test_index*2], sic_test_data[test_index*2+1], 0);
 8000cb8:	8823      	ldrh	r3, [r4, #0]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	18f2      	adds	r2, r6, r3
 8000cbe:	7851      	ldrb	r1, [r2, #1]
 8000cc0:	5cf0      	ldrb	r0, [r6, r3]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff ff1e 	bl	8000b04 <print16bit>
        for(test_index = 0; test_index<BUFFERLENGTH/2; test_index++){
 8000cc8:	8823      	ldrh	r3, [r4, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	8023      	strh	r3, [r4, #0]
 8000cce:	e79a      	b.n	8000c06 <start_driver+0xd2>
        printf("Please save data from the terminal now. Max number of lines almost reached.\n");
 8000cd0:	4814      	ldr	r0, [pc, #80]	; (8000d24 <start_driver+0x1f0>)
 8000cd2:	f002 fd89 	bl	80037e8 <puts>
        max_number_lines = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	802b      	strh	r3, [r5, #0]
 8000cda:	e79a      	b.n	8000c12 <start_driver+0xde>
 8000cdc:	200000c8 	.word	0x200000c8
 8000ce0:	00001388 	.word	0x00001388
 8000ce4:	200000c7 	.word	0x200000c7
 8000ce8:	200000c6 	.word	0x200000c6
 8000cec:	200000c2 	.word	0x200000c2
 8000cf0:	00007530 	.word	0x00007530
 8000cf4:	2000034b 	.word	0x2000034b
 8000cf8:	0000ea60 	.word	0x0000ea60
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000002 	.word	0x20000002
 8000d04:	200000c4 	.word	0x200000c4
 8000d08:	20000273 	.word	0x20000273
 8000d0c:	200000ca 	.word	0x200000ca
 8000d10:	20000001 	.word	0x20000001
 8000d14:	00002710 	.word	0x00002710
 8000d18:	00000834 	.word	0x00000834
 8000d1c:	00000bb8 	.word	0x00000bb8
 8000d20:	08004b46 	.word	0x08004b46
 8000d24:	08004b4e 	.word	0x08004b4e

08000d28 <main>:
{
 8000d28:	b510      	push	{r4, lr}
  HAL_Init();
 8000d2a:	f000 fc3b 	bl	80015a4 <HAL_Init>
  SystemClock_Config();
 8000d2e:	f7ff fea1 	bl	8000a74 <SystemClock_Config>
  MX_GPIO_Init();
 8000d32:	f7ff fda1 	bl	8000878 <MX_GPIO_Init>
  MX_ADC_Init();
 8000d36:	f7ff fbe5 	bl	8000504 <MX_ADC_Init>
  MX_DAC_Init();
 8000d3a:	f7ff fcad 	bl	8000698 <MX_DAC_Init>
  MX_I2C1_Init();
 8000d3e:	f7ff fe1d 	bl	800097c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d42:	f000 fb95 	bl	8001470 <MX_USART1_UART_Init>
  restore_seqflags();
 8000d46:	f7ff fe7d 	bl	8000a44 <restore_seqflags>
  turn_off_48v();
 8000d4a:	f000 f9c1 	bl	80010d0 <turn_off_48v>
  turn_off_5v();
 8000d4e:	f000 f9c9 	bl	80010e4 <turn_off_5v>
  turn_off_10v();
 8000d52:	f000 f9d1 	bl	80010f8 <turn_off_10v>
  turn_off_vbat();
 8000d56:	f000 f9d9 	bl	800110c <turn_off_vbat>
    start_driver(); // If this line is included, runs the test program instead
 8000d5a:	f7ff feeb 	bl	8000b34 <start_driver>
	...

08000d60 <HAL_I2C_AddrCallback>:
  transferDirectionGlobal = transferDirection;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <HAL_I2C_AddrCallback+0xc>)
 8000d62:	7019      	strb	r1, [r3, #0]
  addr_debug = addrMatchCode;
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <HAL_I2C_AddrCallback+0x10>)
 8000d66:	801a      	strh	r2, [r3, #0]
}
 8000d68:	4770      	bx	lr
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	20000272 	.word	0x20000272
 8000d70:	200000c0 	.word	0x200000c0

08000d74 <Error_Handler>:
 8000d74:	b672      	cpsid	i
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <Error_Handler+0x2>

08000d78 <RS485.part.0>:

		// If no more communication will be done
		RS485(RS_MODE_DEACTIVATE)

*/
void RS485(uint8_t rs485_mode){
 8000d78:	b510      	push	{r4, lr}
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA, USART1_DE_Pin, GPIO_PIN_RESET);
                        break;

		case RS_MODE_TRANSMIT:
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_SET);
 8000d7a:	24a0      	movs	r4, #160	; 0xa0
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	05e4      	lsls	r4, r4, #23
 8000d80:	0020      	movs	r0, r4
 8000d82:	2201      	movs	r2, #1
 8000d84:	0109      	lsls	r1, r1, #4
 8000d86:	f001 f8d9 	bl	8001f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, USART1_DE_Pin, GPIO_PIN_SET);
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	0020      	movs	r0, r4
 8000d90:	0149      	lsls	r1, r1, #5
 8000d92:	f001 f8d3 	bl	8001f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, USART1_DE_Pin, GPIO_PIN_RESET);
                        break;
                
                //case RS_MODE_TRANSMIT
	}
}
 8000d96:	bd10      	pop	{r4, pc}

08000d98 <RS485>:
void RS485(uint8_t rs485_mode){
 8000d98:	b510      	push	{r4, lr}
	switch (rs485_mode) {
 8000d9a:	2806      	cmp	r0, #6
 8000d9c:	d006      	beq.n	8000dac <RS485+0x14>
 8000d9e:	2807      	cmp	r0, #7
 8000da0:	d013      	beq.n	8000dca <RS485+0x32>
 8000da2:	2805      	cmp	r0, #5
 8000da4:	d101      	bne.n	8000daa <RS485+0x12>
 8000da6:	f7ff ffe7 	bl	8000d78 <RS485.part.0>
}
 8000daa:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_SET);
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	20a0      	movs	r0, #160	; 0xa0
 8000db2:	0109      	lsls	r1, r1, #4
 8000db4:	05c0      	lsls	r0, r0, #23
 8000db6:	f001 f8c1 	bl	8001f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, USART1_DE_Pin, GPIO_PIN_RESET);
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	20a0      	movs	r0, #160	; 0xa0
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	0149      	lsls	r1, r1, #5
 8000dc2:	05c0      	lsls	r0, r0, #23
 8000dc4:	f001 f8ba 	bl	8001f3c <HAL_GPIO_WritePin>
}
 8000dc8:	e7ef      	b.n	8000daa <RS485+0x12>
			HAL_GPIO_WritePin(GPIOA, USART1_NRE_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	e7ef      	b.n	8000dae <RS485+0x16>
	...

08000dd0 <piezo_start_exp>:

/**
 * @brief starts the motor by sending xm3
 */
void piezo_start_exp(void)
{
 8000dd0:	b510      	push	{r4, lr}
  piezo_power_on();
 8000dd2:	f000 f911 	bl	8000ff8 <piezo_power_on>
  HAL_Delay(3000); // time it takes for the motor to turn on.
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <piezo_start_exp+0x28>)
 8000dd8:	f000 fc0a 	bl	80015f0 <HAL_Delay>
	switch (rs485_mode) {
 8000ddc:	f7ff ffcc 	bl	8000d78 <RS485.part.0>
  RS485(RS_MODE_TRANSMIT);
  HAL_UART_Transmit(&huart1, (uint8_t *)xm3_buffer, 4, 1000);
 8000de0:	23fa      	movs	r3, #250	; 0xfa
 8000de2:	2204      	movs	r2, #4
 8000de4:	4905      	ldr	r1, [pc, #20]	; (8000dfc <piezo_start_exp+0x2c>)
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <piezo_start_exp+0x30>)
 8000dea:	f002 fac7 	bl	800337c <HAL_UART_Transmit>
  RS485(RS_MODE_DEACTIVATE);
 8000dee:	2007      	movs	r0, #7
 8000df0:	f7ff ffd2 	bl	8000d98 <RS485>
}
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	00000bb8 	.word	0x00000bb8
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000bb4 	.word	0x20000bb4

08000e04 <piezo_get_data>:
 * @brief retrieves the data collected data from the buffer
 * @prarm buffer to copy the data to
 * @param the data offset
 */
void piezo_get_data(unsigned char *buf, long data_offset)
{
 8000e04:	b510      	push	{r4, lr}
  long i = data_offset;
  while (i<dataLength)
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <piezo_get_data+0x18>)
  {
    buf[i] = piezoBufferint8[i];
 8000e08:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <piezo_get_data+0x1c>)
  while (i<dataLength)
 8000e0a:	681c      	ldr	r4, [r3, #0]
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	dc00      	bgt.n	8000e12 <piezo_get_data+0xe>
    i++;
  }
}
 8000e10:	bd10      	pop	{r4, pc}
    buf[i] = piezoBufferint8[i];
 8000e12:	5c54      	ldrb	r4, [r2, r1]
 8000e14:	5444      	strb	r4, [r0, r1]
    i++;
 8000e16:	3101      	adds	r1, #1
 8000e18:	e7f7      	b.n	8000e0a <piezo_get_data+0x6>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	200000cc 	.word	0x200000cc
 8000e20:	200006dc 	.word	0x200006dc

08000e24 <piezo_get_data_length>:
/**
 * @brief retrieves the length of the buffer
 */
int piezo_get_data_length(void)
{
  return dataLength;
 8000e24:	4b01      	ldr	r3, [pc, #4]	; (8000e2c <piezo_get_data_length+0x8>)
 8000e26:	6818      	ldr	r0, [r3, #0]
}
 8000e28:	4770      	bx	lr
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	200000cc 	.word	0x200000cc

08000e30 <record_was_empty>:
 * @param the data offset
 */
bool record_was_empty(char * bufferIn)
{
   //ascii 0 * 8 = 384
  return ((bufferIn[0] + bufferIn[2] + bufferIn[4] + bufferIn[6] + bufferIn[8] + bufferIn[10] + bufferIn[12] + bufferIn[14])==384)
 8000e30:	7882      	ldrb	r2, [r0, #2]
 8000e32:	7803      	ldrb	r3, [r0, #0]
    ||((bufferIn[0] + bufferIn[2] + bufferIn[4] + bufferIn[6] + bufferIn[8] + bufferIn[10] + bufferIn[12] + bufferIn[14])==0);
 8000e34:	21c0      	movs	r1, #192	; 0xc0
  return ((bufferIn[0] + bufferIn[2] + bufferIn[4] + bufferIn[6] + bufferIn[8] + bufferIn[10] + bufferIn[12] + bufferIn[14])==384)
 8000e36:	189b      	adds	r3, r3, r2
 8000e38:	7902      	ldrb	r2, [r0, #4]
    ||((bufferIn[0] + bufferIn[2] + bufferIn[4] + bufferIn[6] + bufferIn[8] + bufferIn[10] + bufferIn[12] + bufferIn[14])==0);
 8000e3a:	0049      	lsls	r1, r1, #1
  return ((bufferIn[0] + bufferIn[2] + bufferIn[4] + bufferIn[6] + bufferIn[8] + bufferIn[10] + bufferIn[12] + bufferIn[14])==384)
 8000e3c:	189b      	adds	r3, r3, r2
 8000e3e:	7982      	ldrb	r2, [r0, #6]
 8000e40:	189b      	adds	r3, r3, r2
 8000e42:	7a02      	ldrb	r2, [r0, #8]
 8000e44:	189b      	adds	r3, r3, r2
 8000e46:	7a82      	ldrb	r2, [r0, #10]
 8000e48:	189b      	adds	r3, r3, r2
 8000e4a:	7b02      	ldrb	r2, [r0, #12]
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	7b82      	ldrb	r2, [r0, #14]
 8000e50:	189b      	adds	r3, r3, r2
 8000e52:	2201      	movs	r2, #1
    ||((bufferIn[0] + bufferIn[2] + bufferIn[4] + bufferIn[6] + bufferIn[8] + bufferIn[10] + bufferIn[12] + bufferIn[14])==0);
 8000e54:	0010      	movs	r0, r2
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d001      	beq.n	8000e5e <record_was_empty+0x2e>
 8000e5a:	4258      	negs	r0, r3
 8000e5c:	4158      	adcs	r0, r3
 8000e5e:	4010      	ands	r0, r2
}
 8000e60:	4770      	bx	lr

08000e62 <piezo_checksum>:
 * @prarm the buffer to calculate the checksum from
 * @param if the checksum was correct
 */
bool piezo_checksum(int *piezoBufferRx)
{
    piezoBufferRx++;
 8000e62:	0001      	movs	r1, r0
    int a=0;
 8000e64:	2300      	movs	r3, #0
{
 8000e66:	b510      	push	{r4, lr}
    piezoBufferRx++;
 8000e68:	1d02      	adds	r2, r0, #4
    for(int x=0; x<9; x++)
 8000e6a:	3128      	adds	r1, #40	; 0x28
    {
        a = a ^ *piezoBufferRx;
 8000e6c:	ca10      	ldmia	r2!, {r4}
 8000e6e:	4063      	eors	r3, r4
    for(int x=0; x<9; x++)
 8000e70:	4291      	cmp	r1, r2
 8000e72:	d1fb      	bne.n	8000e6c <piezo_checksum+0xa>

        piezoBufferRx++;
    }
    if (a==*piezoBufferRx)
 8000e74:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000e76:	1ac0      	subs	r0, r0, r3
 8000e78:	4243      	negs	r3, r0
 8000e7a:	4158      	adcs	r0, r3
 8000e7c:	b2c0      	uxtb	r0, r0
    {
      return true;
    }
   return false;
}
 8000e7e:	bd10      	pop	{r4, pc}

08000e80 <ascii_to_int>:
 * @brief calculated the checksum for a command that was recived by from piezo
 * @prarm buffer with ascii caracters
 * @param buffer that the integere valued should be written to
 */
void ascii_to_int (char * bufferIn, int * bufferOut)
{
 8000e80:	b530      	push	{r4, r5, lr}
 8000e82:	000c      	movs	r4, r1
  for (int i = 0; i < 9; i++)
  {
      int temp = 0;
      while(((*bufferIn != ',')&&(*bufferIn != '\r')))
      {
          temp = temp*10;
 8000e84:	250a      	movs	r5, #10
 8000e86:	3424      	adds	r4, #36	; 0x24
      int temp = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e002      	b.n	8000e92 <ascii_to_int+0x12>
          temp = temp*10;
 8000e8c:	436b      	muls	r3, r5
          temp = temp + (*bufferIn - '0');
 8000e8e:	3a30      	subs	r2, #48	; 0x30
 8000e90:	18d3      	adds	r3, r2, r3
      while(((*bufferIn != ',')&&(*bufferIn != '\r')))
 8000e92:	7802      	ldrb	r2, [r0, #0]
 8000e94:	3001      	adds	r0, #1
 8000e96:	2a2c      	cmp	r2, #44	; 0x2c
 8000e98:	d001      	beq.n	8000e9e <ascii_to_int+0x1e>
 8000e9a:	2a0d      	cmp	r2, #13
 8000e9c:	d1f6      	bne.n	8000e8c <ascii_to_int+0xc>
          bufferIn++;
      }
      *bufferOut=temp;
 8000e9e:	c108      	stmia	r1!, {r3}
  for (int i = 0; i < 9; i++)
 8000ea0:	42a1      	cmp	r1, r4
 8000ea2:	d1f1      	bne.n	8000e88 <ascii_to_int+0x8>
      bufferOut++;
      bufferIn++;
  }
}
 8000ea4:	bd30      	pop	{r4, r5, pc}
	...

08000ea8 <convert_to_8bit>:

void convert_to_8bit(uint8_t * buffer, uint16_t length)
{
  for (int i = 0; i < length; i++)
 8000ea8:	0049      	lsls	r1, r1, #1
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <convert_to_8bit+0x1c>)
 8000eac:	1841      	adds	r1, r0, r1
 8000eae:	4288      	cmp	r0, r1
 8000eb0:	d100      	bne.n	8000eb4 <convert_to_8bit+0xc>
  {
      *buffer = piezoBufferRxInt[i] >>8 & 0xFF  ;
      *++buffer = piezoBufferRxInt[i]  & 0xFF  ;
      buffer++;
  }
}
 8000eb2:	4770      	bx	lr
      *buffer = piezoBufferRxInt[i] >>8 & 0xFF  ;
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	1212      	asrs	r2, r2, #8
 8000eb8:	7002      	strb	r2, [r0, #0]
      *++buffer = piezoBufferRxInt[i]  & 0xFF  ;
 8000eba:	cb04      	ldmia	r3!, {r2}
 8000ebc:	7042      	strb	r2, [r0, #1]
      buffer++;
 8000ebe:	3002      	adds	r0, #2
  for (int i = 0; i < length; i++)
 8000ec0:	e7f5      	b.n	8000eae <convert_to_8bit+0x6>
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	200007a8 	.word	0x200007a8

08000ec8 <piezo_read_data_records>:
{
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  int record_counter = 0;
 8000eca:	2700      	movs	r7, #0
{
 8000ecc:	b085      	sub	sp, #20
 8000ece:	2009      	movs	r0, #9
 8000ed0:	b2bb      	uxth	r3, r7
 8000ed2:	4358      	muls	r0, r3
 8000ed4:	9303      	str	r3, [sp, #12]
 8000ed6:	b283      	uxth	r3, r0
      ascii_to_int((char *)&piezoData[4], (int *)&piezoBufferRxInt[dataOffset]);
 8000ed8:	009e      	lsls	r6, r3, #2
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <piezo_read_data_records+0xd0>)
 8000ede:	2501      	movs	r5, #1
 8000ee0:	18f6      	adds	r6, r6, r3
 8000ee2:	e048      	b.n	8000f76 <piezo_read_data_records+0xae>
      sprintf((char *)xu6_buffer, "XU6,%d\r", record_counter);
 8000ee4:	4c2d      	ldr	r4, [pc, #180]	; (8000f9c <piezo_read_data_records+0xd4>)
 8000ee6:	003a      	movs	r2, r7
 8000ee8:	492d      	ldr	r1, [pc, #180]	; (8000fa0 <piezo_read_data_records+0xd8>)
 8000eea:	0020      	movs	r0, r4
 8000eec:	f002 fc86 	bl	80037fc <siprintf>
	switch (rs485_mode) {
 8000ef0:	f7ff ff42 	bl	8000d78 <RS485.part.0>
      HAL_Delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f000 fb7b 	bl	80015f0 <HAL_Delay>
      HAL_UART_Transmit(&huart1, (uint8_t *)xu6_buffer, 6, 100);
 8000efa:	0021      	movs	r1, r4
 8000efc:	2364      	movs	r3, #100	; 0x64
 8000efe:	2206      	movs	r2, #6
 8000f00:	4828      	ldr	r0, [pc, #160]	; (8000fa4 <piezo_read_data_records+0xdc>)
 8000f02:	f002 fa3b 	bl	800337c <HAL_UART_Transmit>
      RS485(RS_MODE_RECEIVE); // Set transceiver to receive
 8000f06:	2006      	movs	r0, #6
 8000f08:	f7ff ff46 	bl	8000d98 <RS485>
      int i=0;
 8000f0c:	2400      	movs	r4, #0
        if(HAL_UART_Receive(&huart1, (uint8_t *)saveDataPointer, 1, 100) != HAL_OK)
 8000f0e:	4d26      	ldr	r5, [pc, #152]	; (8000fa8 <piezo_read_data_records+0xe0>)
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	2201      	movs	r2, #1
 8000f14:	0029      	movs	r1, r5
 8000f16:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <piezo_read_data_records+0xdc>)
 8000f18:	f002 faa2 	bl	8003460 <HAL_UART_Receive>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d107      	bne.n	8000f30 <piezo_read_data_records+0x68>
        piezoData[i++] = saveDataPointer[0];
 8000f20:	782b      	ldrb	r3, [r5, #0]
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <piezo_read_data_records+0xe4>)
 8000f24:	3401      	adds	r4, #1
 8000f26:	5513      	strb	r3, [r2, r4]
        if ('\r' == saveDataPointer[0]||i==199)//199 so we do not write outside array
 8000f28:	2b0d      	cmp	r3, #13
 8000f2a:	d001      	beq.n	8000f30 <piezo_read_data_records+0x68>
 8000f2c:	2cc7      	cmp	r4, #199	; 0xc7
 8000f2e:	d1ee      	bne.n	8000f0e <piezo_read_data_records+0x46>
      HAL_Delay(1000);
 8000f30:	20fa      	movs	r0, #250	; 0xfa
 8000f32:	0080      	lsls	r0, r0, #2
 8000f34:	f000 fb5c 	bl	80015f0 <HAL_Delay>
      RS485(RS_MODE_DEACTIVATE); // Turn off communication
 8000f38:	2007      	movs	r0, #7
 8000f3a:	f7ff ff2d 	bl	8000d98 <RS485>
      if(record_was_empty((char *)&piezoData[6]))
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <piezo_read_data_records+0xe8>)
 8000f40:	f7ff ff76 	bl	8000e30 <record_was_empty>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d118      	bne.n	8000f7a <piezo_read_data_records+0xb2>
      ascii_to_int((char *)&piezoData[4], (int *)&piezoBufferRxInt[dataOffset]);
 8000f48:	0031      	movs	r1, r6
 8000f4a:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <piezo_read_data_records+0xec>)
 8000f4c:	f7ff ff98 	bl	8000e80 <ascii_to_int>
      if(piezo_checksum((int *)&piezoBufferRxInt[dataOffset]))
 8000f50:	0030      	movs	r0, r6
 8000f52:	f7ff ff86 	bl	8000e62 <piezo_checksum>
 8000f56:	1e05      	subs	r5, r0, #0
 8000f58:	d001      	beq.n	8000f5e <piezo_read_data_records+0x96>
        record_counter++;
 8000f5a:	3701      	adds	r7, #1
        break; // break the attempt loop
 8000f5c:	e7b7      	b.n	8000ece <piezo_read_data_records+0x6>
        Flush_Buffer8(piezoData, i);
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <piezo_read_data_records+0xf0>)
 8000f60:	b2a1      	uxth	r1, r4
 8000f62:	f000 fa79 	bl	8001458 <Flush_Buffer8>
    for (a =0; a<NUMBER_OF_READ_ATTEMTS; a++)
 8000f66:	9b01      	ldr	r3, [sp, #4]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <piezo_read_data_records+0xf4>)
 8000f6e:	9a01      	ldr	r2, [sp, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4293      	cmp	r3, r2
 8000f74:	dcb6      	bgt.n	8000ee4 <piezo_read_data_records+0x1c>
  while(isThereMoreData)
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d10b      	bne.n	8000f92 <piezo_read_data_records+0xca>
  convert_to_8bit(piezoBufferint8, dataOffset*2);
 8000f7a:	2112      	movs	r1, #18
 8000f7c:	9b03      	ldr	r3, [sp, #12]
 8000f7e:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <piezo_read_data_records+0xf8>)
 8000f80:	4359      	muls	r1, r3
 8000f82:	b289      	uxth	r1, r1
 8000f84:	f7ff ff90 	bl	8000ea8 <convert_to_8bit>
  return dataOffset*2;
 8000f88:	9b02      	ldr	r3, [sp, #8]
 8000f8a:	0058      	lsls	r0, r3, #1
 8000f8c:	b2c0      	uxtb	r0, r0
}
 8000f8e:	b005      	add	sp, #20
 8000f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (a =0; a<NUMBER_OF_READ_ATTEMTS; a++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	e7e9      	b.n	8000f6a <piezo_read_data_records+0xa2>
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	200007a8 	.word	0x200007a8
 8000f9c:	20000ac8 	.word	0x20000ac8
 8000fa0:	08004b9a 	.word	0x08004b9a
 8000fa4:	20000bb4 	.word	0x20000bb4
 8000fa8:	200007a4 	.word	0x200007a4
 8000fac:	20000613 	.word	0x20000613
 8000fb0:	2000061a 	.word	0x2000061a
 8000fb4:	20000618 	.word	0x20000618
 8000fb8:	20000614 	.word	0x20000614
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	200006dc 	.word	0x200006dc

08000fc4 <piezo_stop_exp>:
{
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	f7ff fed7 	bl	8000d78 <RS485.part.0>
  HAL_UART_Transmit(&huart1, (uint8_t *)xm4_buffer, 4, 1000);
 8000fca:	23fa      	movs	r3, #250	; 0xfa
 8000fcc:	2204      	movs	r2, #4
 8000fce:	4907      	ldr	r1, [pc, #28]	; (8000fec <piezo_stop_exp+0x28>)
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <piezo_stop_exp+0x2c>)
 8000fd4:	f002 f9d2 	bl	800337c <HAL_UART_Transmit>
  dataLength = piezo_read_data_records();
 8000fd8:	f7ff ff76 	bl	8000ec8 <piezo_read_data_records>
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <piezo_stop_exp+0x30>)
 8000fde:	6018      	str	r0, [r3, #0]
  piezo_power_off();
 8000fe0:	f000 f826 	bl	8001030 <piezo_power_off>
  RS485(RS_MODE_DEACTIVATE); // Not really necessary, just added for clarity
 8000fe4:	2007      	movs	r0, #7
 8000fe6:	f7ff fed7 	bl	8000d98 <RS485>
}
 8000fea:	bd10      	pop	{r4, pc}
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	20000bb4 	.word	0x20000bb4
 8000ff4:	200000cc 	.word	0x200000cc

08000ff8 <piezo_power_on>:

/**
 * @brief turns on power for piezo
 */
void piezo_power_on(void)
{
 8000ff8:	b570      	push	{r4, r5, r6, lr}
  is_piezo_running = true;
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 8000ffa:	2180      	movs	r1, #128	; 0x80
  is_piezo_running = true;
 8000ffc:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 8000ffe:	4c0a      	ldr	r4, [pc, #40]	; (8001028 <piezo_power_on+0x30>)
  is_piezo_running = true;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <piezo_power_on+0x34>)
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 8001002:	002a      	movs	r2, r5
 8001004:	0020      	movs	r0, r4
 8001006:	0149      	lsls	r1, r1, #5
  is_piezo_running = true;
 8001008:	701d      	strb	r5, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 800100a:	f000 ff97 	bl	8001f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Piezo_ON_Pin, GPIO_PIN_RESET); // reverse polarity!
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	0020      	movs	r0, r4
 8001012:	2200      	movs	r2, #0
 8001014:	0189      	lsls	r1, r1, #6
 8001016:	f000 ff91 	bl	8001f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_SET);
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	002a      	movs	r2, r5
 800101e:	0020      	movs	r0, r4
 8001020:	0109      	lsls	r1, r1, #4
 8001022:	f000 ff8b 	bl	8001f3c <HAL_GPIO_WritePin>
  }
 8001026:	bd70      	pop	{r4, r5, r6, pc}
 8001028:	50000400 	.word	0x50000400
 800102c:	200000d0 	.word	0x200000d0

08001030 <piezo_power_off>:
/**
 * @brief turns off power for piezo
 */
void piezo_power_off(void)
{
   HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_RESET);
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	2200      	movs	r2, #0
{
 8001034:	b510      	push	{r4, lr}
   HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_RESET);
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <piezo_power_off+0x34>)
 8001038:	0109      	lsls	r1, r1, #4
 800103a:	f000 ff7f 	bl	8001f3c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, Piezo_ON_Pin, GPIO_PIN_SET); // reverse polarity!
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	2201      	movs	r2, #1
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <piezo_power_off+0x34>)
 8001044:	0189      	lsls	r1, r1, #6
 8001046:	f000 ff79 	bl	8001f3c <HAL_GPIO_WritePin>
   if(!is_sic_running)
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <piezo_power_off+0x38>)
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	2a00      	cmp	r2, #0
 8001050:	d104      	bne.n	800105c <piezo_power_off+0x2c>
   {
     HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_RESET);
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <piezo_power_off+0x34>)
 8001056:	0149      	lsls	r1, r1, #5
 8001058:	f000 ff70 	bl	8001f3c <HAL_GPIO_WritePin>
   }
   is_piezo_running = false;
 800105c:	2200      	movs	r2, #0
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <piezo_power_off+0x3c>)
 8001060:	701a      	strb	r2, [r3, #0]
}
 8001062:	bd10      	pop	{r4, pc}
 8001064:	50000400 	.word	0x50000400
 8001068:	200000d1 	.word	0x200000d1
 800106c:	200000d0 	.word	0x200000d0

08001070 <sic_power_on>:

/**
 * @brief turns on power for sic
 */
void sic_power_on(void)
{
 8001070:	b570      	push	{r4, r5, r6, lr}
  is_sic_running = true;
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 8001072:	2180      	movs	r1, #128	; 0x80
  is_sic_running = true;
 8001074:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 8001076:	4d07      	ldr	r5, [pc, #28]	; (8001094 <sic_power_on+0x24>)
  is_sic_running = true;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <sic_power_on+0x28>)
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 800107a:	0028      	movs	r0, r5
 800107c:	0022      	movs	r2, r4
 800107e:	0149      	lsls	r1, r1, #5
  is_sic_running = true;
 8001080:	701c      	strb	r4, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_SET);
 8001082:	f000 ff5b 	bl	8001f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_SET);
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0028      	movs	r0, r5
 800108a:	0022      	movs	r2, r4
 800108c:	00c9      	lsls	r1, r1, #3
 800108e:	f000 ff55 	bl	8001f3c <HAL_GPIO_WritePin>
}
 8001092:	bd70      	pop	{r4, r5, r6, pc}
 8001094:	50000400 	.word	0x50000400
 8001098:	200000d1 	.word	0x200000d1

0800109c <sic_power_off>:
/**
 * @brief turns off power for sic
 */
void sic_power_off(void)
{
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_RESET);
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	2200      	movs	r2, #0
{
 80010a0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_RESET);
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <sic_power_off+0x28>)
 80010a4:	00c9      	lsls	r1, r1, #3
 80010a6:	f000 ff49 	bl	8001f3c <HAL_GPIO_WritePin>
  if(!is_piezo_running)
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <sic_power_off+0x2c>)
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d104      	bne.n	80010bc <sic_power_off+0x20>
  {
     HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_RESET);
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <sic_power_off+0x28>)
 80010b6:	0149      	lsls	r1, r1, #5
 80010b8:	f000 ff40 	bl	8001f3c <HAL_GPIO_WritePin>
  }
  is_sic_running = false;
 80010bc:	2200      	movs	r2, #0
 80010be:	4b03      	ldr	r3, [pc, #12]	; (80010cc <sic_power_off+0x30>)
 80010c0:	701a      	strb	r2, [r3, #0]
}
 80010c2:	bd10      	pop	{r4, pc}
 80010c4:	50000400 	.word	0x50000400
 80010c8:	200000d0 	.word	0x200000d0
 80010cc:	200000d1 	.word	0x200000d1

080010d0 <turn_off_48v>:
/**
 * @brief turns off 48v
 */
void turn_off_48v(void)
{
    HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_RESET);
 80010d0:	2180      	movs	r1, #128	; 0x80
{
 80010d2:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, Piezo_48V_ON_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <turn_off_48v+0x10>)
 80010d8:	0109      	lsls	r1, r1, #4
 80010da:	f000 ff2f 	bl	8001f3c <HAL_GPIO_WritePin>
}
 80010de:	bd10      	pop	{r4, pc}
 80010e0:	50000400 	.word	0x50000400

080010e4 <turn_off_5v>:
/**
 * @brief turns off 5v
 */
void turn_off_5v(void)
{
  HAL_GPIO_WritePin(GPIOB, Piezo_ON_Pin, GPIO_PIN_SET);  // reverse polarity!
 80010e4:	2180      	movs	r1, #128	; 0x80
{
 80010e6:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, Piezo_ON_Pin, GPIO_PIN_SET);  // reverse polarity!
 80010e8:	2201      	movs	r2, #1
 80010ea:	4802      	ldr	r0, [pc, #8]	; (80010f4 <turn_off_5v+0x10>)
 80010ec:	0189      	lsls	r1, r1, #6
 80010ee:	f000 ff25 	bl	8001f3c <HAL_GPIO_WritePin>
}
 80010f2:	bd10      	pop	{r4, pc}
 80010f4:	50000400 	.word	0x50000400

080010f8 <turn_off_10v>:
/**
 * @brief turns off 10v
 */
void turn_off_10v(void)
{
   HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_RESET);
 80010f8:	2180      	movs	r1, #128	; 0x80
{
 80010fa:	b510      	push	{r4, lr}
   HAL_GPIO_WritePin(GPIOB, Linear_10V_ON_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	4802      	ldr	r0, [pc, #8]	; (8001108 <turn_off_10v+0x10>)
 8001100:	00c9      	lsls	r1, r1, #3
 8001102:	f000 ff1b 	bl	8001f3c <HAL_GPIO_WritePin>
}
 8001106:	bd10      	pop	{r4, pc}
 8001108:	50000400 	.word	0x50000400

0800110c <turn_off_vbat>:
/**
 * @brief turns off vbat
 */
void turn_off_vbat(void)
{
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_RESET);
 800110c:	2180      	movs	r1, #128	; 0x80
{
 800110e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, Battery_SW_ON_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	4802      	ldr	r0, [pc, #8]	; (800111c <turn_off_vbat+0x10>)
 8001114:	0149      	lsls	r1, r1, #5
 8001116:	f000 ff11 	bl	8001f3c <HAL_GPIO_WritePin>
}
 800111a:	bd10      	pop	{r4, pc}
 800111c:	50000400 	.word	0x50000400

08001120 <sic_get_data>:
    Flush_Buffer8(buffer, BUFFERLENGTH);
}


void sic_get_data(unsigned char *buf, long data_offset)
{
 8001120:	2300      	movs	r3, #0
  uint16_t i =0;
  while (i<BUFFERLENGTH)
  {
    buf[i] = buffer[i];
 8001122:	4903      	ldr	r1, [pc, #12]	; (8001130 <sic_get_data+0x10>)
 8001124:	5cca      	ldrb	r2, [r1, r3]
 8001126:	54c2      	strb	r2, [r0, r3]
  while (i<BUFFERLENGTH)
 8001128:	3301      	adds	r3, #1
 800112a:	2bd8      	cmp	r3, #216	; 0xd8
 800112c:	d1fa      	bne.n	8001124 <sic_get_data+0x4>
    i++;
  }
}
 800112e:	4770      	bx	lr
 8001130:	20000ad9 	.word	0x20000ad9

08001134 <readADCvalues>:
  HAL_Delay(100);
  sic_power_off();

}

void readADCvalues(uint8_t index){
 8001134:	2310      	movs	r3, #16
 8001136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001138:	b08b      	sub	sp, #44	; 0x2c
 800113a:	9003      	str	r0, [sp, #12]
 800113c:	9302      	str	r3, [sp, #8]


  for(uint8_t i = 0; i < 16; i++){

    //Calibrate ADCs in the beginning of every run
    if(HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK){
 800113e:	4c58      	ldr	r4, [pc, #352]	; (80012a0 <readADCvalues+0x16c>)
 8001140:	2100      	movs	r1, #0
 8001142:	0020      	movs	r0, r4
 8001144:	f000 fd0e 	bl	8001b64 <HAL_ADCEx_Calibration_Start>
 8001148:	2800      	cmp	r0, #0
 800114a:	d001      	beq.n	8001150 <readADCvalues+0x1c>
      Error_Handler();
 800114c:	f7ff fe12 	bl	8000d74 <Error_Handler>
    }

    HAL_Delay(10);
 8001150:	200a      	movs	r0, #10
 8001152:	f000 fa4d 	bl	80015f0 <HAL_Delay>

    //Start ADC reading

    if(HAL_ADC_Start(&hadc) != HAL_OK){
 8001156:	0020      	movs	r0, r4
 8001158:	f000 fbee 	bl	8001938 <HAL_ADC_Start>
 800115c:	2800      	cmp	r0, #0
 800115e:	d002      	beq.n	8001166 <readADCvalues+0x32>
            while(1) {

                    Error_Handler();
 8001160:	f7ff fe08 	bl	8000d74 <Error_Handler>
            while(1) {
 8001164:	e7fc      	b.n	8001160 <readADCvalues+0x2c>
            }
    }


    HAL_ADC_PollForConversion(&hadc, 100);
 8001166:	2164      	movs	r1, #100	; 0x64
 8001168:	0020      	movs	r0, r4
 800116a:	f000 fc2f 	bl	80019cc <HAL_ADC_PollForConversion>
    experiments[0+index].temperature += HAL_ADC_GetValue(&hadc);
 800116e:	0020      	movs	r0, r4
 8001170:	f000 fc90 	bl	8001a94 <HAL_ADC_GetValue>
 8001174:	9b03      	ldr	r3, [sp, #12]
 8001176:	4d4b      	ldr	r5, [pc, #300]	; (80012a4 <readADCvalues+0x170>)
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	5b5b      	ldrh	r3, [r3, r5]
 800117e:	9a01      	ldr	r2, [sp, #4]
 8001180:	181b      	adds	r3, r3, r0
 8001182:	5353      	strh	r3, [r2, r5]
    //printf("\n temp si %d\n", experiments[0+index].temperature);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 8001184:	2164      	movs	r1, #100	; 0x64
 8001186:	0020      	movs	r0, r4
 8001188:	f000 fc20 	bl	80019cc <HAL_ADC_PollForConversion>
    experiments[0+index].Vbe += HAL_ADC_GetValue(&hadc);
 800118c:	0020      	movs	r0, r4
 800118e:	f000 fc81 	bl	8001a94 <HAL_ADC_GetValue>
 8001192:	9b01      	ldr	r3, [sp, #4]
    //printf("\n Vbe si %d\n", experiments[0+index].Vbe);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 8001194:	2164      	movs	r1, #100	; 0x64
    experiments[0+index].Vbe += HAL_ADC_GetValue(&hadc);
 8001196:	18ee      	adds	r6, r5, r3
 8001198:	1cb3      	adds	r3, r6, #2
 800119a:	9304      	str	r3, [sp, #16]
 800119c:	8873      	ldrh	r3, [r6, #2]
 800119e:	181b      	adds	r3, r3, r0
 80011a0:	8073      	strh	r3, [r6, #2]
    HAL_ADC_PollForConversion(&hadc, 100);
 80011a2:	0020      	movs	r0, r4
 80011a4:	f000 fc12 	bl	80019cc <HAL_ADC_PollForConversion>
    experiments[0+index].Vb += HAL_ADC_GetValue(&hadc);
 80011a8:	0020      	movs	r0, r4
 80011aa:	f000 fc73 	bl	8001a94 <HAL_ADC_GetValue>
 80011ae:	1d33      	adds	r3, r6, #4
 80011b0:	9305      	str	r3, [sp, #20]
 80011b2:	88b3      	ldrh	r3, [r6, #4]
    //printf("\n Vb si %d\n", experiments[0+index].Vb);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 80011b4:	2164      	movs	r1, #100	; 0x64
    experiments[0+index].Vb += HAL_ADC_GetValue(&hadc);
 80011b6:	181b      	adds	r3, r3, r0
 80011b8:	80b3      	strh	r3, [r6, #4]
    HAL_ADC_PollForConversion(&hadc, 100);
 80011ba:	0020      	movs	r0, r4
 80011bc:	f000 fc06 	bl	80019cc <HAL_ADC_PollForConversion>
    experiments[0+index].Vc += HAL_ADC_GetValue(&hadc);
 80011c0:	0020      	movs	r0, r4
 80011c2:	f000 fc67 	bl	8001a94 <HAL_ADC_GetValue>
 80011c6:	1db3      	adds	r3, r6, #6
 80011c8:	9306      	str	r3, [sp, #24]
 80011ca:	88f3      	ldrh	r3, [r6, #6]
    //printf("\n Vc si %d\n", experiments[0+index].Vc);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 80011cc:	2164      	movs	r1, #100	; 0x64
    experiments[0+index].Vc += HAL_ADC_GetValue(&hadc);
 80011ce:	181b      	adds	r3, r3, r0
 80011d0:	80f3      	strh	r3, [r6, #6]
    HAL_ADC_PollForConversion(&hadc, 100);
 80011d2:	0020      	movs	r0, r4
 80011d4:	f000 fbfa 	bl	80019cc <HAL_ADC_PollForConversion>
    experiments[1+index].temperature += HAL_ADC_GetValue(&hadc);
 80011d8:	0020      	movs	r0, r4
 80011da:	f000 fc5b 	bl	8001a94 <HAL_ADC_GetValue>
 80011de:	9b03      	ldr	r3, [sp, #12]
    // printf("\n temp sic %d\n", experiments[1+index].temperature);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 80011e0:	2164      	movs	r1, #100	; 0x64
    experiments[1+index].temperature += HAL_ADC_GetValue(&hadc);
 80011e2:	1c5f      	adds	r7, r3, #1
 80011e4:	00ff      	lsls	r7, r7, #3
 80011e6:	5b7b      	ldrh	r3, [r7, r5]
    experiments[1+index].Vbe += HAL_ADC_GetValue(&hadc);
 80011e8:	19ee      	adds	r6, r5, r7
    experiments[1+index].temperature += HAL_ADC_GetValue(&hadc);
 80011ea:	181b      	adds	r3, r3, r0
 80011ec:	537b      	strh	r3, [r7, r5]
    HAL_ADC_PollForConversion(&hadc, 100);
 80011ee:	0020      	movs	r0, r4
 80011f0:	f000 fbec 	bl	80019cc <HAL_ADC_PollForConversion>
    experiments[1+index].Vbe += HAL_ADC_GetValue(&hadc);
 80011f4:	0020      	movs	r0, r4
 80011f6:	f000 fc4d 	bl	8001a94 <HAL_ADC_GetValue>
 80011fa:	1cb3      	adds	r3, r6, #2
 80011fc:	9307      	str	r3, [sp, #28]
 80011fe:	8873      	ldrh	r3, [r6, #2]
    // printf("\n ube sic %d\n", experiments[1+index].ube);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 8001200:	2164      	movs	r1, #100	; 0x64
    experiments[1+index].Vbe += HAL_ADC_GetValue(&hadc);
 8001202:	181b      	adds	r3, r3, r0
 8001204:	8073      	strh	r3, [r6, #2]
    HAL_ADC_PollForConversion(&hadc, 100);
 8001206:	0020      	movs	r0, r4
 8001208:	f000 fbe0 	bl	80019cc <HAL_ADC_PollForConversion>
    experiments[1+index].Vb += HAL_ADC_GetValue(&hadc);
 800120c:	0020      	movs	r0, r4
 800120e:	f000 fc41 	bl	8001a94 <HAL_ADC_GetValue>
 8001212:	1d33      	adds	r3, r6, #4
 8001214:	9308      	str	r3, [sp, #32]
 8001216:	88b3      	ldrh	r3, [r6, #4]
    //   printf("\n vrb sic %d\n", experiments[1+index].vrb);

    //HAL_Delay(100);
    HAL_ADC_PollForConversion(&hadc, 100);
 8001218:	2164      	movs	r1, #100	; 0x64
    experiments[1+index].Vb += HAL_ADC_GetValue(&hadc);
 800121a:	181b      	adds	r3, r3, r0
 800121c:	80b3      	strh	r3, [r6, #4]
    HAL_ADC_PollForConversion(&hadc, 100);
 800121e:	0020      	movs	r0, r4
 8001220:	f000 fbd4 	bl	80019cc <HAL_ADC_PollForConversion>
    experiments[1+index].Vc += HAL_ADC_GetValue(&hadc);
 8001224:	0020      	movs	r0, r4
 8001226:	f000 fc35 	bl	8001a94 <HAL_ADC_GetValue>
 800122a:	1db3      	adds	r3, r6, #6
 800122c:	9309      	str	r3, [sp, #36]	; 0x24
 800122e:	88f3      	ldrh	r3, [r6, #6]
 8001230:	181b      	adds	r3, r3, r0
 8001232:	80f3      	strh	r3, [r6, #6]
    // Probably isn't necessary though, since each calibration should reset
    // the ADC que.
    //HAL_ADC_PollForConversion(&hadc, 100);


    HAL_Delay (2);
 8001234:	2002      	movs	r0, #2
 8001236:	f000 f9db 	bl	80015f0 <HAL_Delay>

    HAL_ADC_Stop (&hadc);
 800123a:	0020      	movs	r0, r4
 800123c:	f000 fba8 	bl	8001990 <HAL_ADC_Stop>
  for(uint8_t i = 0; i < 16; i++){
 8001240:	9b02      	ldr	r3, [sp, #8]
 8001242:	3b01      	subs	r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d000      	beq.n	800124e <readADCvalues+0x11a>
 800124c:	e777      	b.n	800113e <readADCvalues+0xa>
  }

  experiments[0+index].temperature = experiments[0+index].temperature >> 4;
 800124e:	9b01      	ldr	r3, [sp, #4]
 8001250:	9a01      	ldr	r2, [sp, #4]
 8001252:	5b5b      	ldrh	r3, [r3, r5]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	5353      	strh	r3, [r2, r5]
  //printf("temp si %d\n", experiments[0+index].temperature);
  experiments[0+index].Vbe = experiments[0+index].Vbe >> 4;
 8001258:	9b04      	ldr	r3, [sp, #16]
 800125a:	9a04      	ldr	r2, [sp, #16]
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	8013      	strh	r3, [r2, #0]
  experiments[0+index].Vb = experiments[0+index].Vb >> 4;
 8001262:	9b05      	ldr	r3, [sp, #20]
 8001264:	9a05      	ldr	r2, [sp, #20]
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	8013      	strh	r3, [r2, #0]
  experiments[0+index].Vc = experiments[0+index].Vc >> 4;
 800126c:	9b06      	ldr	r3, [sp, #24]
 800126e:	9a06      	ldr	r2, [sp, #24]
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	8013      	strh	r3, [r2, #0]

  experiments[1+index].temperature = experiments[1+index].temperature >> 4;
 8001276:	5b7b      	ldrh	r3, [r7, r5]
  //printf("temp SiC %d\n", experiments[1+index].temperature);
  experiments[1+index].Vbe = experiments[1+index].Vbe >> 4;
 8001278:	9a07      	ldr	r2, [sp, #28]
  experiments[1+index].temperature = experiments[1+index].temperature >> 4;
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	537b      	strh	r3, [r7, r5]
  experiments[1+index].Vbe = experiments[1+index].Vbe >> 4;
 800127e:	9b07      	ldr	r3, [sp, #28]
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	8013      	strh	r3, [r2, #0]
  experiments[1+index].Vb = experiments[1+index].Vb >> 4;
 8001286:	9b08      	ldr	r3, [sp, #32]
 8001288:	9a08      	ldr	r2, [sp, #32]
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	8013      	strh	r3, [r2, #0]
  experiments[1+index].Vc = experiments[1+index].Vc >> 4;
 8001290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	8013      	strh	r3, [r2, #0]
}
 800129a:	b00b      	add	sp, #44	; 0x2c
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	200001b8 	.word	0x200001b8
 80012a4:	200000d2 	.word	0x200000d2

080012a8 <convert_8bit>:
 void convert_8bit(uint8_t * buffer){
   //printf("\n temp si %d\n", experiments[0].temperature);

   uint16_t buffer_index = 0;

   for(uint16_t experiment_index = 0; experiment_index < EXPERIMENTPOINTS; experiment_index++){
 80012a8:	0001      	movs	r1, r0
 void convert_8bit(uint8_t * buffer){
 80012aa:	b510      	push	{r4, lr}
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <convert_8bit+0x34>)
 80012ae:	31d8      	adds	r1, #216	; 0xd8
    buffer[buffer_index] = experiments[experiment_index].temperature >> 8 & 0xFF;
 80012b0:	881a      	ldrh	r2, [r3, #0]
 80012b2:	0a14      	lsrs	r4, r2, #8
 80012b4:	7004      	strb	r4, [r0, #0]
    buffer[buffer_index + 1] = experiments[experiment_index].temperature & 0xFF;
 80012b6:	7042      	strb	r2, [r0, #1]

    buffer[buffer_index + 2] = experiments[experiment_index].Vbe >> 8 & 0xFF;
 80012b8:	885a      	ldrh	r2, [r3, #2]
 80012ba:	0a14      	lsrs	r4, r2, #8
 80012bc:	7084      	strb	r4, [r0, #2]
    buffer[buffer_index + 3] = experiments[experiment_index].Vbe & 0xFF;
 80012be:	70c2      	strb	r2, [r0, #3]

    buffer[buffer_index + 4] = experiments[experiment_index].Vb >> 8 & 0xFF;
 80012c0:	889a      	ldrh	r2, [r3, #4]
 80012c2:	0a14      	lsrs	r4, r2, #8
 80012c4:	7104      	strb	r4, [r0, #4]
    buffer[buffer_index + 5] = experiments[experiment_index].Vb;
 80012c6:	7142      	strb	r2, [r0, #5]

    buffer[buffer_index + 6] = experiments[experiment_index].Vc >> 8 & 0xFF;
 80012c8:	88da      	ldrh	r2, [r3, #6]
 80012ca:	3308      	adds	r3, #8
 80012cc:	0a14      	lsrs	r4, r2, #8
 80012ce:	7184      	strb	r4, [r0, #6]
    buffer[buffer_index + 7] = experiments[experiment_index].Vc;
 80012d0:	71c2      	strb	r2, [r0, #7]
   for(uint16_t experiment_index = 0; experiment_index < EXPERIMENTPOINTS; experiment_index++){
 80012d2:	3008      	adds	r0, #8
 80012d4:	4281      	cmp	r1, r0
 80012d6:	d1eb      	bne.n	80012b0 <convert_8bit+0x8>
     y=y+2;
    }
  }
  */

 }
 80012d8:	bd10      	pop	{r4, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	200000d2 	.word	0x200000d2

080012e0 <setDAC>:
@ The setDAC function, transforms the digital output from the MCU to
an Analog output which is needed for the BJT circuits.
@return void
*/
void setDAC(uint32_t voltage){
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, voltage);
 80012e0:	2200      	movs	r2, #0
void setDAC(uint32_t voltage){
 80012e2:	b510      	push	{r4, lr}
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, voltage);
 80012e4:	4c05      	ldr	r4, [pc, #20]	; (80012fc <setDAC+0x1c>)
void setDAC(uint32_t voltage){
 80012e6:	0003      	movs	r3, r0
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, voltage);
 80012e8:	0011      	movs	r1, r2
 80012ea:	0020      	movs	r0, r4
 80012ec:	f000 fd32 	bl	8001d54 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 80012f0:	2100      	movs	r1, #0
 80012f2:	0020      	movs	r0, r4
 80012f4:	f000 fd0e 	bl	8001d14 <HAL_DAC_Start>
}
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	20000214 	.word	0x20000214

08001300 <setDAC_voltage>:

@ Calculates the corresponding digital value of the param with a reference
voltage set to 3.29 and sets the DAC to the value.
@return void
*/
void setDAC_voltage(uint32_t voltage){
 8001300:	b510      	push	{r4, lr}
  uint32_t digital_voltage = (voltage * 4095) / (3290);
 8001302:	0303      	lsls	r3, r0, #12
 8001304:	4903      	ldr	r1, [pc, #12]	; (8001314 <setDAC_voltage+0x14>)
 8001306:	1a18      	subs	r0, r3, r0
 8001308:	f7fe ff12 	bl	8000130 <__udivsi3>
  setDAC(digital_voltage);
 800130c:	f7ff ffe8 	bl	80012e0 <setDAC>
  //printf("%d\n", digital_voltage);
}
 8001310:	bd10      	pop	{r4, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	00000cda 	.word	0x00000cda

08001318 <start_test>:
void start_test(void){
 8001318:	b570      	push	{r4, r5, r6, lr}
    experiments[i].temperature = 0;
 800131a:	2200      	movs	r2, #0
void start_test(void){
 800131c:	241b      	movs	r4, #27
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <start_test+0x5c>)
    experiments[i].temperature = 0;
 8001320:	3c01      	subs	r4, #1
 8001322:	b2a4      	uxth	r4, r4
 8001324:	801a      	strh	r2, [r3, #0]
    experiments[i].Vb = 0;
 8001326:	809a      	strh	r2, [r3, #4]
    experiments[i].Vbe = 0;
 8001328:	805a      	strh	r2, [r3, #2]
    experiments[i].Vc = 0;
 800132a:	80da      	strh	r2, [r3, #6]
  for(uint16_t i = 0; i < EXPERIMENTPOINTS; i++){
 800132c:	3308      	adds	r3, #8
 800132e:	2c00      	cmp	r4, #0
 8001330:	d1f6      	bne.n	8001320 <start_test+0x8>
  sic_power_on();
 8001332:	f7ff fe9d 	bl	8001070 <sic_power_on>
  HAL_Delay(1000);
 8001336:	20fa      	movs	r0, #250	; 0xfa
 8001338:	0080      	lsls	r0, r0, #2
 800133a:	f000 f959 	bl	80015f0 <HAL_Delay>
    setDAC_voltage(dac_voltage);
 800133e:	2564      	movs	r5, #100	; 0x64
 8001340:	0028      	movs	r0, r5
 8001342:	4360      	muls	r0, r4
 8001344:	302d      	adds	r0, #45	; 0x2d
 8001346:	30ff      	adds	r0, #255	; 0xff
 8001348:	f7ff ffda 	bl	8001300 <setDAC_voltage>
    readADCvalues(index);
 800134c:	0060      	lsls	r0, r4, #1
 800134e:	b2c0      	uxtb	r0, r0
 8001350:	3401      	adds	r4, #1
 8001352:	f7ff feef 	bl	8001134 <readADCvalues>
  for(uint16_t index = 0; index < EXPERIMENTPOINTS; index = index + 2){
 8001356:	2c0e      	cmp	r4, #14
 8001358:	d1f2      	bne.n	8001340 <start_test+0x28>
  convert_8bit(buffer);
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <start_test+0x60>)
 800135c:	f7ff ffa4 	bl	80012a8 <convert_8bit>
  setDAC(0);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff ffbd 	bl	80012e0 <setDAC>
  HAL_Delay(100);
 8001366:	2064      	movs	r0, #100	; 0x64
 8001368:	f000 f942 	bl	80015f0 <HAL_Delay>
  sic_power_off();
 800136c:	f7ff fe96 	bl	800109c <sic_power_off>
}
 8001370:	bd70      	pop	{r4, r5, r6, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	200000d2 	.word	0x200000d2
 8001378:	20000ad9 	.word	0x20000ad9

0800137c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137c:	2201      	movs	r2, #1
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_MspInit+0x18>)
 8001380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001382:	430a      	orrs	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800138a:	0552      	lsls	r2, r2, #21
 800138c:	430a      	orrs	r2, r1
 800138e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001390:	4770      	bx	lr
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40021000 	.word	0x40021000

08001398 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler>

0800139a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler>

0800139c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800139c:	4770      	bx	lr

0800139e <PendSV_Handler>:
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 f913 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <I2C1_IRQHandler+0x1c>)
{
 80013aa:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80013ac:	6803      	ldr	r3, [r0, #0]
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	23e0      	movs	r3, #224	; 0xe0
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	421a      	tst	r2, r3
 80013b6:	d002      	beq.n	80013be <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80013b8:	f001 f8e6 	bl	8002588 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80013bc:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80013be:	f000 fe4b 	bl	8002058 <HAL_I2C_EV_IRQHandler>
}
 80013c2:	e7fb      	b.n	80013bc <I2C1_IRQHandler+0x14>
 80013c4:	20000224 	.word	0x20000224

080013c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	000e      	movs	r6, r1
 80013cc:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2500      	movs	r5, #0
 80013d0:	42a5      	cmp	r5, r4
 80013d2:	db01      	blt.n	80013d8 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80013d4:	0020      	movs	r0, r4
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80013d8:	e000      	b.n	80013dc <_read+0x14>
 80013da:	bf00      	nop
 80013dc:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	3501      	adds	r5, #1
 80013e0:	e7f6      	b.n	80013d0 <_read+0x8>

080013e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e2:	b570      	push	{r4, r5, r6, lr}
 80013e4:	000e      	movs	r6, r1
 80013e6:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e8:	2500      	movs	r5, #0
 80013ea:	42a5      	cmp	r5, r4
 80013ec:	db01      	blt.n	80013f2 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80013ee:	0020      	movs	r0, r4
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80013f2:	5d70      	ldrb	r0, [r6, r5]
 80013f4:	e000      	b.n	80013f8 <_write+0x16>
 80013f6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	3501      	adds	r5, #1
 80013fa:	e7f6      	b.n	80013ea <_write+0x8>

080013fc <_close>:

int _close(int file)
{
	return -1;
 80013fc:	2001      	movs	r0, #1
}
 80013fe:	4240      	negs	r0, r0
 8001400:	4770      	bx	lr

08001402 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	019b      	lsls	r3, r3, #6
	return 0;
}
 8001406:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001408:	604b      	str	r3, [r1, #4]
}
 800140a:	4770      	bx	lr

0800140c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800140c:	2001      	movs	r0, #1
 800140e:	4770      	bx	lr

08001410 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001410:	2000      	movs	r0, #0
 8001412:	4770      	bx	lr

08001414 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <_sbrk+0x30>)
 8001416:	490c      	ldr	r1, [pc, #48]	; (8001448 <_sbrk+0x34>)
{
 8001418:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141a:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <_sbrk+0x38>)
{
 800141e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001420:	6810      	ldr	r0, [r2, #0]
 8001422:	2800      	cmp	r0, #0
 8001424:	d101      	bne.n	800142a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001426:	480a      	ldr	r0, [pc, #40]	; (8001450 <_sbrk+0x3c>)
 8001428:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	6810      	ldr	r0, [r2, #0]
 800142c:	18c3      	adds	r3, r0, r3
 800142e:	428b      	cmp	r3, r1
 8001430:	d906      	bls.n	8001440 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001432:	f002 f8fd 	bl	8003630 <__errno>
 8001436:	230c      	movs	r3, #12
 8001438:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800143a:	2001      	movs	r0, #1
 800143c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800143e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001440:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001442:	e7fc      	b.n	800143e <_sbrk+0x2a>
 8001444:	00000400 	.word	0x00000400
 8001448:	20002000 	.word	0x20002000
 800144c:	200001ac 	.word	0x200001ac
 8001450:	20000c50 	.word	0x20000c50

08001454 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	4770      	bx	lr
	...

08001458 <Flush_Buffer8>:

void Flush_Buffer8(uint8_t* pBuffer, uint16_t BufferLength)
{
  while (BufferLength--)
  {
    *pBuffer = 0;
 8001458:	2200      	movs	r2, #0
  while (BufferLength--)
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <Flush_Buffer8+0x14>)
 800145c:	3901      	subs	r1, #1
 800145e:	b289      	uxth	r1, r1
 8001460:	4299      	cmp	r1, r3
 8001462:	d100      	bne.n	8001466 <Flush_Buffer8+0xe>
    
    pBuffer++;
  }
}
 8001464:	4770      	bx	lr
    *pBuffer = 0;
 8001466:	7002      	strb	r2, [r0, #0]
    pBuffer++;
 8001468:	3001      	adds	r0, #1
 800146a:	e7f7      	b.n	800145c <Flush_Buffer8+0x4>
 800146c:	0000ffff 	.word	0x0000ffff

08001470 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <MX_USART1_UART_Init+0x30>)
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART1_UART_Init+0x34>)
{
 8001474:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8001476:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001478:	23e1      	movs	r3, #225	; 0xe1
 800147a:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800147c:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 800147e:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001480:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001482:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001484:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001486:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001488:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001490:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	f002 f89b 	bl	80035cc <HAL_UART_Init>
 8001496:	2800      	cmp	r0, #0
 8001498:	d001      	beq.n	800149e <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 800149a:	f7ff fc6b 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149e:	bd10      	pop	{r4, pc}
 80014a0:	20000bb4 	.word	0x20000bb4
 80014a4:	40013800 	.word	0x40013800

080014a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a8:	b510      	push	{r4, lr}
 80014aa:	0004      	movs	r4, r0
 80014ac:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	2214      	movs	r2, #20
 80014b0:	2100      	movs	r1, #0
 80014b2:	a801      	add	r0, sp, #4
 80014b4:	f002 f8ef 	bl	8003696 <memset>
  if(uartHandle->Instance==USART1)
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_UART_MspInit+0x58>)
 80014ba:	6822      	ldr	r2, [r4, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d11d      	bne.n	80014fc <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_UART_MspInit+0x5c>)
 80014c4:	01d2      	lsls	r2, r2, #7
 80014c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ca:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	430a      	orrs	r2, r1
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	400b      	ands	r3, r1
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	3303      	adds	r3, #3
 80014f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014f2:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f000 fc64 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014fc:	b006      	add	sp, #24
 80014fe:	bd10      	pop	{r4, pc}
 8001500:	40013800 	.word	0x40013800
 8001504:	40021000 	.word	0x40021000

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800150a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <LoopForever+0x6>)
  ldr r1, =_edata
 800150e:	490e      	ldr	r1, [pc, #56]	; (8001548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <LoopForever+0xe>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001524:	4c0b      	ldr	r4, [pc, #44]	; (8001554 <LoopForever+0x16>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001532:	f7ff ff8f 	bl	8001454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f002 f881 	bl	800363c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff fbf5 	bl	8000d28 <main>

0800153e <LoopForever>:

LoopForever:
    b LoopForever
 800153e:	e7fe      	b.n	800153e <LoopForever>
  ldr   r0, =_estack
 8001540:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800154c:	08004c7c 	.word	0x08004c7c
  ldr r2, =_sbss
 8001550:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001554:	20000c4c 	.word	0x20000c4c

08001558 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_COMP_IRQHandler>
	...

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	20fa      	movs	r0, #250	; 0xfa
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_InitTick+0x3c>)
 8001564:	0080      	lsls	r0, r0, #2
 8001566:	7819      	ldrb	r1, [r3, #0]
 8001568:	f7fe fde2 	bl	8000130 <__udivsi3>
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_InitTick+0x40>)
 800156e:	0001      	movs	r1, r0
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f7fe fddd 	bl	8000130 <__udivsi3>
 8001576:	f000 fb7f 	bl	8001c78 <HAL_SYSTICK_Config>
 800157a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800157c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157e:	2c00      	cmp	r4, #0
 8001580:	d109      	bne.n	8001596 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	2d03      	cmp	r5, #3
 8001584:	d807      	bhi.n	8001596 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001586:	3802      	subs	r0, #2
 8001588:	0022      	movs	r2, r4
 800158a:	0029      	movs	r1, r5
 800158c:	f000 fb3e 	bl	8001c0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	0020      	movs	r0, r4
 8001592:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_InitTick+0x44>)
 8001594:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001596:	bd70      	pop	{r4, r5, r6, pc}
 8001598:	20000014 	.word	0x20000014
 800159c:	20000010 	.word	0x20000010
 80015a0:	20000018 	.word	0x20000018

080015a4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015a4:	2340      	movs	r3, #64	; 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_Init+0x24>)
{
 80015a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015aa:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ac:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015ae:	430b      	orrs	r3, r1
 80015b0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b2:	f7ff ffd3 	bl	800155c <HAL_InitTick>
 80015b6:	1e04      	subs	r4, r0, #0
 80015b8:	d103      	bne.n	80015c2 <HAL_Init+0x1e>
    HAL_MspInit();
 80015ba:	f7ff fedf 	bl	800137c <HAL_MspInit>
}
 80015be:	0020      	movs	r0, r4
 80015c0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80015c2:	2401      	movs	r4, #1
 80015c4:	e7fb      	b.n	80015be <HAL_Init+0x1a>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	40022000 	.word	0x40022000

080015cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015cc:	4a03      	ldr	r2, [pc, #12]	; (80015dc <HAL_IncTick+0x10>)
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_IncTick+0x14>)
 80015d0:	6811      	ldr	r1, [r2, #0]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	185b      	adds	r3, r3, r1
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	4770      	bx	lr
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	20000c38 	.word	0x20000c38
 80015e0:	20000014 	.word	0x20000014

080015e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015e4:	4b01      	ldr	r3, [pc, #4]	; (80015ec <HAL_GetTick+0x8>)
 80015e6:	6818      	ldr	r0, [r3, #0]
}
 80015e8:	4770      	bx	lr
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	20000c38 	.word	0x20000c38

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff fff6 	bl	80015e4 <HAL_GetTick>
 80015f8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	1c63      	adds	r3, r4, #1
 80015fc:	d002      	beq.n	8001604 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_Delay+0x20>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	1b40      	subs	r0, r0, r5
 800160a:	42a0      	cmp	r0, r4
 800160c:	d3fa      	bcc.n	8001604 <HAL_Delay+0x14>
  {
  }
}
 800160e:	bd70      	pop	{r4, r5, r6, pc}
 8001610:	20000014 	.word	0x20000014

08001614 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <ADC_DelayMicroSecond+0x24>)
{
 8001616:	b513      	push	{r0, r1, r4, lr}
 8001618:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <ADC_DelayMicroSecond+0x28>)
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	f7fe fd87 	bl	8000130 <__udivsi3>
 8001622:	4344      	muls	r4, r0
 8001624:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8001626:	9b01      	ldr	r3, [sp, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d100      	bne.n	800162e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800162c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	3b01      	subs	r3, #1
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	e7f7      	b.n	8001626 <ADC_DelayMicroSecond+0x12>
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	20000010 	.word	0x20000010
 800163c:	000f4240 	.word	0x000f4240

08001640 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001640:	2103      	movs	r1, #3
 8001642:	6803      	ldr	r3, [r0, #0]
{
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001648:	6898      	ldr	r0, [r3, #8]
 800164a:	4008      	ands	r0, r1
 800164c:	2801      	cmp	r0, #1
 800164e:	d001      	beq.n	8001654 <ADC_Disable+0x14>
  return HAL_OK;
 8001650:	2000      	movs	r0, #0
}
 8001652:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4202      	tst	r2, r0
 8001658:	d0fa      	beq.n	8001650 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800165a:	2205      	movs	r2, #5
 800165c:	689d      	ldr	r5, [r3, #8]
 800165e:	4015      	ands	r5, r2
 8001660:	2d01      	cmp	r5, #1
 8001662:	d11d      	bne.n	80016a0 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8001664:	6898      	ldr	r0, [r3, #8]
 8001666:	3a03      	subs	r2, #3
 8001668:	4302      	orrs	r2, r0
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800166e:	f7ff ffb9 	bl	80015e4 <HAL_GetTick>
 8001672:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	422b      	tst	r3, r5
 800167a:	d0e9      	beq.n	8001650 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800167c:	f7ff ffb2 	bl	80015e4 <HAL_GetTick>
 8001680:	1b80      	subs	r0, r0, r6
 8001682:	280a      	cmp	r0, #10
 8001684:	d9f6      	bls.n	8001674 <ADC_Disable+0x34>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	422b      	tst	r3, r5
 800168c:	d0f2      	beq.n	8001674 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168e:	2310      	movs	r3, #16
 8001690:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8001692:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001694:	4313      	orrs	r3, r2
 8001696:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800169a:	431d      	orrs	r5, r3
 800169c:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 800169e:	e7d8      	b.n	8001652 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a0:	2310      	movs	r3, #16
 80016a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016a4:	4313      	orrs	r3, r2
 80016a6:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016aa:	4303      	orrs	r3, r0
 80016ac:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80016ae:	e7d0      	b.n	8001652 <ADC_Disable+0x12>

080016b0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b0:	2103      	movs	r1, #3
 80016b2:	6803      	ldr	r3, [r0, #0]
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b6:	689a      	ldr	r2, [r3, #8]
{
 80016b8:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ba:	400a      	ands	r2, r1
 80016bc:	2a01      	cmp	r2, #1
 80016be:	d104      	bne.n	80016ca <ADC_Enable+0x1a>
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	4211      	tst	r1, r2
 80016c4:	d001      	beq.n	80016ca <ADC_Enable+0x1a>
  return HAL_OK;
 80016c6:	2000      	movs	r0, #0
}
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	4a15      	ldr	r2, [pc, #84]	; (8001724 <ADC_Enable+0x74>)
 80016ce:	4211      	tst	r1, r2
 80016d0:	d008      	beq.n	80016e4 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016d8:	4313      	orrs	r3, r2
 80016da:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016de:	4303      	orrs	r3, r0
 80016e0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80016e2:	e7f1      	b.n	80016c8 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80016e4:	2501      	movs	r5, #1
 80016e6:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80016e8:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80016ea:	432a      	orrs	r2, r5
 80016ec:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80016ee:	f7ff ff91 	bl	8001614 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80016f2:	f7ff ff77 	bl	80015e4 <HAL_GetTick>
 80016f6:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	422b      	tst	r3, r5
 80016fe:	d1e2      	bne.n	80016c6 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001700:	f7ff ff70 	bl	80015e4 <HAL_GetTick>
 8001704:	1b80      	subs	r0, r0, r6
 8001706:	280a      	cmp	r0, #10
 8001708:	d9f6      	bls.n	80016f8 <ADC_Enable+0x48>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	422b      	tst	r3, r5
 8001710:	d1f2      	bne.n	80016f8 <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001712:	2310      	movs	r3, #16
 8001714:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8001716:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001718:	4313      	orrs	r3, r2
 800171a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800171e:	431d      	orrs	r5, r3
 8001720:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8001722:	e7d1      	b.n	80016c8 <ADC_Enable+0x18>
 8001724:	80000017 	.word	0x80000017

08001728 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001728:	2204      	movs	r2, #4
 800172a:	6803      	ldr	r3, [r0, #0]
{
 800172c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800172e:	6899      	ldr	r1, [r3, #8]
{
 8001730:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001732:	4211      	tst	r1, r2
 8001734:	d101      	bne.n	800173a <ADC_ConversionStop+0x12>
  return HAL_OK;
 8001736:	2000      	movs	r0, #0
}
 8001738:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	4211      	tst	r1, r2
 800173e:	d006      	beq.n	800174e <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001740:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001742:	0792      	lsls	r2, r2, #30
 8001744:	d403      	bmi.n	800174e <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001746:	2210      	movs	r2, #16
 8001748:	6899      	ldr	r1, [r3, #8]
 800174a:	430a      	orrs	r2, r1
 800174c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800174e:	f7ff ff49 	bl	80015e4 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001752:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8001754:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4233      	tst	r3, r6
 800175c:	d0eb      	beq.n	8001736 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800175e:	f7ff ff41 	bl	80015e4 <HAL_GetTick>
 8001762:	1b40      	subs	r0, r0, r5
 8001764:	280a      	cmp	r0, #10
 8001766:	d9f6      	bls.n	8001756 <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4233      	tst	r3, r6
 800176e:	d0f2      	beq.n	8001756 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001770:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001772:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001776:	4313      	orrs	r3, r2
 8001778:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800177c:	4303      	orrs	r3, r0
 800177e:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001780:	e7da      	b.n	8001738 <ADC_ConversionStop+0x10>
	...

08001784 <HAL_ADC_Init>:
{
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001788:	2001      	movs	r0, #1
  if(hadc == NULL)
 800178a:	2c00      	cmp	r4, #0
 800178c:	d01b      	beq.n	80017c6 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800178e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001794:	0022      	movs	r2, r4
 8001796:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8001798:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 800179a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800179c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800179e:	f7fe ff3f 	bl	8000620 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80017a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017a4:	06db      	lsls	r3, r3, #27
 80017a6:	d406      	bmi.n	80017b6 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	2204      	movs	r2, #4
 80017ac:	6899      	ldr	r1, [r3, #8]
 80017ae:	0008      	movs	r0, r1
 80017b0:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80017b2:	4211      	tst	r1, r2
 80017b4:	d008      	beq.n	80017c8 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b6:	2310      	movs	r3, #16
 80017b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80017ba:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017bc:	4313      	orrs	r3, r2
 80017be:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80017c0:	2300      	movs	r3, #0
 80017c2:	3450      	adds	r4, #80	; 0x50
 80017c4:	7023      	strb	r3, [r4, #0]
}
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80017c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017ca:	4955      	ldr	r1, [pc, #340]	; (8001920 <HAL_ADC_Init+0x19c>)
 80017cc:	4011      	ands	r1, r2
 80017ce:	2202      	movs	r2, #2
 80017d0:	430a      	orrs	r2, r1
 80017d2:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017d4:	2203      	movs	r2, #3
 80017d6:	6899      	ldr	r1, [r3, #8]
 80017d8:	4011      	ands	r1, r2
 80017da:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_ADC_Init+0x1a0>)
 80017dc:	2901      	cmp	r1, #1
 80017de:	d102      	bne.n	80017e6 <HAL_ADC_Init+0x62>
 80017e0:	681d      	ldr	r5, [r3, #0]
 80017e2:	420d      	tst	r5, r1
 80017e4:	d119      	bne.n	800181a <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80017e6:	2680      	movs	r6, #128	; 0x80
 80017e8:	6861      	ldr	r1, [r4, #4]
 80017ea:	05f6      	lsls	r6, r6, #23
 80017ec:	004d      	lsls	r5, r1, #1
 80017ee:	086d      	lsrs	r5, r5, #1
 80017f0:	42b5      	cmp	r5, r6
 80017f2:	d003      	beq.n	80017fc <HAL_ADC_Init+0x78>
 80017f4:	2580      	movs	r5, #128	; 0x80
 80017f6:	062d      	lsls	r5, r5, #24
 80017f8:	42a9      	cmp	r1, r5
 80017fa:	d176      	bne.n	80018ea <HAL_ADC_Init+0x166>
 80017fc:	691d      	ldr	r5, [r3, #16]
 80017fe:	00ad      	lsls	r5, r5, #2
 8001800:	08ad      	lsrs	r5, r5, #2
 8001802:	611d      	str	r5, [r3, #16]
 8001804:	691d      	ldr	r5, [r3, #16]
 8001806:	4329      	orrs	r1, r5
 8001808:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800180a:	2518      	movs	r5, #24
 800180c:	68d9      	ldr	r1, [r3, #12]
 800180e:	43a9      	bics	r1, r5
 8001810:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001812:	68d9      	ldr	r1, [r3, #12]
 8001814:	68a5      	ldr	r5, [r4, #8]
 8001816:	4329      	orrs	r1, r5
 8001818:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800181a:	6811      	ldr	r1, [r2, #0]
 800181c:	4d42      	ldr	r5, [pc, #264]	; (8001928 <HAL_ADC_Init+0x1a4>)
 800181e:	4029      	ands	r1, r5
 8001820:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001824:	6815      	ldr	r5, [r2, #0]
 8001826:	0649      	lsls	r1, r1, #25
 8001828:	4329      	orrs	r1, r5
 800182a:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	6899      	ldr	r1, [r3, #8]
 8001830:	0552      	lsls	r2, r2, #21
 8001832:	4211      	tst	r1, r2
 8001834:	d102      	bne.n	800183c <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	430a      	orrs	r2, r1
 800183a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	493b      	ldr	r1, [pc, #236]	; (800192c <HAL_ADC_Init+0x1a8>)
 8001840:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001842:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001844:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001846:	68dd      	ldr	r5, [r3, #12]
 8001848:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800184a:	2902      	cmp	r1, #2
 800184c:	d100      	bne.n	8001850 <HAL_ADC_Init+0xcc>
 800184e:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001850:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001852:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001854:	4332      	orrs	r2, r6
 8001856:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001858:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800185a:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800185c:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800185e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001860:	69e5      	ldr	r5, [r4, #28]
 8001862:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001864:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001866:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001868:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800186a:	0025      	movs	r5, r4
 800186c:	352c      	adds	r5, #44	; 0x2c
 800186e:	782d      	ldrb	r5, [r5, #0]
 8001870:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001872:	432a      	orrs	r2, r5
 8001874:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001876:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001878:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800187c:	30ff      	adds	r0, #255	; 0xff
 800187e:	4282      	cmp	r2, r0
 8001880:	d004      	beq.n	800188c <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001882:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001884:	68d8      	ldr	r0, [r3, #12]
 8001886:	432a      	orrs	r2, r5
 8001888:	4302      	orrs	r2, r0
 800188a:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800188c:	1ca2      	adds	r2, r4, #2
 800188e:	7fd2      	ldrb	r2, [r2, #31]
 8001890:	2a01      	cmp	r2, #1
 8001892:	d106      	bne.n	80018a2 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001894:	2900      	cmp	r1, #0
 8001896:	d134      	bne.n	8001902 <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	68d9      	ldr	r1, [r3, #12]
 800189c:	0252      	lsls	r2, r2, #9
 800189e:	430a      	orrs	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80018a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80018a4:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 80018a6:	2901      	cmp	r1, #1
 80018a8:	d133      	bne.n	8001912 <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80018aa:	4821      	ldr	r0, [pc, #132]	; (8001930 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80018ac:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80018ae:	4002      	ands	r2, r0
 80018b0:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80018b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018b4:	6918      	ldr	r0, [r3, #16]
 80018b6:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80018b8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80018ba:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80018bc:	4302      	orrs	r2, r0
 80018be:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	4311      	orrs	r1, r2
 80018c4:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80018c6:	2107      	movs	r1, #7
 80018c8:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80018ca:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80018cc:	438a      	bics	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80018d4:	430a      	orrs	r2, r1
 80018d6:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80018d8:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80018da:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80018dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018de:	4393      	bics	r3, r2
 80018e0:	001a      	movs	r2, r3
 80018e2:	2301      	movs	r3, #1
 80018e4:	4313      	orrs	r3, r2
 80018e6:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80018e8:	e76d      	b.n	80017c6 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80018ea:	691d      	ldr	r5, [r3, #16]
 80018ec:	4e11      	ldr	r6, [pc, #68]	; (8001934 <HAL_ADC_Init+0x1b0>)
 80018ee:	00ad      	lsls	r5, r5, #2
 80018f0:	08ad      	lsrs	r5, r5, #2
 80018f2:	611d      	str	r5, [r3, #16]
 80018f4:	6815      	ldr	r5, [r2, #0]
 80018f6:	4035      	ands	r5, r6
 80018f8:	6015      	str	r5, [r2, #0]
 80018fa:	6815      	ldr	r5, [r2, #0]
 80018fc:	4329      	orrs	r1, r5
 80018fe:	6011      	str	r1, [r2, #0]
 8001900:	e783      	b.n	800180a <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001902:	2120      	movs	r1, #32
 8001904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001906:	4301      	orrs	r1, r0
 8001908:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800190c:	430a      	orrs	r2, r1
 800190e:	65a2      	str	r2, [r4, #88]	; 0x58
 8001910:	e7c7      	b.n	80018a2 <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001912:	2101      	movs	r1, #1
 8001914:	420a      	tst	r2, r1
 8001916:	d0d6      	beq.n	80018c6 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	438a      	bics	r2, r1
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	e7d2      	b.n	80018c6 <HAL_ADC_Init+0x142>
 8001920:	fffffefd 	.word	0xfffffefd
 8001924:	40012708 	.word	0x40012708
 8001928:	fdffffff 	.word	0xfdffffff
 800192c:	fffe0219 	.word	0xfffe0219
 8001930:	fffffc03 	.word	0xfffffc03
 8001934:	ffc3ffff 	.word	0xffc3ffff

08001938 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001938:	6803      	ldr	r3, [r0, #0]
{
 800193a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800193c:	689b      	ldr	r3, [r3, #8]
{
 800193e:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8001940:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001942:	075b      	lsls	r3, r3, #29
 8001944:	d41a      	bmi.n	800197c <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001946:	0025      	movs	r5, r4
 8001948:	3550      	adds	r5, #80	; 0x50
 800194a:	782b      	ldrb	r3, [r5, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d015      	beq.n	800197c <HAL_ADC_Start+0x44>
 8001950:	2301      	movs	r3, #1
 8001952:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001954:	69e3      	ldr	r3, [r4, #28]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d111      	bne.n	800197e <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800195a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800195e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	401a      	ands	r2, r3
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001968:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800196a:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800196c:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800196e:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001974:	6899      	ldr	r1, [r3, #8]
 8001976:	3a18      	subs	r2, #24
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800197e:	0020      	movs	r0, r4
 8001980:	f7ff fe96 	bl	80016b0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001984:	2800      	cmp	r0, #0
 8001986:	d0e8      	beq.n	800195a <HAL_ADC_Start+0x22>
 8001988:	e7f8      	b.n	800197c <HAL_ADC_Start+0x44>
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	fffff0fe 	.word	0xfffff0fe

08001990 <HAL_ADC_Stop>:
{
 8001990:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001992:	0006      	movs	r6, r0
 8001994:	3650      	adds	r6, #80	; 0x50
 8001996:	7833      	ldrb	r3, [r6, #0]
{
 8001998:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800199a:	2002      	movs	r0, #2
 800199c:	2b01      	cmp	r3, #1
 800199e:	d012      	beq.n	80019c6 <HAL_ADC_Stop+0x36>
 80019a0:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80019a2:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80019a4:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80019a6:	f7ff febf 	bl	8001728 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80019ae:	0020      	movs	r0, r4
 80019b0:	f7ff fe46 	bl	8001640 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d104      	bne.n	80019c2 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80019b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019ba:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <HAL_ADC_Stop+0x38>)
 80019bc:	4013      	ands	r3, r2
 80019be:	431d      	orrs	r5, r3
 80019c0:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80019c2:	2300      	movs	r3, #0
 80019c4:	7033      	strb	r3, [r6, #0]
}
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	fffffefe 	.word	0xfffffefe

080019cc <HAL_ADC_PollForConversion>:
{
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019ce:	6945      	ldr	r5, [r0, #20]
{
 80019d0:	0004      	movs	r4, r0
 80019d2:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019d4:	2d08      	cmp	r5, #8
 80019d6:	d00d      	beq.n	80019f4 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80019d8:	6803      	ldr	r3, [r0, #0]
 80019da:	2001      	movs	r0, #1
 80019dc:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80019de:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80019e0:	4203      	tst	r3, r0
 80019e2:	d007      	beq.n	80019f4 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e4:	2320      	movs	r3, #32
 80019e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 80019e8:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ea:	4313      	orrs	r3, r2
 80019ec:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 80019ee:	2300      	movs	r3, #0
 80019f0:	7023      	strb	r3, [r4, #0]
}
 80019f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80019f4:	f7ff fdf6 	bl	80015e4 <HAL_GetTick>
 80019f8:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4215      	tst	r5, r2
 8001a00:	d024      	beq.n	8001a4c <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a0c:	22c0      	movs	r2, #192	; 0xc0
 8001a0e:	68d9      	ldr	r1, [r3, #12]
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	4211      	tst	r1, r2
 8001a14:	d113      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a16:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a18:	7fd2      	ldrb	r2, [r2, #31]
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	0712      	lsls	r2, r2, #28
 8001a22:	d50c      	bpl.n	8001a3e <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	0752      	lsls	r2, r2, #29
 8001a28:	d428      	bmi.n	8001a7c <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a2a:	210c      	movs	r1, #12
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	438a      	bics	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001a32:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_ADC_PollForConversion+0xc4>)
 8001a36:	4011      	ands	r1, r2
 8001a38:	2201      	movs	r2, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8001a3e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a40:	69a2      	ldr	r2, [r4, #24]
 8001a42:	4282      	cmp	r2, r0
 8001a44:	d1d5      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e7d2      	b.n	80019f2 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001a4c:	1c72      	adds	r2, r6, #1
 8001a4e:	d0d5      	beq.n	80019fc <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a50:	2e00      	cmp	r6, #0
 8001a52:	d10d      	bne.n	8001a70 <HAL_ADC_PollForConversion+0xa4>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a54:	002a      	movs	r2, r5
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	421d      	tst	r5, r3
 8001a5e:	d1cc      	bne.n	80019fa <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a60:	2304      	movs	r3, #4
 8001a62:	6d61      	ldr	r1, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8001a64:	3450      	adds	r4, #80	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a66:	430b      	orrs	r3, r1
 8001a68:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 8001a6a:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8001a6c:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 8001a6e:	e7c0      	b.n	80019f2 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a70:	f7ff fdb8 	bl	80015e4 <HAL_GetTick>
 8001a74:	1bc0      	subs	r0, r0, r7
 8001a76:	42b0      	cmp	r0, r6
 8001a78:	d8ec      	bhi.n	8001a54 <HAL_ADC_PollForConversion+0x88>
 8001a7a:	e7be      	b.n	80019fa <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001a80:	430a      	orrs	r2, r1
 8001a82:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a84:	2201      	movs	r2, #1
 8001a86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	65a2      	str	r2, [r4, #88]	; 0x58
 8001a8c:	e7d7      	b.n	8001a3e <HAL_ADC_PollForConversion+0x72>
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	fffffefe 	.word	0xfffffefe

08001a94 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001a94:	6803      	ldr	r3, [r0, #0]
 8001a96:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_ADC_ConfigChannel>:
{
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	3450      	adds	r4, #80	; 0x50
 8001aa2:	7822      	ldrb	r2, [r4, #0]
{
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d00b      	beq.n	8001ac6 <HAL_ADC_ConfigChannel+0x2a>
 8001aae:	3801      	subs	r0, #1
 8001ab0:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	6891      	ldr	r1, [r2, #8]
 8001ab6:	0749      	lsls	r1, r1, #29
 8001ab8:	d506      	bpl.n	8001ac8 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aba:	2220      	movs	r2, #32
 8001abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	7023      	strb	r3, [r4, #0]
}
 8001ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	682b      	ldr	r3, [r5, #0]
 8001acc:	4e20      	ldr	r6, [pc, #128]	; (8001b50 <HAL_ADC_ConfigChannel+0xb4>)
 8001ace:	686f      	ldr	r7, [r5, #4]
 8001ad0:	0358      	lsls	r0, r3, #13
 8001ad2:	02c9      	lsls	r1, r1, #11
 8001ad4:	0b40      	lsrs	r0, r0, #13
 8001ad6:	4019      	ands	r1, r3
 8001ad8:	42b7      	cmp	r7, r6
 8001ada:	d021      	beq.n	8001b20 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001adc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001ade:	4318      	orrs	r0, r3
 8001ae0:	6290      	str	r0, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001ae2:	2900      	cmp	r1, #0
 8001ae4:	d008      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_ADC_ConfigChannel+0xb8>)
 8001aea:	041b      	lsls	r3, r3, #16
 8001aec:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001aee:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001af4:	f7ff fd8e 	bl	8001614 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001af8:	682a      	ldr	r2, [r5, #0]
 8001afa:	0393      	lsls	r3, r2, #14
 8001afc:	d505      	bpl.n	8001b0a <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	4914      	ldr	r1, [pc, #80]	; (8001b54 <HAL_ADC_ConfigChannel+0xb8>)
 8001b02:	03db      	lsls	r3, r3, #15
 8001b04:	6808      	ldr	r0, [r1, #0]
 8001b06:	4303      	orrs	r3, r0
 8001b08:	600b      	str	r3, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001b0a:	03d3      	lsls	r3, r2, #15
 8001b0c:	d505      	bpl.n	8001b1a <HAL_ADC_ConfigChannel+0x7e>
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_ADC_ConfigChannel+0xb8>)
 8001b12:	045b      	lsls	r3, r3, #17
 8001b14:	6811      	ldr	r1, [r2, #0]
 8001b16:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001b18:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001b1e:	e7d2      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001b20:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8001b22:	4385      	bics	r5, r0
 8001b24:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001b26:	2900      	cmp	r1, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0x98>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <HAL_ADC_ConfigChannel+0xb8>)
 8001b2c:	480a      	ldr	r0, [pc, #40]	; (8001b58 <HAL_ADC_ConfigChannel+0xbc>)
 8001b2e:	680a      	ldr	r2, [r1, #0]
 8001b30:	4002      	ands	r2, r0
 8001b32:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001b34:	039a      	lsls	r2, r3, #14
 8001b36:	d504      	bpl.n	8001b42 <HAL_ADC_ConfigChannel+0xa6>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001b38:	4906      	ldr	r1, [pc, #24]	; (8001b54 <HAL_ADC_ConfigChannel+0xb8>)
 8001b3a:	4808      	ldr	r0, [pc, #32]	; (8001b5c <HAL_ADC_ConfigChannel+0xc0>)
 8001b3c:	680a      	ldr	r2, [r1, #0]
 8001b3e:	4002      	ands	r2, r0
 8001b40:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001b42:	03db      	lsls	r3, r3, #15
 8001b44:	d5e9      	bpl.n	8001b1a <HAL_ADC_ConfigChannel+0x7e>
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001b46:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <HAL_ADC_ConfigChannel+0xb8>)
 8001b48:	4905      	ldr	r1, [pc, #20]	; (8001b60 <HAL_ADC_ConfigChannel+0xc4>)
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	e7e3      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x7c>
 8001b50:	00001001 	.word	0x00001001
 8001b54:	40012708 	.word	0x40012708
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	ffbfffff 	.word	0xffbfffff
 8001b60:	feffffff 	.word	0xfeffffff

08001b64 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b66:	0005      	movs	r5, r0
 8001b68:	3550      	adds	r5, #80	; 0x50
 8001b6a:	782b      	ldrb	r3, [r5, #0]
{
 8001b6c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001b6e:	2002      	movs	r0, #2
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d048      	beq.n	8001c06 <HAL_ADCEx_Calibration_Start+0xa2>
 8001b74:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b76:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8001b78:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	6898      	ldr	r0, [r3, #8]
 8001b7e:	4010      	ands	r0, r2
 8001b80:	2801      	cmp	r0, #1
 8001b82:	d109      	bne.n	8001b98 <HAL_ADCEx_Calibration_Start+0x34>
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4202      	tst	r2, r0
 8001b88:	d006      	beq.n	8001b98 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b92:	2300      	movs	r3, #0
 8001b94:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8001b96:	e036      	b.n	8001c06 <HAL_ADCEx_Calibration_Start+0xa2>
    ADC_STATE_CLR_SET(hadc->State, 
 8001b98:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001b9a:	491b      	ldr	r1, [pc, #108]	; (8001c08 <HAL_ADCEx_Calibration_Start+0xa4>)
 8001b9c:	4011      	ands	r1, r2
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ba2:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8001ba4:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ba6:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	438a      	bics	r2, r1
 8001bac:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	6899      	ldr	r1, [r3, #8]
 8001bb2:	0612      	lsls	r2, r2, #24
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001bb8:	f7ff fd14 	bl	80015e4 <HAL_GetTick>
 8001bbc:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	db0c      	blt.n	8001be0 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001bc6:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001bc8:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001bca:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001bcc:	430e      	orrs	r6, r1
 8001bce:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd2:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	6563      	str	r3, [r4, #84]	; 0x54
 8001bde:	e7d8      	b.n	8001b92 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001be0:	f7ff fd00 	bl	80015e4 <HAL_GetTick>
 8001be4:	1bc0      	subs	r0, r0, r7
 8001be6:	280a      	cmp	r0, #10
 8001be8:	d9e9      	bls.n	8001bbe <HAL_ADCEx_Calibration_Start+0x5a>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	dae5      	bge.n	8001bbe <HAL_ADCEx_Calibration_Start+0x5a>
          ADC_STATE_CLR_SET(hadc->State,
 8001bf2:	2212      	movs	r2, #18
 8001bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8001bf6:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8001c02:	2300      	movs	r3, #0
 8001c04:	702b      	strb	r3, [r5, #0]
}
 8001c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c08:	fffffefd 	.word	0xfffffefd

08001c0c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0c:	b530      	push	{r4, r5, lr}
 8001c0e:	25ff      	movs	r5, #255	; 0xff
 8001c10:	2403      	movs	r4, #3
 8001c12:	002a      	movs	r2, r5
 8001c14:	4004      	ands	r4, r0
 8001c16:	00e4      	lsls	r4, r4, #3
 8001c18:	40a2      	lsls	r2, r4
 8001c1a:	0189      	lsls	r1, r1, #6
 8001c1c:	4029      	ands	r1, r5
 8001c1e:	43d2      	mvns	r2, r2
 8001c20:	40a1      	lsls	r1, r4
 8001c22:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001c24:	2800      	cmp	r0, #0
 8001c26:	db0a      	blt.n	8001c3e <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c28:	24c0      	movs	r4, #192	; 0xc0
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_NVIC_SetPriority+0x4c>)
 8001c2c:	0880      	lsrs	r0, r0, #2
 8001c2e:	0080      	lsls	r0, r0, #2
 8001c30:	18c0      	adds	r0, r0, r3
 8001c32:	00a4      	lsls	r4, r4, #2
 8001c34:	5903      	ldr	r3, [r0, r4]
 8001c36:	401a      	ands	r2, r3
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001c3c:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c3e:	200f      	movs	r0, #15
 8001c40:	4003      	ands	r3, r0
 8001c42:	3b08      	subs	r3, #8
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_NVIC_SetPriority+0x50>)
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	181b      	adds	r3, r3, r0
 8001c4c:	69d8      	ldr	r0, [r3, #28]
 8001c4e:	4002      	ands	r2, r0
 8001c50:	4311      	orrs	r1, r2
 8001c52:	61d9      	str	r1, [r3, #28]
 8001c54:	e7f2      	b.n	8001c3c <HAL_NVIC_SetPriority+0x30>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c60:	2800      	cmp	r0, #0
 8001c62:	db05      	blt.n	8001c70 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c64:	231f      	movs	r3, #31
 8001c66:	4018      	ands	r0, r3
 8001c68:	3b1e      	subs	r3, #30
 8001c6a:	4083      	lsls	r3, r0
 8001c6c:	4a01      	ldr	r2, [pc, #4]	; (8001c74 <HAL_NVIC_EnableIRQ+0x14>)
 8001c6e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c70:	4770      	bx	lr
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	1e43      	subs	r3, r0, #1
 8001c7c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d20d      	bcs.n	8001ca0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c84:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c8c:	6a03      	ldr	r3, [r0, #32]
 8001c8e:	0609      	lsls	r1, r1, #24
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ca0:	4770      	bx	lr
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	e000e010 	.word	0xe000e010
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001cac:	b510      	push	{r4, lr}
 8001cae:	0004      	movs	r4, r0
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
  if(hdac == NULL)
 8001cb2:	2c00      	cmp	r4, #0
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_DAC_Init+0x26>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001cb6:	7923      	ldrb	r3, [r4, #4]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <HAL_DAC_Init+0x1a>
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cbe:	0020      	movs	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8001cc0:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8001cc2:	f7fe fd09 	bl	80006d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cc6:	2302      	movs	r3, #2

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cc8:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cca:	7123      	strb	r3, [r4, #4]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ccc:	3b01      	subs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cce:	60e0      	str	r0, [r4, #12]
  hdac->State = HAL_DAC_STATE_READY;
 8001cd0:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8001cd2:	bd10      	pop	{r4, pc}

08001cd4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001cd4:	b530      	push	{r4, r5, lr}
 8001cd6:	000c      	movs	r4, r1
 8001cd8:	2102      	movs	r1, #2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cda:	7945      	ldrb	r5, [r0, #5]
{
 8001cdc:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8001cde:	0008      	movs	r0, r1
 8001ce0:	2d01      	cmp	r5, #1
 8001ce2:	d014      	beq.n	8001d0e <HAL_DAC_ConfigChannel+0x3a>
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001ce4:	4d0a      	ldr	r5, [pc, #40]	; (8001d10 <HAL_DAC_ConfigChannel+0x3c>)
  tmpreg1 = hdac->Instance->CR;
 8001ce6:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001ce8:	4095      	lsls	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cea:	7119      	strb	r1, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8001cec:	6801      	ldr	r1, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001cee:	43a9      	bics	r1, r5
 8001cf0:	000d      	movs	r5, r1
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cf2:	cc12      	ldmia	r4, {r1, r4}
 8001cf4:	4321      	orrs	r1, r4
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8001cf6:	24c0      	movs	r4, #192	; 0xc0
  tmpreg1 |= tmpreg2 << Channel;
 8001cf8:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8001cfa:	4094      	lsls	r4, r2
  tmpreg1 |= tmpreg2 << Channel;
 8001cfc:	4329      	orrs	r1, r5
  hdac->Instance->CR = tmpreg1;
 8001cfe:	6001      	str	r1, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8001d00:	6801      	ldr	r1, [r0, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d02:	2201      	movs	r2, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8001d04:	43a1      	bics	r1, r4
 8001d06:	6001      	str	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d08:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001d0a:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 8001d0c:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8001d0e:	bd30      	pop	{r4, r5, pc}
 8001d10:	00000ffe 	.word	0x00000ffe

08001d14 <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d14:	2202      	movs	r2, #2
{
 8001d16:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8001d18:	7944      	ldrb	r4, [r0, #5]
{
 8001d1a:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8001d1c:	0010      	movs	r0, r2
 8001d1e:	2c01      	cmp	r4, #1
 8001d20:	d017      	beq.n	8001d52 <HAL_DAC_Start+0x3e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d22:	3801      	subs	r0, #1
 8001d24:	0005      	movs	r5, r0
 8001d26:	408d      	lsls	r5, r1
 8001d28:	0029      	movs	r1, r5
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d2a:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	6814      	ldr	r4, [r2, #0]
 8001d30:	4321      	orrs	r1, r4
 8001d32:	6011      	str	r1, [r2, #0]

  tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001d34:	6814      	ldr	r4, [r2, #0]
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001d36:	6811      	ldr	r1, [r2, #0]
  /* Check if software trigger enabled */
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001d38:	0764      	lsls	r4, r4, #29
 8001d3a:	d506      	bpl.n	8001d4a <HAL_DAC_Start+0x36>
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001d3c:	2438      	movs	r4, #56	; 0x38
 8001d3e:	4021      	ands	r1, r4
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001d40:	42a1      	cmp	r1, r4
 8001d42:	d102      	bne.n	8001d4a <HAL_DAC_Start+0x36>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d44:	6851      	ldr	r1, [r2, #4]
 8001d46:	4308      	orrs	r0, r1
 8001d48:	6050      	str	r0, [r2, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d4a:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d4c:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001d4e:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 8001d50:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8001d52:	bd30      	pop	{r4, r5, pc}

08001d54 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001d54:	0001      	movs	r1, r0
  __IO uint32_t tmp = 0U;
 8001d56:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance; 
 8001d58:	6809      	ldr	r1, [r1, #0]
{
 8001d5a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0U;
 8001d5c:	9001      	str	r0, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 8001d5e:	9101      	str	r1, [sp, #4]
  tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001d60:	9901      	ldr	r1, [sp, #4]
 8001d62:	3108      	adds	r1, #8
 8001d64:	1889      	adds	r1, r1, r2
 8001d66:	9101      	str	r1, [sp, #4]

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001d68:	9a01      	ldr	r2, [sp, #4]
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8001d6c:	b002      	add	sp, #8
 8001d6e:	4770      	bx	lr

08001d70 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d70:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d72:	1d84      	adds	r4, r0, #6
 8001d74:	7fe3      	ldrb	r3, [r4, #31]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d004      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001d7e:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d84:	210e      	movs	r1, #14
 8001d86:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d88:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d90:	2201      	movs	r2, #1
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	4391      	bics	r1, r2
 8001d96:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d98:	231c      	movs	r3, #28
 8001d9a:	402b      	ands	r3, r5
 8001d9c:	0015      	movs	r5, r2
 8001d9e:	409d      	lsls	r5, r3
 8001da0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8001da2:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001da4:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001da6:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001da8:	2400      	movs	r4, #0
 8001daa:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8001dac:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001db0:	42a2      	cmp	r2, r4
 8001db2:	d0e5      	beq.n	8001d80 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001db4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001db6:	0023      	movs	r3, r4
 8001db8:	e7e2      	b.n	8001d80 <HAL_DMA_Abort_IT+0x10>

08001dba <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001dba:	3006      	adds	r0, #6
 8001dbc:	7fc0      	ldrb	r0, [r0, #31]
 8001dbe:	b2c0      	uxtb	r0, r0
}
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001dc4:	4a56      	ldr	r2, [pc, #344]	; (8001f20 <HAL_GPIO_Init+0x15c>)
{
 8001dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001dc8:	1882      	adds	r2, r0, r2
 8001dca:	1e54      	subs	r4, r2, #1
 8001dcc:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8001dce:	2300      	movs	r3, #0
{
 8001dd0:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001dd2:	3205      	adds	r2, #5
 8001dd4:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dd6:	680a      	ldr	r2, [r1, #0]
 8001dd8:	0014      	movs	r4, r2
 8001dda:	40dc      	lsrs	r4, r3
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8001dde:	b007      	add	sp, #28
 8001de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001de2:	2401      	movs	r4, #1
 8001de4:	0025      	movs	r5, r4
 8001de6:	46a4      	mov	ip, r4
 8001de8:	409d      	lsls	r5, r3
 8001dea:	0014      	movs	r4, r2
 8001dec:	402c      	ands	r4, r5
 8001dee:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8001df0:	422a      	tst	r2, r5
 8001df2:	d100      	bne.n	8001df6 <HAL_GPIO_Init+0x32>
 8001df4:	e092      	b.n	8001f1c <HAL_GPIO_Init+0x158>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df6:	2403      	movs	r4, #3
 8001df8:	684a      	ldr	r2, [r1, #4]
 8001dfa:	005e      	lsls	r6, r3, #1
 8001dfc:	9201      	str	r2, [sp, #4]
 8001dfe:	4022      	ands	r2, r4
 8001e00:	40b4      	lsls	r4, r6
 8001e02:	43e4      	mvns	r4, r4
 8001e04:	9403      	str	r4, [sp, #12]
 8001e06:	1e54      	subs	r4, r2, #1
 8001e08:	4564      	cmp	r4, ip
 8001e0a:	d82a      	bhi.n	8001e62 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8001e0c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e0e:	9c03      	ldr	r4, [sp, #12]
 8001e10:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e12:	68cc      	ldr	r4, [r1, #12]
 8001e14:	40b4      	lsls	r4, r6
 8001e16:	433c      	orrs	r4, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e18:	4667      	mov	r7, ip
        GPIOx->OSPEEDR = temp;
 8001e1a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e1c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1e:	43ac      	bics	r4, r5
 8001e20:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e22:	9c01      	ldr	r4, [sp, #4]
 8001e24:	0924      	lsrs	r4, r4, #4
 8001e26:	403c      	ands	r4, r7
 8001e28:	409c      	lsls	r4, r3
 8001e2a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001e2c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e2e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e30:	9c03      	ldr	r4, [sp, #12]
 8001e32:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e34:	688c      	ldr	r4, [r1, #8]
 8001e36:	40b4      	lsls	r4, r6
 8001e38:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001e3a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	2a02      	cmp	r2, #2
 8001e3e:	d112      	bne.n	8001e66 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3U];
 8001e40:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e42:	2507      	movs	r5, #7
 8001e44:	00a4      	lsls	r4, r4, #2
 8001e46:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e4a:	9404      	str	r4, [sp, #16]
 8001e4c:	240f      	movs	r4, #15
 8001e4e:	401d      	ands	r5, r3
 8001e50:	00ad      	lsls	r5, r5, #2
 8001e52:	40ac      	lsls	r4, r5
 8001e54:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e56:	690c      	ldr	r4, [r1, #16]
 8001e58:	40ac      	lsls	r4, r5
 8001e5a:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001e5c:	9c04      	ldr	r4, [sp, #16]
 8001e5e:	6227      	str	r7, [r4, #32]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e62:	2a03      	cmp	r2, #3
 8001e64:	d1e3      	bne.n	8001e2e <HAL_GPIO_Init+0x6a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e66:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8001e68:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e6a:	9d03      	ldr	r5, [sp, #12]
 8001e6c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6e:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8001e70:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e72:	22c0      	movs	r2, #192	; 0xc0
 8001e74:	9c01      	ldr	r4, [sp, #4]
 8001e76:	0292      	lsls	r2, r2, #10
 8001e78:	4214      	tst	r4, r2
 8001e7a:	d04f      	beq.n	8001f1c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7c:	2501      	movs	r5, #1
 8001e7e:	4c29      	ldr	r4, [pc, #164]	; (8001f24 <HAL_GPIO_Init+0x160>)
 8001e80:	46ac      	mov	ip, r5
 8001e82:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e84:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e88:	001d      	movs	r5, r3
 8001e8a:	260f      	movs	r6, #15
 8001e8c:	403d      	ands	r5, r7
 8001e8e:	00ad      	lsls	r5, r5, #2
 8001e90:	40ae      	lsls	r6, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e94:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <HAL_GPIO_Init+0x164>)
 8001e96:	089c      	lsrs	r4, r3, #2
 8001e98:	00a4      	lsls	r4, r4, #2
 8001e9a:	18a4      	adds	r4, r4, r2
 8001e9c:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e9e:	43b2      	bics	r2, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ea0:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ea2:	9203      	str	r2, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ea4:	05f6      	lsls	r6, r6, #23
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	42b0      	cmp	r0, r6
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_GPIO_Init+0x102>
 8001eac:	4e1f      	ldr	r6, [pc, #124]	; (8001f2c <HAL_GPIO_Init+0x168>)
 8001eae:	4662      	mov	r2, ip
 8001eb0:	42b0      	cmp	r0, r6
 8001eb2:	d008      	beq.n	8001ec6 <HAL_GPIO_Init+0x102>
 8001eb4:	4e1e      	ldr	r6, [pc, #120]	; (8001f30 <HAL_GPIO_Init+0x16c>)
 8001eb6:	1892      	adds	r2, r2, r2
 8001eb8:	42b0      	cmp	r0, r6
 8001eba:	d004      	beq.n	8001ec6 <HAL_GPIO_Init+0x102>
 8001ebc:	4e1d      	ldr	r6, [pc, #116]	; (8001f34 <HAL_GPIO_Init+0x170>)
 8001ebe:	003a      	movs	r2, r7
 8001ec0:	42b0      	cmp	r0, r6
 8001ec2:	d000      	beq.n	8001ec6 <HAL_GPIO_Init+0x102>
 8001ec4:	9a05      	ldr	r2, [sp, #20]
 8001ec6:	40aa      	lsls	r2, r5
 8001ec8:	9d03      	ldr	r5, [sp, #12]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eca:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ecc:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ece:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8001ed4:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001ed6:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001eda:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001edc:	03ff      	lsls	r7, r7, #15
 8001ede:	d401      	bmi.n	8001ee4 <HAL_GPIO_Init+0x120>
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	0035      	movs	r5, r6
 8001ee2:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8001ee4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001ee6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001ee8:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eea:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001eec:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eee:	03bf      	lsls	r7, r7, #14
 8001ef0:	d401      	bmi.n	8001ef6 <HAL_GPIO_Init+0x132>
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	0035      	movs	r5, r6
 8001ef4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001ef6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001ef8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001efa:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efc:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001efe:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f00:	02ff      	lsls	r7, r7, #11
 8001f02:	d401      	bmi.n	8001f08 <HAL_GPIO_Init+0x144>
        temp &= ~((uint32_t)iocurrent);
 8001f04:	0035      	movs	r5, r6
 8001f06:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8001f08:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001f0a:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8001f0c:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0e:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001f10:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f12:	02bf      	lsls	r7, r7, #10
 8001f14:	d401      	bmi.n	8001f1a <HAL_GPIO_Init+0x156>
        temp &= ~((uint32_t)iocurrent);
 8001f16:	4025      	ands	r5, r4
 8001f18:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8001f1a:	60d6      	str	r6, [r2, #12]
    position++;
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	e75a      	b.n	8001dd6 <HAL_GPIO_Init+0x12>
 8001f20:	afffe400 	.word	0xafffe400
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	50000400 	.word	0x50000400
 8001f30:	50000800 	.word	0x50000800
 8001f34:	50000c00 	.word	0x50000c00
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f40:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001f42:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001f44:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001f46:	e7fc      	b.n	8001f42 <HAL_GPIO_WritePin+0x6>

08001f48 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f48:	6803      	ldr	r3, [r0, #0]
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	0792      	lsls	r2, r2, #30
 8001f4e:	d501      	bpl.n	8001f54 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f50:	2200      	movs	r2, #0
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f54:	2201      	movs	r2, #1
 8001f56:	6999      	ldr	r1, [r3, #24]
 8001f58:	4211      	tst	r1, r2
 8001f5a:	d102      	bne.n	8001f62 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f5c:	6999      	ldr	r1, [r3, #24]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	619a      	str	r2, [r3, #24]
  }
}
 8001f62:	4770      	bx	lr

08001f64 <I2C_Disable_IRQ>:
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;
 8001f64:	2300      	movs	r3, #0
{
 8001f66:	b510      	push	{r4, lr}

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001f68:	07ca      	lsls	r2, r1, #31
 8001f6a:	d508      	bpl.n	8001f7e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	3341      	adds	r3, #65	; 0x41
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	2328      	movs	r3, #40	; 0x28
 8001f74:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001f76:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f78:	2a28      	cmp	r2, #40	; 0x28
 8001f7a:	d000      	beq.n	8001f7e <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f7c:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f7e:	078a      	lsls	r2, r1, #30
 8001f80:	d508      	bpl.n	8001f94 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f82:	0002      	movs	r2, r0
 8001f84:	2428      	movs	r4, #40	; 0x28
 8001f86:	3241      	adds	r2, #65	; 0x41
 8001f88:	7812      	ldrb	r2, [r2, #0]
 8001f8a:	4022      	ands	r2, r4
 8001f8c:	42a2      	cmp	r2, r4
 8001f8e:	d10b      	bne.n	8001fa8 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f90:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f92:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f94:	b209      	sxth	r1, r1
 8001f96:	2900      	cmp	r1, #0
 8001f98:	da01      	bge.n	8001f9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f9a:	22b8      	movs	r2, #184	; 0xb8
 8001f9c:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f9e:	6801      	ldr	r1, [r0, #0]
 8001fa0:	680a      	ldr	r2, [r1, #0]
 8001fa2:	439a      	bics	r2, r3
 8001fa4:	600a      	str	r2, [r1, #0]
}
 8001fa6:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001fa8:	22f4      	movs	r2, #244	; 0xf4
 8001faa:	e7f2      	b.n	8001f92 <I2C_Disable_IRQ+0x2e>

08001fac <HAL_I2C_Init>:
{
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001fb0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001fb2:	2c00      	cmp	r4, #0
 8001fb4:	d03f      	beq.n	8002036 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb6:	0025      	movs	r5, r4
 8001fb8:	3541      	adds	r5, #65	; 0x41
 8001fba:	782b      	ldrb	r3, [r5, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001fc2:	0023      	movs	r3, r4
 8001fc4:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001fc6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001fc8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001fca:	f7fe fd03 	bl	80009d4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fce:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001fd0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001fd4:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68a6      	ldr	r6, [r4, #8]
 8001fdc:	438a      	bics	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fe0:	6861      	ldr	r1, [r4, #4]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_I2C_Init+0xa0>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_I2C_Init+0xa4>)
 8001fec:	4011      	ands	r1, r2
 8001fee:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ff0:	2801      	cmp	r0, #1
 8001ff2:	d121      	bne.n	8002038 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0209      	lsls	r1, r1, #8
 8001ff8:	4331      	orrs	r1, r6
 8001ffa:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ffc:	6858      	ldr	r0, [r3, #4]
 8001ffe:	4915      	ldr	r1, [pc, #84]	; (8002054 <HAL_I2C_Init+0xa8>)
 8002000:	4301      	orrs	r1, r0
 8002002:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002004:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002006:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002008:	400a      	ands	r2, r1
 800200a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800200c:	6961      	ldr	r1, [r4, #20]
 800200e:	6922      	ldr	r2, [r4, #16]
 8002010:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002012:	69a1      	ldr	r1, [r4, #24]
 8002014:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002016:	430a      	orrs	r2, r1
 8002018:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800201a:	6a21      	ldr	r1, [r4, #32]
 800201c:	69e2      	ldr	r2, [r4, #28]
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002022:	2201      	movs	r2, #1
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800202a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800202e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002030:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	3442      	adds	r4, #66	; 0x42
 8002034:	7020      	strb	r0, [r4, #0]
}
 8002036:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002038:	2184      	movs	r1, #132	; 0x84
 800203a:	0209      	lsls	r1, r1, #8
 800203c:	4331      	orrs	r1, r6
 800203e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002040:	2802      	cmp	r0, #2
 8002042:	d1db      	bne.n	8001ffc <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0109      	lsls	r1, r1, #4
 8002048:	6059      	str	r1, [r3, #4]
 800204a:	e7d7      	b.n	8001ffc <HAL_I2C_Init+0x50>
 800204c:	f0ffffff 	.word	0xf0ffffff
 8002050:	ffff7fff 	.word	0xffff7fff
 8002054:	02008000 	.word	0x02008000

08002058 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002058:	6803      	ldr	r3, [r0, #0]
{
 800205a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800205c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800205e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8002060:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002062:	2b00      	cmp	r3, #0
 8002064:	d000      	beq.n	8002068 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002066:	4798      	blx	r3
}
 8002068:	bd10      	pop	{r4, pc}

0800206a <HAL_I2C_SlaveTxCpltCallback>:
 800206a:	4770      	bx	lr

0800206c <HAL_I2C_SlaveRxCpltCallback>:
 800206c:	4770      	bx	lr
	...

08002070 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002070:	0001      	movs	r1, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002072:	6803      	ldr	r3, [r0, #0]
{
 8002074:	b510      	push	{r4, lr}
 8002076:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800207a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	3142      	adds	r1, #66	; 0x42
 800207e:	7008      	strb	r0, [r1, #0]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002080:	2101      	movs	r1, #1
 8002082:	0450      	lsls	r0, r2, #17
 8002084:	d518      	bpl.n	80020b8 <I2C_ITSlaveSeqCplt+0x48>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4918      	ldr	r1, [pc, #96]	; (80020ec <I2C_ITSlaveSeqCplt+0x7c>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800208a:	400a      	ands	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800208e:	0023      	movs	r3, r4
 8002090:	3341      	adds	r3, #65	; 0x41
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	2a29      	cmp	r2, #41	; 0x29
 8002096:	d115      	bne.n	80020c4 <I2C_ITSlaveSeqCplt+0x54>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002098:	3a01      	subs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800209c:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800209e:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020a0:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020a2:	2101      	movs	r1, #1
 80020a4:	f7ff ff5e 	bl	8001f64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020a8:	0023      	movs	r3, r4
 80020aa:	2200      	movs	r2, #0
 80020ac:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020ae:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80020b0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020b2:	f7ff ffda 	bl	800206a <HAL_I2C_SlaveTxCpltCallback>
}
 80020b6:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80020b8:	0bd2      	lsrs	r2, r2, #15
 80020ba:	420a      	tst	r2, r1
 80020bc:	d0e7      	beq.n	800208e <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	490b      	ldr	r1, [pc, #44]	; (80020f0 <I2C_ITSlaveSeqCplt+0x80>)
 80020c2:	e7e2      	b.n	800208a <I2C_ITSlaveSeqCplt+0x1a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	2a2a      	cmp	r2, #42	; 0x2a
 80020c8:	d1f5      	bne.n	80020b6 <I2C_ITSlaveSeqCplt+0x46>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80020ca:	3a02      	subs	r2, #2
 80020cc:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020ce:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020d0:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020d2:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020d4:	2102      	movs	r1, #2
 80020d6:	f7ff ff45 	bl	8001f64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020da:	0023      	movs	r3, r4
 80020dc:	2200      	movs	r2, #0
 80020de:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020e0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80020e2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020e4:	f7ff ffc2 	bl	800206c <HAL_I2C_SlaveRxCpltCallback>
}
 80020e8:	e7e5      	b.n	80020b6 <I2C_ITSlaveSeqCplt+0x46>
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	ffffbfff 	.word	0xffffbfff
 80020f0:	ffff7fff 	.word	0xffff7fff

080020f4 <I2C_ITAddrCplt.isra.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020f4:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80020f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020f8:	2228      	movs	r2, #40	; 0x28
 80020fa:	3341      	adds	r3, #65	; 0x41
 80020fc:	781b      	ldrb	r3, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80020fe:	0004      	movs	r4, r0
 8002100:	6801      	ldr	r1, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002102:	4013      	ands	r3, r2
 8002104:	4293      	cmp	r3, r2
 8002106:	d13c      	bne.n	8002182 <I2C_ITAddrCplt.isra.0+0x8e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002108:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 800210a:	698d      	ldr	r5, [r1, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800210c:	698e      	ldr	r6, [r1, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800210e:	688b      	ldr	r3, [r1, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002110:	68ca      	ldr	r2, [r1, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002112:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002114:	9201      	str	r2, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002116:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002118:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 800211a:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800211c:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800211e:	2a02      	cmp	r2, #2
 8002120:	d125      	bne.n	800216e <I2C_ITAddrCplt.isra.0+0x7a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002122:	059b      	lsls	r3, r3, #22
 8002124:	0d9a      	lsrs	r2, r3, #22
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002126:	0f5b      	lsrs	r3, r3, #29
 8002128:	405e      	eors	r6, r3
 800212a:	0030      	movs	r0, r6
 800212c:	2306      	movs	r3, #6
 800212e:	4018      	ands	r0, r3
 8002130:	421e      	tst	r6, r3
 8002132:	d110      	bne.n	8002156 <I2C_ITAddrCplt.isra.0+0x62>
        hi2c->AddrEventCount++;
 8002134:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002136:	3301      	adds	r3, #1
 8002138:	64a3      	str	r3, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800213a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800213c:	2b02      	cmp	r3, #2
 800213e:	d109      	bne.n	8002154 <I2C_ITAddrCplt.isra.0+0x60>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002140:	3306      	adds	r3, #6
          hi2c->AddrEventCount = 0U;
 8002142:	64a0      	str	r0, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002144:	61cb      	str	r3, [r1, #28]
          __HAL_UNLOCK(hi2c);
 8002146:	0023      	movs	r3, r4
 8002148:	3340      	adds	r3, #64	; 0x40
 800214a:	7018      	strb	r0, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800214c:	0029      	movs	r1, r5
 800214e:	0020      	movs	r0, r4
 8002150:	f7fe fe06 	bl	8000d60 <HAL_I2C_AddrCallback>
}
 8002154:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0020      	movs	r0, r4
 800215a:	0209      	lsls	r1, r1, #8
 800215c:	f7ff ff02 	bl	8001f64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002160:	0023      	movs	r3, r4
 8002162:	2200      	movs	r2, #0
 8002164:	3340      	adds	r3, #64	; 0x40
 8002166:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002168:	9a01      	ldr	r2, [sp, #4]
 800216a:	403a      	ands	r2, r7
 800216c:	e7ee      	b.n	800214c <I2C_ITAddrCplt.isra.0+0x58>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	0209      	lsls	r1, r1, #8
 8002172:	f7ff fef7 	bl	8001f64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002176:	0023      	movs	r3, r4
 8002178:	2200      	movs	r2, #0
 800217a:	3340      	adds	r3, #64	; 0x40
 800217c:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800217e:	0032      	movs	r2, r6
 8002180:	e7e4      	b.n	800214c <I2C_ITAddrCplt.isra.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002182:	2308      	movs	r3, #8
 8002184:	61cb      	str	r3, [r1, #28]
    __HAL_UNLOCK(hi2c);
 8002186:	2300      	movs	r3, #0
 8002188:	3440      	adds	r4, #64	; 0x40
 800218a:	7023      	strb	r3, [r4, #0]
}
 800218c:	e7e2      	b.n	8002154 <I2C_ITAddrCplt.isra.0+0x60>

0800218e <HAL_I2C_ListenCpltCallback>:
 800218e:	4770      	bx	lr

08002190 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <I2C_ITListenCplt+0x64>)
{
 8002192:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002194:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002196:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002198:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 800219a:	6303      	str	r3, [r0, #48]	; 0x30
{
 800219c:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800219e:	2020      	movs	r0, #32
 80021a0:	3241      	adds	r2, #65	; 0x41
 80021a2:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 80021a6:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80021a8:	074b      	lsls	r3, r1, #29
 80021aa:	d513      	bpl.n	80021d4 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80021b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021b6:	3301      	adds	r3, #1
 80021b8:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80021ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80021c0:	3b01      	subs	r3, #1
 80021c2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80021c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021cc:	2304      	movs	r3, #4
 80021ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80021d0:	4313      	orrs	r3, r2
 80021d2:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021d4:	0020      	movs	r0, r4
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <I2C_ITListenCplt+0x68>)
 80021d8:	f7ff fec4 	bl	8001f64 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021dc:	2210      	movs	r2, #16
 80021de:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80021e0:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80021e4:	0023      	movs	r3, r4
 80021e6:	2200      	movs	r2, #0
 80021e8:	3340      	adds	r3, #64	; 0x40
 80021ea:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80021ec:	f7ff ffcf 	bl	800218e <HAL_I2C_ListenCpltCallback>
}
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	ffff0000 	.word	0xffff0000
 80021f8:	00008003 	.word	0x00008003

080021fc <HAL_I2C_ErrorCallback>:
 80021fc:	4770      	bx	lr

080021fe <HAL_I2C_AbortCpltCallback>:
 80021fe:	4770      	bx	lr

08002200 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002200:	0001      	movs	r1, r0
 8002202:	0002      	movs	r2, r0
{
 8002204:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002206:	3141      	adds	r1, #65	; 0x41
 8002208:	780c      	ldrb	r4, [r1, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	3240      	adds	r2, #64	; 0x40
 800220e:	2c60      	cmp	r4, #96	; 0x60
 8002210:	d106      	bne.n	8002220 <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 8002212:	3c40      	subs	r4, #64	; 0x40
 8002214:	700c      	strb	r4, [r1, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002216:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002218:	7013      	strb	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800221a:	f7ff fff0 	bl	80021fe <HAL_I2C_AbortCpltCallback>
}
 800221e:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8002220:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002222:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8002224:	f7ff ffea 	bl	80021fc <HAL_I2C_ErrorCallback>
}
 8002228:	e7f9      	b.n	800221e <I2C_TreatErrorCallback+0x1e>
	...

0800222c <I2C_ITError>:
{
 800222c:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800222e:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002230:	0005      	movs	r5, r0
{
 8002232:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002234:	2000      	movs	r0, #0
 8002236:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002238:	3541      	adds	r5, #65	; 0x41
 800223a:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800223c:	7010      	strb	r0, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800223e:	4a32      	ldr	r2, [pc, #200]	; (8002308 <I2C_ITError+0xdc>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002240:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002242:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002244:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002246:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002248:	430a      	orrs	r2, r1
 800224a:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800224c:	2b02      	cmp	r3, #2
 800224e:	d82b      	bhi.n	80022a8 <I2C_ITError+0x7c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002250:	2103      	movs	r1, #3
 8002252:	0020      	movs	r0, r4
 8002254:	f7ff fe86 	bl	8001f64 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002258:	2328      	movs	r3, #40	; 0x28
 800225a:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <I2C_ITError+0xe0>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800225e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 8002260:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8002262:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002264:	2800      	cmp	r0, #0
 8002266:	d02e      	beq.n	80022c6 <I2C_ITError+0x9a>
 8002268:	001a      	movs	r2, r3
 800226a:	2110      	movs	r1, #16
 800226c:	3a11      	subs	r2, #17
 800226e:	438a      	bics	r2, r1
 8002270:	d129      	bne.n	80022c6 <I2C_ITError+0x9a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	0452      	lsls	r2, r2, #17
 8002278:	d503      	bpl.n	8002282 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4924      	ldr	r1, [pc, #144]	; (8002310 <I2C_ITError+0xe4>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002282:	f7ff fd9a 	bl	8001dba <HAL_DMA_GetState>
 8002286:	2801      	cmp	r0, #1
 8002288:	d019      	beq.n	80022be <I2C_ITError+0x92>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800228a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <I2C_ITError+0xe8>)
      __HAL_UNLOCK(hi2c);
 800228e:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002290:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002292:	0023      	movs	r3, r4
 8002294:	3340      	adds	r3, #64	; 0x40
 8002296:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002298:	f7ff fd6a 	bl	8001d70 <HAL_DMA_Abort_IT>
 800229c:	2800      	cmp	r0, #0
 800229e:	d011      	beq.n	80022c4 <I2C_ITError+0x98>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80022a4:	4798      	blx	r3
}
 80022a6:	e00d      	b.n	80022c4 <I2C_ITError+0x98>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022a8:	0020      	movs	r0, r4
 80022aa:	491b      	ldr	r1, [pc, #108]	; (8002318 <I2C_ITError+0xec>)
 80022ac:	f7ff fe5a 	bl	8001f64 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80022b0:	782b      	ldrb	r3, [r5, #0]
 80022b2:	2b60      	cmp	r3, #96	; 0x60
 80022b4:	d001      	beq.n	80022ba <I2C_ITError+0x8e>
      hi2c->State         = HAL_I2C_STATE_READY;
 80022b6:	2320      	movs	r3, #32
 80022b8:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = NULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e7cf      	b.n	800225e <I2C_ITError+0x32>
      I2C_TreatErrorCallback(hi2c);
 80022be:	0020      	movs	r0, r4
 80022c0:	f7ff ff9e 	bl	8002200 <I2C_TreatErrorCallback>
}
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80022c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d0f8      	beq.n	80022be <I2C_ITError+0x92>
 80022cc:	2210      	movs	r2, #16
 80022ce:	3b12      	subs	r3, #18
 80022d0:	4393      	bics	r3, r2
 80022d2:	d1f4      	bne.n	80022be <I2C_ITError+0x92>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	0412      	lsls	r2, r2, #16
 80022da:	d503      	bpl.n	80022e4 <I2C_ITError+0xb8>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	490f      	ldr	r1, [pc, #60]	; (800231c <I2C_ITError+0xf0>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022e4:	f7ff fd69 	bl	8001dba <HAL_DMA_GetState>
 80022e8:	2801      	cmp	r0, #1
 80022ea:	d0e8      	beq.n	80022be <I2C_ITError+0x92>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <I2C_ITError+0xe8>)
      __HAL_UNLOCK(hi2c);
 80022f0:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022f2:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80022f4:	0023      	movs	r3, r4
 80022f6:	3340      	adds	r3, #64	; 0x40
 80022f8:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022fa:	f7ff fd39 	bl	8001d70 <HAL_DMA_Abort_IT>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d0e0      	beq.n	80022c4 <I2C_ITError+0x98>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002302:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002304:	e7cd      	b.n	80022a2 <I2C_ITError+0x76>
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	ffff0000 	.word	0xffff0000
 800230c:	08002459 	.word	0x08002459
 8002310:	ffffbfff 	.word	0xffffbfff
 8002314:	080025eb 	.word	0x080025eb
 8002318:	00008003 	.word	0x00008003
 800231c:	ffff7fff 	.word	0xffff7fff

08002320 <I2C_ITSlaveCplt>:
{
 8002320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002322:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002324:	0006      	movs	r6, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002326:	681a      	ldr	r2, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002328:	3641      	adds	r6, #65	; 0x41
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800232a:	9201      	str	r2, [sp, #4]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232c:	2220      	movs	r2, #32
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800232e:	7835      	ldrb	r5, [r6, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002330:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002332:	2308      	movs	r3, #8
{
 8002334:	0004      	movs	r4, r0
 8002336:	000f      	movs	r7, r1
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002338:	439d      	bics	r5, r3
 800233a:	2d21      	cmp	r5, #33	; 0x21
 800233c:	d150      	bne.n	80023e0 <I2C_ITSlaveCplt+0xc0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800233e:	4940      	ldr	r1, [pc, #256]	; (8002440 <I2C_ITSlaveCplt+0x120>)
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002340:	0020      	movs	r0, r4
 8002342:	f7ff fe0f 	bl	8001f64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002346:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	0212      	lsls	r2, r2, #8
 800234e:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002350:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	493a      	ldr	r1, [pc, #232]	; (8002444 <I2C_ITSlaveCplt+0x124>)
 800235a:	400a      	ands	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800235e:	f7ff fdf3 	bl	8001f48 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002362:	9b01      	ldr	r3, [sp, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	045b      	lsls	r3, r3, #17
 8002368:	d53e      	bpl.n	80023e8 <I2C_ITSlaveCplt+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	4936      	ldr	r1, [pc, #216]	; (8002448 <I2C_ITSlaveCplt+0x128>)
 800236e:	6813      	ldr	r3, [r2, #0]
 8002370:	400b      	ands	r3, r1
 8002372:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8002374:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	b29b      	uxth	r3, r3
 8002380:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002382:	077b      	lsls	r3, r7, #29
 8002384:	d511      	bpl.n	80023aa <I2C_ITSlaveCplt+0x8a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002386:	2304      	movs	r3, #4
 8002388:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002394:	3301      	adds	r3, #1
 8002396:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002398:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <I2C_ITSlaveCplt+0x8a>
      hi2c->XferSize--;
 800239e:	3b01      	subs	r3, #1
 80023a0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80023a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80023aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <I2C_ITSlaveCplt+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023b0:	2304      	movs	r3, #4
 80023b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80023b4:	4313      	orrs	r3, r2
 80023b6:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	0023      	movs	r3, r4
 80023ba:	2200      	movs	r2, #0
 80023bc:	3342      	adds	r3, #66	; 0x42
 80023be:	701a      	strb	r2, [r3, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023c0:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80023c2:	6362      	str	r2, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023c4:	4295      	cmp	r5, r2
 80023c6:	d01a      	beq.n	80023fe <I2C_ITSlaveCplt+0xde>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80023c8:	0020      	movs	r0, r4
 80023ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80023cc:	f7ff ff2e 	bl	800222c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80023d0:	7833      	ldrb	r3, [r6, #0]
 80023d2:	2b28      	cmp	r3, #40	; 0x28
 80023d4:	d103      	bne.n	80023de <I2C_ITSlaveCplt+0xbe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80023d6:	0039      	movs	r1, r7
 80023d8:	0020      	movs	r0, r4
 80023da:	f7ff fed9 	bl	8002190 <I2C_ITListenCplt>
}
 80023de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023e0:	2d22      	cmp	r5, #34	; 0x22
 80023e2:	d1b1      	bne.n	8002348 <I2C_ITSlaveCplt+0x28>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023e4:	4919      	ldr	r1, [pc, #100]	; (800244c <I2C_ITSlaveCplt+0x12c>)
 80023e6:	e7ab      	b.n	8002340 <I2C_ITSlaveCplt+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80023e8:	9b01      	ldr	r3, [sp, #4]
 80023ea:	0bdb      	lsrs	r3, r3, #15
 80023ec:	4213      	tst	r3, r2
 80023ee:	d0c8      	beq.n	8002382 <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80023f0:	6822      	ldr	r2, [r4, #0]
 80023f2:	4917      	ldr	r1, [pc, #92]	; (8002450 <I2C_ITSlaveCplt+0x130>)
 80023f4:	6813      	ldr	r3, [r2, #0]
 80023f6:	400b      	ands	r3, r1
 80023f8:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 80023fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023fc:	e7bb      	b.n	8002376 <I2C_ITSlaveCplt+0x56>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80023fe:	0027      	movs	r7, r4
 8002400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002402:	4a14      	ldr	r2, [pc, #80]	; (8002454 <I2C_ITSlaveCplt+0x134>)
 8002404:	3740      	adds	r7, #64	; 0x40
 8002406:	4293      	cmp	r3, r2
 8002408:	d00c      	beq.n	8002424 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 800240a:	0020      	movs	r0, r4
 800240c:	f7ff fe30 	bl	8002070 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <I2C_ITSlaveCplt+0x134>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8002414:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002416:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002418:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800241a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800241c:	703d      	strb	r5, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 800241e:	f7ff feb6 	bl	800218e <HAL_I2C_ListenCpltCallback>
 8002422:	e7dc      	b.n	80023de <I2C_ITSlaveCplt+0xbe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002424:	2320      	movs	r3, #32
 8002426:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002428:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800242a:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800242c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800242e:	703d      	strb	r5, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002430:	2a22      	cmp	r2, #34	; 0x22
 8002432:	d102      	bne.n	800243a <I2C_ITSlaveCplt+0x11a>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002434:	f7ff fe1a 	bl	800206c <HAL_I2C_SlaveRxCpltCallback>
 8002438:	e7d1      	b.n	80023de <I2C_ITSlaveCplt+0xbe>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800243a:	f7ff fe16 	bl	800206a <HAL_I2C_SlaveTxCpltCallback>
}
 800243e:	e7ce      	b.n	80023de <I2C_ITSlaveCplt+0xbe>
 8002440:	00008001 	.word	0x00008001
 8002444:	fe00e800 	.word	0xfe00e800
 8002448:	ffffbfff 	.word	0xffffbfff
 800244c:	00008002 	.word	0x00008002
 8002450:	ffff7fff 	.word	0xffff7fff
 8002454:	ffff0000 	.word	0xffff0000

08002458 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8002458:	0003      	movs	r3, r0
{
 800245a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800245c:	3340      	adds	r3, #64	; 0x40
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	781b      	ldrb	r3, [r3, #0]
{
 8002462:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8002464:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 8002466:	000e      	movs	r6, r1
 8002468:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 800246a:	2002      	movs	r0, #2
 800246c:	2b01      	cmp	r3, #1
 800246e:	d024      	beq.n	80024ba <I2C_Slave_ISR_IT+0x62>
 8002470:	2301      	movs	r3, #1
 8002472:	9a01      	ldr	r2, [sp, #4]
 8002474:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002476:	094a      	lsrs	r2, r1, #5
 8002478:	421a      	tst	r2, r3
 800247a:	d005      	beq.n	8002488 <I2C_Slave_ISR_IT+0x30>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800247c:	096a      	lsrs	r2, r5, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800247e:	421a      	tst	r2, r3
 8002480:	d002      	beq.n	8002488 <I2C_Slave_ISR_IT+0x30>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002482:	0020      	movs	r0, r4
 8002484:	f7ff ff4c 	bl	8002320 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002488:	2301      	movs	r3, #1
 800248a:	06f2      	lsls	r2, r6, #27
 800248c:	d535      	bpl.n	80024fa <I2C_Slave_ISR_IT+0xa2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800248e:	092a      	lsrs	r2, r5, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002490:	421a      	tst	r2, r3
 8002492:	d032      	beq.n	80024fa <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 8002494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002496:	2b00      	cmp	r3, #0
 8002498:	d120      	bne.n	80024dc <I2C_Slave_ISR_IT+0x84>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800249a:	0023      	movs	r3, r4
 800249c:	3341      	adds	r3, #65	; 0x41
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	2a28      	cmp	r2, #40	; 0x28
 80024a2:	d10b      	bne.n	80024bc <I2C_Slave_ISR_IT+0x64>
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	0492      	lsls	r2, r2, #18
 80024a8:	4297      	cmp	r7, r2
 80024aa:	d107      	bne.n	80024bc <I2C_Slave_ISR_IT+0x64>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024ac:	0031      	movs	r1, r6
 80024ae:	0020      	movs	r0, r4
 80024b0:	f7ff fe6e 	bl	8002190 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 80024b4:	2000      	movs	r0, #0
 80024b6:	9b01      	ldr	r3, [sp, #4]
 80024b8:	7018      	strb	r0, [r3, #0]
}
 80024ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024bc:	2210      	movs	r2, #16
 80024be:	7819      	ldrb	r1, [r3, #0]
 80024c0:	6823      	ldr	r3, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c2:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024c4:	2929      	cmp	r1, #41	; 0x29
 80024c6:	d1f5      	bne.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
 80024c8:	492d      	ldr	r1, [pc, #180]	; (8002580 <I2C_Slave_ISR_IT+0x128>)
 80024ca:	428f      	cmp	r7, r1
 80024cc:	d0f2      	beq.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
        I2C_Flush_TXDR(hi2c);
 80024ce:	0020      	movs	r0, r4
 80024d0:	f7ff fd3a 	bl	8001f48 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 80024d4:	0020      	movs	r0, r4
 80024d6:	f7ff fdcb 	bl	8002070 <I2C_ITSlaveSeqCplt>
 80024da:	e7eb      	b.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024dc:	2210      	movs	r2, #16
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024e2:	2304      	movs	r3, #4
 80024e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80024e6:	4313      	orrs	r3, r2
 80024e8:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <I2C_Slave_ISR_IT+0x12c>)
 80024ec:	421f      	tst	r7, r3
 80024ee:	d1e1      	bne.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80024f0:	0020      	movs	r0, r4
 80024f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80024f4:	f7ff fe9a 	bl	800222c <I2C_ITError>
 80024f8:	e7dc      	b.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024fa:	2301      	movs	r3, #1
 80024fc:	0772      	lsls	r2, r6, #29
 80024fe:	d51a      	bpl.n	8002536 <I2C_Slave_ISR_IT+0xde>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002500:	08aa      	lsrs	r2, r5, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002502:	421a      	tst	r2, r3
 8002504:	d017      	beq.n	8002536 <I2C_Slave_ISR_IT+0xde>
    if (hi2c->XferCount > 0U)
 8002506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <I2C_Slave_ISR_IT+0xd0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002516:	3301      	adds	r3, #1
 8002518:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800251a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800251c:	3b01      	subs	r3, #1
 800251e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002520:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002522:	3b01      	subs	r3, #1
 8002524:	b29b      	uxth	r3, r3
 8002526:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002528:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1c2      	bne.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <I2C_Slave_ISR_IT+0x128>)
 8002530:	429f      	cmp	r7, r3
 8002532:	d0bf      	beq.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
 8002534:	e7ce      	b.n	80024d4 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002536:	2301      	movs	r3, #1
 8002538:	0732      	lsls	r2, r6, #28
 800253a:	d506      	bpl.n	800254a <I2C_Slave_ISR_IT+0xf2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800253c:	08ea      	lsrs	r2, r5, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800253e:	421a      	tst	r2, r3
 8002540:	d003      	beq.n	800254a <I2C_Slave_ISR_IT+0xf2>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002542:	0020      	movs	r0, r4
 8002544:	f7ff fdd6 	bl	80020f4 <I2C_ITAddrCplt.isra.0>
 8002548:	e7b4      	b.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800254a:	2301      	movs	r3, #1
 800254c:	07b2      	lsls	r2, r6, #30
 800254e:	d5b1      	bpl.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002550:	40dd      	lsrs	r5, r3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002552:	421d      	tst	r5, r3
 8002554:	d0ae      	beq.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount > 0U)
 8002556:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <I2C_Slave_ISR_IT+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800255c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800255e:	6822      	ldr	r2, [r4, #0]
 8002560:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002562:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002564:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002566:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002568:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800256a:	3b01      	subs	r3, #1
 800256c:	b29b      	uxth	r3, r3
 800256e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002570:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	8523      	strh	r3, [r4, #40]	; 0x28
 8002576:	e79d      	b.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002578:	4b02      	ldr	r3, [pc, #8]	; (8002584 <I2C_Slave_ISR_IT+0x12c>)
 800257a:	421f      	tst	r7, r3
 800257c:	d0aa      	beq.n	80024d4 <I2C_Slave_ISR_IT+0x7c>
 800257e:	e799      	b.n	80024b4 <I2C_Slave_ISR_IT+0x5c>
 8002580:	ffff0000 	.word	0xffff0000
 8002584:	feffffff 	.word	0xfeffffff

08002588 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002588:	6803      	ldr	r3, [r0, #0]
{
 800258a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800258c:	699c      	ldr	r4, [r3, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800258e:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002590:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002592:	05e5      	lsls	r5, r4, #23
 8002594:	d508      	bpl.n	80025a8 <HAL_I2C_ER_IRQHandler+0x20>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002596:	09d5      	lsrs	r5, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002598:	420d      	tst	r5, r1
 800259a:	d005      	beq.n	80025a8 <HAL_I2C_ER_IRQHandler+0x20>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800259c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800259e:	4329      	orrs	r1, r5
 80025a0:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0049      	lsls	r1, r1, #1
 80025a6:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025a8:	2101      	movs	r1, #1
 80025aa:	0565      	lsls	r5, r4, #21
 80025ac:	d509      	bpl.n	80025c2 <HAL_I2C_ER_IRQHandler+0x3a>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025ae:	09d5      	lsrs	r5, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025b0:	420d      	tst	r5, r1
 80025b2:	d006      	beq.n	80025c2 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025b4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80025b6:	3107      	adds	r1, #7
 80025b8:	4329      	orrs	r1, r5
 80025ba:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	00c9      	lsls	r1, r1, #3
 80025c0:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025c2:	2101      	movs	r1, #1
 80025c4:	05a4      	lsls	r4, r4, #22
 80025c6:	d509      	bpl.n	80025dc <HAL_I2C_ER_IRQHandler+0x54>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025c8:	09d2      	lsrs	r2, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025ca:	420a      	tst	r2, r1
 80025cc:	d006      	beq.n	80025dc <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80025ce:	2202      	movs	r2, #2
 80025d0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80025d2:	430a      	orrs	r2, r1
 80025d4:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	61da      	str	r2, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025dc:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 80025de:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025e0:	4219      	tst	r1, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_ER_IRQHandler+0x60>
    I2C_ITError(hi2c, tmperror);
 80025e4:	f7ff fe22 	bl	800222c <I2C_ITError>
}
 80025e8:	bd70      	pop	{r4, r5, r6, pc}

080025ea <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80025ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80025ec:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 80025ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80025f4:	2200      	movs	r2, #0
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 80025f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80025fe:	2200      	movs	r2, #0
 8002600:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8002602:	f7ff fdfd 	bl	8002200 <I2C_TreatErrorCallback>
}
 8002606:	bd10      	pop	{r4, pc}

08002608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002608:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260a:	0004      	movs	r4, r0
 800260c:	3441      	adds	r4, #65	; 0x41
 800260e:	7822      	ldrb	r2, [r4, #0]
{
 8002610:	0003      	movs	r3, r0
 8002612:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002614:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002616:	b2d6      	uxtb	r6, r2
 8002618:	2a20      	cmp	r2, #32
 800261a:	d118      	bne.n	800264e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800261c:	001d      	movs	r5, r3
 800261e:	3540      	adds	r5, #64	; 0x40
 8002620:	782a      	ldrb	r2, [r5, #0]
 8002622:	2a01      	cmp	r2, #1
 8002624:	d013      	beq.n	800264e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3a23      	subs	r2, #35	; 0x23
 800262e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002630:	4807      	ldr	r0, [pc, #28]	; (8002650 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002632:	4391      	bics	r1, r2
 8002634:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800263a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800263c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	4339      	orrs	r1, r7
 8002642:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800264c:	7028      	strb	r0, [r5, #0]
  }
}
 800264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002650:	ffffefff 	.word	0xffffefff

08002654 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002654:	0002      	movs	r2, r0
{
 8002656:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002658:	3241      	adds	r2, #65	; 0x41
 800265a:	7814      	ldrb	r4, [r2, #0]
{
 800265c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800265e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002660:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	2c20      	cmp	r4, #32
 8002664:	d117      	bne.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002666:	001c      	movs	r4, r3
 8002668:	3440      	adds	r4, #64	; 0x40
 800266a:	7826      	ldrb	r6, [r4, #0]
 800266c:	2e01      	cmp	r6, #1
 800266e:	d012      	beq.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002670:	3022      	adds	r0, #34	; 0x22
 8002672:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3823      	subs	r0, #35	; 0x23
 8002678:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800267a:	4f07      	ldr	r7, [pc, #28]	; (8002698 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800267c:	4386      	bics	r6, r0
 800267e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002680:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8002682:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002684:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002686:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002688:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	4308      	orrs	r0, r1
 800268e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002690:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002692:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002694:	7020      	strb	r0, [r4, #0]
  }
}
 8002696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002698:	fffff0ff 	.word	0xfffff0ff

0800269c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80026a0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80026a2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80026a4:	4022      	ands	r2, r4
 80026a6:	2a08      	cmp	r2, #8
 80026a8:	d031      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x72>
 80026aa:	2a0c      	cmp	r2, #12
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x26>
 80026ae:	2a04      	cmp	r2, #4
 80026b0:	d125      	bne.n	80026fe <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026b2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026b6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80026b8:	17c0      	asrs	r0, r0, #31
 80026ba:	4018      	ands	r0, r3
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_RCC_GetSysClockFreq+0x80>)
 80026be:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026c2:	02a2      	lsls	r2, r4, #10
 80026c4:	4816      	ldr	r0, [pc, #88]	; (8002720 <HAL_RCC_GetSysClockFreq+0x84>)
 80026c6:	0f12      	lsrs	r2, r2, #28
 80026c8:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ca:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026cc:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ce:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026d0:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d2:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026d4:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d6:	4211      	tst	r1, r2
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <HAL_RCC_GetSysClockFreq+0x88>)
 80026dc:	2300      	movs	r3, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	f7fd fdd2 	bl	8000288 <__aeabi_lmul>
 80026e4:	0022      	movs	r2, r4
 80026e6:	2300      	movs	r3, #0
 80026e8:	f7fd fdae 	bl	8000248 <__aeabi_uldivmod>
 80026ec:	e7e8      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2310      	movs	r3, #16
 80026f2:	421a      	tst	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80026f6:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <HAL_RCC_GetSysClockFreq+0x8c>)
 80026f8:	e7f0      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_RCC_GetSysClockFreq+0x80>)
 80026fc:	e7ee      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026fe:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002700:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002702:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002708:	3301      	adds	r3, #1
 800270a:	4098      	lsls	r0, r3
  return sysclockfreq;
 800270c:	e7d8      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <HAL_RCC_GetSysClockFreq+0x88>)
 8002710:	e7d6      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x24>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	40021000 	.word	0x40021000
 8002718:	ff48e500 	.word	0xff48e500
 800271c:	00f42400 	.word	0x00f42400
 8002720:	08004bba 	.word	0x08004bba
 8002724:	007a1200 	.word	0x007a1200
 8002728:	003d0900 	.word	0x003d0900

0800272c <HAL_RCC_OscConfig>:
{
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	0005      	movs	r5, r0
 8002730:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8002732:	2800      	cmp	r0, #0
 8002734:	d059      	beq.n	80027ea <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002736:	230c      	movs	r3, #12
 8002738:	4cbf      	ldr	r4, [pc, #764]	; (8002a38 <HAL_RCC_OscConfig+0x30c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800273e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002740:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	025b      	lsls	r3, r3, #9
 8002746:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002748:	07d2      	lsls	r2, r2, #31
 800274a:	d442      	bmi.n	80027d2 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	079b      	lsls	r3, r3, #30
 8002750:	d500      	bpl.n	8002754 <HAL_RCC_OscConfig+0x28>
 8002752:	e08b      	b.n	800286c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	06db      	lsls	r3, r3, #27
 8002758:	d529      	bpl.n	80027ae <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800275a:	2e00      	cmp	r6, #0
 800275c:	d000      	beq.n	8002760 <HAL_RCC_OscConfig+0x34>
 800275e:	e0dc      	b.n	800291a <HAL_RCC_OscConfig+0x1ee>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	059b      	lsls	r3, r3, #22
 8002764:	d502      	bpl.n	800276c <HAL_RCC_OscConfig+0x40>
 8002766:	69eb      	ldr	r3, [r5, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03e      	beq.n	80027ea <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276c:	6862      	ldr	r2, [r4, #4]
 800276e:	49b3      	ldr	r1, [pc, #716]	; (8002a3c <HAL_RCC_OscConfig+0x310>)
 8002770:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002772:	400a      	ands	r2, r1
 8002774:	431a      	orrs	r2, r3
 8002776:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002778:	6861      	ldr	r1, [r4, #4]
 800277a:	6a2a      	ldr	r2, [r5, #32]
 800277c:	0209      	lsls	r1, r1, #8
 800277e:	0a09      	lsrs	r1, r1, #8
 8002780:	0612      	lsls	r2, r2, #24
 8002782:	430a      	orrs	r2, r1
 8002784:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	0b5b      	lsrs	r3, r3, #13
 800278a:	3301      	adds	r3, #1
 800278c:	0212      	lsls	r2, r2, #8
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002792:	68e1      	ldr	r1, [r4, #12]
 8002794:	060a      	lsls	r2, r1, #24
 8002796:	49aa      	ldr	r1, [pc, #680]	; (8002a40 <HAL_RCC_OscConfig+0x314>)
 8002798:	0f12      	lsrs	r2, r2, #28
 800279a:	5c8a      	ldrb	r2, [r1, r2]
 800279c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800279e:	4aa9      	ldr	r2, [pc, #676]	; (8002a44 <HAL_RCC_OscConfig+0x318>)
 80027a0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80027a2:	4ba9      	ldr	r3, [pc, #676]	; (8002a48 <HAL_RCC_OscConfig+0x31c>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	f7fe fed9 	bl	800155c <HAL_InitTick>
        if(status != HAL_OK)
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d134      	bne.n	8002818 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	682b      	ldr	r3, [r5, #0]
 80027b0:	071b      	lsls	r3, r3, #28
 80027b2:	d500      	bpl.n	80027b6 <HAL_RCC_OscConfig+0x8a>
 80027b4:	e0e8      	b.n	8002988 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b6:	682b      	ldr	r3, [r5, #0]
 80027b8:	075b      	lsls	r3, r3, #29
 80027ba:	d500      	bpl.n	80027be <HAL_RCC_OscConfig+0x92>
 80027bc:	e10a      	b.n	80029d4 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	069b      	lsls	r3, r3, #26
 80027c2:	d500      	bpl.n	80027c6 <HAL_RCC_OscConfig+0x9a>
 80027c4:	e191      	b.n	8002aea <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d000      	beq.n	80027ce <HAL_RCC_OscConfig+0xa2>
 80027cc:	e1c0      	b.n	8002b50 <HAL_RCC_OscConfig+0x424>
  return HAL_OK;
 80027ce:	2000      	movs	r0, #0
 80027d0:	e022      	b.n	8002818 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d2:	2e08      	cmp	r6, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027d6:	2e0c      	cmp	r6, #12
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_OscConfig+0xc2>
 80027da:	2f00      	cmp	r7, #0
 80027dc:	d007      	beq.n	80027ee <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	039b      	lsls	r3, r3, #14
 80027e2:	d5b3      	bpl.n	800274c <HAL_RCC_OscConfig+0x20>
 80027e4:	686b      	ldr	r3, [r5, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1b0      	bne.n	800274c <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 80027ea:	2001      	movs	r0, #1
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ee:	686a      	ldr	r2, [r5, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d113      	bne.n	800281c <HAL_RCC_OscConfig+0xf0>
 80027f4:	6822      	ldr	r2, [r4, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027fa:	f7fe fef3 	bl	80015e4 <HAL_GetTick>
 80027fe:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	0292      	lsls	r2, r2, #10
 8002806:	4213      	tst	r3, r2
 8002808:	d1a0      	bne.n	800274c <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280a:	f7fe feeb 	bl	80015e4 <HAL_GetTick>
 800280e:	9b01      	ldr	r3, [sp, #4]
 8002810:	1ac0      	subs	r0, r0, r3
 8002812:	2864      	cmp	r0, #100	; 0x64
 8002814:	d9f4      	bls.n	8002800 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8002816:	2003      	movs	r0, #3
}
 8002818:	b007      	add	sp, #28
 800281a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281c:	21a0      	movs	r1, #160	; 0xa0
 800281e:	02c9      	lsls	r1, r1, #11
 8002820:	428a      	cmp	r2, r1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x104>
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	6821      	ldr	r1, [r4, #0]
 8002828:	02d2      	lsls	r2, r2, #11
 800282a:	430a      	orrs	r2, r1
 800282c:	6022      	str	r2, [r4, #0]
 800282e:	e7e1      	b.n	80027f4 <HAL_RCC_OscConfig+0xc8>
 8002830:	6821      	ldr	r1, [r4, #0]
 8002832:	4886      	ldr	r0, [pc, #536]	; (8002a4c <HAL_RCC_OscConfig+0x320>)
 8002834:	4001      	ands	r1, r0
 8002836:	6021      	str	r1, [r4, #0]
 8002838:	6821      	ldr	r1, [r4, #0]
 800283a:	400b      	ands	r3, r1
 800283c:	9305      	str	r3, [sp, #20]
 800283e:	9b05      	ldr	r3, [sp, #20]
 8002840:	4983      	ldr	r1, [pc, #524]	; (8002a50 <HAL_RCC_OscConfig+0x324>)
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	400b      	ands	r3, r1
 8002846:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002848:	2a00      	cmp	r2, #0
 800284a:	d1d6      	bne.n	80027fa <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 800284c:	f7fe feca 	bl	80015e4 <HAL_GetTick>
 8002850:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	0292      	lsls	r2, r2, #10
 8002858:	4213      	tst	r3, r2
 800285a:	d100      	bne.n	800285e <HAL_RCC_OscConfig+0x132>
 800285c:	e776      	b.n	800274c <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285e:	f7fe fec1 	bl	80015e4 <HAL_GetTick>
 8002862:	9b01      	ldr	r3, [sp, #4]
 8002864:	1ac0      	subs	r0, r0, r3
 8002866:	2864      	cmp	r0, #100	; 0x64
 8002868:	d9f3      	bls.n	8002852 <HAL_RCC_OscConfig+0x126>
 800286a:	e7d4      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
    hsi_state = RCC_OscInitStruct->HSIState;
 800286c:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800286e:	2e04      	cmp	r6, #4
 8002870:	d003      	beq.n	800287a <HAL_RCC_OscConfig+0x14e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002872:	2e0c      	cmp	r6, #12
 8002874:	d124      	bne.n	80028c0 <HAL_RCC_OscConfig+0x194>
 8002876:	2f00      	cmp	r7, #0
 8002878:	d122      	bne.n	80028c0 <HAL_RCC_OscConfig+0x194>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	075b      	lsls	r3, r3, #29
 800287e:	d501      	bpl.n	8002884 <HAL_RCC_OscConfig+0x158>
 8002880:	2a00      	cmp	r2, #0
 8002882:	d0b2      	beq.n	80027ea <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	6861      	ldr	r1, [r4, #4]
 8002886:	692b      	ldr	r3, [r5, #16]
 8002888:	4872      	ldr	r0, [pc, #456]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	4001      	ands	r1, r0
 800288e:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002890:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	438b      	bics	r3, r1
 8002898:	4313      	orrs	r3, r2
 800289a:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289c:	f7ff fefe 	bl	800269c <HAL_RCC_GetSysClockFreq>
 80028a0:	68e3      	ldr	r3, [r4, #12]
 80028a2:	4a67      	ldr	r2, [pc, #412]	; (8002a40 <HAL_RCC_OscConfig+0x314>)
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	0f1b      	lsrs	r3, r3, #28
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	40d8      	lsrs	r0, r3
 80028ac:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCC_OscConfig+0x318>)
 80028ae:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80028b0:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x31c>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	f7fe fe52 	bl	800155c <HAL_InitTick>
      if(status != HAL_OK)
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d100      	bne.n	80028be <HAL_RCC_OscConfig+0x192>
 80028bc:	e74a      	b.n	8002754 <HAL_RCC_OscConfig+0x28>
 80028be:	e7ab      	b.n	8002818 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028c0:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80028c2:	2a00      	cmp	r2, #0
 80028c4:	d018      	beq.n	80028f8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028c6:	2109      	movs	r1, #9
 80028c8:	438b      	bics	r3, r1
 80028ca:	4313      	orrs	r3, r2
 80028cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028ce:	f7fe fe89 	bl	80015e4 <HAL_GetTick>
 80028d2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d4:	2204      	movs	r2, #4
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	4213      	tst	r3, r2
 80028da:	d007      	beq.n	80028ec <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	6862      	ldr	r2, [r4, #4]
 80028de:	692b      	ldr	r3, [r5, #16]
 80028e0:	495c      	ldr	r1, [pc, #368]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	400a      	ands	r2, r1
 80028e6:	4313      	orrs	r3, r2
 80028e8:	6063      	str	r3, [r4, #4]
 80028ea:	e733      	b.n	8002754 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fe fe7a 	bl	80015e4 <HAL_GetTick>
 80028f0:	1bc0      	subs	r0, r0, r7
 80028f2:	2802      	cmp	r0, #2
 80028f4:	d9ee      	bls.n	80028d4 <HAL_RCC_OscConfig+0x1a8>
 80028f6:	e78e      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 80028f8:	2201      	movs	r2, #1
 80028fa:	4393      	bics	r3, r2
 80028fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028fe:	f7fe fe71 	bl	80015e4 <HAL_GetTick>
 8002902:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002904:	2204      	movs	r2, #4
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	4213      	tst	r3, r2
 800290a:	d100      	bne.n	800290e <HAL_RCC_OscConfig+0x1e2>
 800290c:	e722      	b.n	8002754 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290e:	f7fe fe69 	bl	80015e4 <HAL_GetTick>
 8002912:	1bc0      	subs	r0, r0, r7
 8002914:	2802      	cmp	r0, #2
 8002916:	d9f5      	bls.n	8002904 <HAL_RCC_OscConfig+0x1d8>
 8002918:	e77d      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800291a:	69eb      	ldr	r3, [r5, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_ENABLE();
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	6822      	ldr	r2, [r4, #0]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4313      	orrs	r3, r2
 8002928:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800292a:	f7fe fe5b 	bl	80015e4 <HAL_GetTick>
 800292e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	4213      	tst	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293a:	6863      	ldr	r3, [r4, #4]
 800293c:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <HAL_RCC_OscConfig+0x310>)
 800293e:	4013      	ands	r3, r2
 8002940:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002942:	4313      	orrs	r3, r2
 8002944:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002946:	6862      	ldr	r2, [r4, #4]
 8002948:	6a2b      	ldr	r3, [r5, #32]
 800294a:	0212      	lsls	r2, r2, #8
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	0a12      	lsrs	r2, r2, #8
 8002950:	4313      	orrs	r3, r2
 8002952:	6063      	str	r3, [r4, #4]
 8002954:	e72b      	b.n	80027ae <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002956:	f7fe fe45 	bl	80015e4 <HAL_GetTick>
 800295a:	1bc0      	subs	r0, r0, r7
 800295c:	2802      	cmp	r0, #2
 800295e:	d9e7      	bls.n	8002930 <HAL_RCC_OscConfig+0x204>
 8002960:	e759      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	4a3c      	ldr	r2, [pc, #240]	; (8002a58 <HAL_RCC_OscConfig+0x32c>)
 8002966:	4013      	ands	r3, r2
 8002968:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800296a:	f7fe fe3b 	bl	80015e4 <HAL_GetTick>
 800296e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	0092      	lsls	r2, r2, #2
 8002976:	4213      	tst	r3, r2
 8002978:	d100      	bne.n	800297c <HAL_RCC_OscConfig+0x250>
 800297a:	e718      	b.n	80027ae <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800297c:	f7fe fe32 	bl	80015e4 <HAL_GetTick>
 8002980:	1bc0      	subs	r0, r0, r7
 8002982:	2802      	cmp	r0, #2
 8002984:	d9f4      	bls.n	8002970 <HAL_RCC_OscConfig+0x244>
 8002986:	e746      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002988:	696a      	ldr	r2, [r5, #20]
 800298a:	2301      	movs	r3, #1
 800298c:	2a00      	cmp	r2, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8002990:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002992:	4313      	orrs	r3, r2
 8002994:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002996:	f7fe fe25 	bl	80015e4 <HAL_GetTick>
 800299a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800299c:	2202      	movs	r2, #2
 800299e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029a0:	4213      	tst	r3, r2
 80029a2:	d000      	beq.n	80029a6 <HAL_RCC_OscConfig+0x27a>
 80029a4:	e707      	b.n	80027b6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fe fe1d 	bl	80015e4 <HAL_GetTick>
 80029aa:	1bc0      	subs	r0, r0, r7
 80029ac:	2802      	cmp	r0, #2
 80029ae:	d9f5      	bls.n	800299c <HAL_RCC_OscConfig+0x270>
 80029b0:	e731      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80029b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80029b4:	439a      	bics	r2, r3
 80029b6:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80029b8:	f7fe fe14 	bl	80015e4 <HAL_GetTick>
 80029bc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029be:	2202      	movs	r2, #2
 80029c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029c2:	4213      	tst	r3, r2
 80029c4:	d100      	bne.n	80029c8 <HAL_RCC_OscConfig+0x29c>
 80029c6:	e6f6      	b.n	80027b6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe fe0c 	bl	80015e4 <HAL_GetTick>
 80029cc:	1bc0      	subs	r0, r0, r7
 80029ce:	2802      	cmp	r0, #2
 80029d0:	d9f5      	bls.n	80029be <HAL_RCC_OscConfig+0x292>
 80029d2:	e720      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d4:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029da:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80029dc:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	421a      	tst	r2, r3
 80029e0:	d104      	bne.n	80029ec <HAL_RCC_OscConfig+0x2c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029e4:	4313      	orrs	r3, r2
 80029e6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	4f1b      	ldr	r7, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80029f0:	0052      	lsls	r2, r2, #1
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	4213      	tst	r3, r2
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_OscConfig+0x2de>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	68ab      	ldr	r3, [r5, #8]
 80029fc:	0052      	lsls	r2, r2, #1
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12e      	bne.n	8002a60 <HAL_RCC_OscConfig+0x334>
 8002a02:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002a04:	4313      	orrs	r3, r2
 8002a06:	6523      	str	r3, [r4, #80]	; 0x50
 8002a08:	e04f      	b.n	8002aaa <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	0052      	lsls	r2, r2, #1
 8002a10:	4313      	orrs	r3, r2
 8002a12:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002a14:	f7fe fde6 	bl	80015e4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8002a1c:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	9303      	str	r3, [sp, #12]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9a03      	ldr	r2, [sp, #12]
 8002a24:	4213      	tst	r3, r2
 8002a26:	d1e7      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe fddc 	bl	80015e4 <HAL_GetTick>
 8002a2c:	9b02      	ldr	r3, [sp, #8]
 8002a2e:	1ac0      	subs	r0, r0, r3
 8002a30:	2864      	cmp	r0, #100	; 0x64
 8002a32:	d9f5      	bls.n	8002a20 <HAL_RCC_OscConfig+0x2f4>
 8002a34:	e6ef      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	ffff1fff 	.word	0xffff1fff
 8002a40:	08004ba2 	.word	0x08004ba2
 8002a44:	20000010 	.word	0x20000010
 8002a48:	20000018 	.word	0x20000018
 8002a4c:	fffeffff 	.word	0xfffeffff
 8002a50:	fffbffff 	.word	0xfffbffff
 8002a54:	ffffe0ff 	.word	0xffffe0ff
 8002a58:	fffffeff 	.word	0xfffffeff
 8002a5c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d116      	bne.n	8002a92 <HAL_RCC_OscConfig+0x366>
 8002a64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a66:	4a6b      	ldr	r2, [pc, #428]	; (8002c14 <HAL_RCC_OscConfig+0x4e8>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	6523      	str	r3, [r4, #80]	; 0x50
 8002a6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a6e:	4a6a      	ldr	r2, [pc, #424]	; (8002c18 <HAL_RCC_OscConfig+0x4ec>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002a74:	f7fe fdb6 	bl	80015e4 <HAL_GetTick>
 8002a78:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	4213      	tst	r3, r2
 8002a82:	d01a      	beq.n	8002aba <HAL_RCC_OscConfig+0x38e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe fdae 	bl	80015e4 <HAL_GetTick>
 8002a88:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <HAL_RCC_OscConfig+0x4f0>)
 8002a8a:	1bc0      	subs	r0, r0, r7
 8002a8c:	4298      	cmp	r0, r3
 8002a8e:	d9f4      	bls.n	8002a7a <HAL_RCC_OscConfig+0x34e>
 8002a90:	e6c1      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a92:	21a0      	movs	r1, #160	; 0xa0
 8002a94:	00c9      	lsls	r1, r1, #3
 8002a96:	428b      	cmp	r3, r1
 8002a98:	d118      	bne.n	8002acc <HAL_RCC_OscConfig+0x3a0>
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6523      	str	r3, [r4, #80]	; 0x50
 8002aa4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fd9b 	bl	80015e4 <HAL_GetTick>
 8002aae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	4213      	tst	r3, r2
 8002ab8:	d010      	beq.n	8002adc <HAL_RCC_OscConfig+0x3b0>
    if(pwrclkchanged == SET)
 8002aba:	9b01      	ldr	r3, [sp, #4]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d000      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x396>
 8002ac0:	e67d      	b.n	80027be <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ac4:	4a56      	ldr	r2, [pc, #344]	; (8002c20 <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	63a3      	str	r3, [r4, #56]	; 0x38
 8002aca:	e678      	b.n	80027be <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ace:	4a51      	ldr	r2, [pc, #324]	; (8002c14 <HAL_RCC_OscConfig+0x4e8>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	6523      	str	r3, [r4, #80]	; 0x50
 8002ad4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ad6:	4a50      	ldr	r2, [pc, #320]	; (8002c18 <HAL_RCC_OscConfig+0x4ec>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	e794      	b.n	8002a06 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe fd82 	bl	80015e4 <HAL_GetTick>
 8002ae0:	4b4e      	ldr	r3, [pc, #312]	; (8002c1c <HAL_RCC_OscConfig+0x4f0>)
 8002ae2:	1bc0      	subs	r0, r0, r7
 8002ae4:	4298      	cmp	r0, r3
 8002ae6:	d9e3      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x384>
 8002ae8:	e695      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aea:	69a9      	ldr	r1, [r5, #24]
 8002aec:	2301      	movs	r3, #1
 8002aee:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <HAL_RCC_OscConfig+0x4f8>)
 8002af0:	2900      	cmp	r1, #0
 8002af2:	d018      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI48_ENABLE();
 8002af4:	68a1      	ldr	r1, [r4, #8]
 8002af6:	4319      	orrs	r1, r3
 8002af8:	60a1      	str	r1, [r4, #8]
 8002afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6363      	str	r3, [r4, #52]	; 0x34
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	6a11      	ldr	r1, [r2, #32]
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fd6b 	bl	80015e4 <HAL_GetTick>
 8002b0e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b10:	2202      	movs	r2, #2
 8002b12:	68a3      	ldr	r3, [r4, #8]
 8002b14:	4213      	tst	r3, r2
 8002b16:	d000      	beq.n	8002b1a <HAL_RCC_OscConfig+0x3ee>
 8002b18:	e655      	b.n	80027c6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b1a:	f7fe fd63 	bl	80015e4 <HAL_GetTick>
 8002b1e:	1bc0      	subs	r0, r0, r7
 8002b20:	2802      	cmp	r0, #2
 8002b22:	d9f5      	bls.n	8002b10 <HAL_RCC_OscConfig+0x3e4>
 8002b24:	e677      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8002b26:	68a1      	ldr	r1, [r4, #8]
 8002b28:	4399      	bics	r1, r3
 8002b2a:	60a1      	str	r1, [r4, #8]
 8002b2c:	6a13      	ldr	r3, [r2, #32]
 8002b2e:	493e      	ldr	r1, [pc, #248]	; (8002c28 <HAL_RCC_OscConfig+0x4fc>)
 8002b30:	400b      	ands	r3, r1
 8002b32:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8002b34:	f7fe fd56 	bl	80015e4 <HAL_GetTick>
 8002b38:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	68a3      	ldr	r3, [r4, #8]
 8002b3e:	4213      	tst	r3, r2
 8002b40:	d100      	bne.n	8002b44 <HAL_RCC_OscConfig+0x418>
 8002b42:	e640      	b.n	80027c6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b44:	f7fe fd4e 	bl	80015e4 <HAL_GetTick>
 8002b48:	1bc0      	subs	r0, r0, r7
 8002b4a:	2802      	cmp	r0, #2
 8002b4c:	d9f5      	bls.n	8002b3a <HAL_RCC_OscConfig+0x40e>
 8002b4e:	e662      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b50:	2e0c      	cmp	r6, #12
 8002b52:	d043      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4b0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b54:	4a35      	ldr	r2, [pc, #212]	; (8002c2c <HAL_RCC_OscConfig+0x500>)
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d12e      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b5c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4013      	ands	r3, r2
 8002b60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b62:	f7fe fd3f 	bl	80015e4 <HAL_GetTick>
 8002b66:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b68:	04bf      	lsls	r7, r7, #18
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	423b      	tst	r3, r7
 8002b6e:	d11d      	bne.n	8002bac <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b70:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002b72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002b74:	68e2      	ldr	r2, [r4, #12]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	492d      	ldr	r1, [pc, #180]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b7a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b82:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	6822      	ldr	r2, [r4, #0]
 8002b8c:	045b      	lsls	r3, r3, #17
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b92:	f7fe fd27 	bl	80015e4 <HAL_GetTick>
 8002b96:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	4233      	tst	r3, r6
 8002b9c:	d000      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x474>
 8002b9e:	e616      	b.n	80027ce <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fd20 	bl	80015e4 <HAL_GetTick>
 8002ba4:	1b40      	subs	r0, r0, r5
 8002ba6:	2802      	cmp	r0, #2
 8002ba8:	d9f6      	bls.n	8002b98 <HAL_RCC_OscConfig+0x46c>
 8002baa:	e634      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fd1a 	bl	80015e4 <HAL_GetTick>
 8002bb0:	1b80      	subs	r0, r0, r6
 8002bb2:	2802      	cmp	r0, #2
 8002bb4:	d9d9      	bls.n	8002b6a <HAL_RCC_OscConfig+0x43e>
 8002bb6:	e62e      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8002bb8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bba:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fd10 	bl	80015e4 <HAL_GetTick>
 8002bc4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bc6:	04b6      	lsls	r6, r6, #18
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	4233      	tst	r3, r6
 8002bcc:	d100      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x4a4>
 8002bce:	e5fe      	b.n	80027ce <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe fd08 	bl	80015e4 <HAL_GetTick>
 8002bd4:	1b40      	subs	r0, r0, r5
 8002bd6:	2802      	cmp	r0, #2
 8002bd8:	d9f6      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x49c>
 8002bda:	e61c      	b.n	8002816 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8002bdc:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d100      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4b8>
 8002be2:	e619      	b.n	8002818 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be4:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002be6:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002bea:	0252      	lsls	r2, r2, #9
 8002bec:	401a      	ands	r2, r3
 8002bee:	428a      	cmp	r2, r1
 8002bf0:	d000      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4c8>
 8002bf2:	e5fa      	b.n	80027ea <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bf4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bf8:	0392      	lsls	r2, r2, #14
 8002bfa:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfc:	428a      	cmp	r2, r1
 8002bfe:	d000      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4d6>
 8002c00:	e5f3      	b.n	80027ea <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c02:	22c0      	movs	r2, #192	; 0xc0
 8002c04:	0412      	lsls	r2, r2, #16
 8002c06:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c08:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d100      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4e4>
 8002c0e:	e5de      	b.n	80027ce <HAL_RCC_OscConfig+0xa2>
 8002c10:	e5eb      	b.n	80027ea <HAL_RCC_OscConfig+0xbe>
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	fffffeff 	.word	0xfffffeff
 8002c18:	fffffbff 	.word	0xfffffbff
 8002c1c:	00001388 	.word	0x00001388
 8002c20:	efffffff 	.word	0xefffffff
 8002c24:	40010000 	.word	0x40010000
 8002c28:	ffffdfff 	.word	0xffffdfff
 8002c2c:	feffffff 	.word	0xfeffffff
 8002c30:	ff02ffff 	.word	0xff02ffff

08002c34 <HAL_RCC_ClockConfig>:
{
 8002c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c36:	1e04      	subs	r4, r0, #0
 8002c38:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8002c3c:	2001      	movs	r0, #1
}
 8002c3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	2601      	movs	r6, #1
 8002c42:	4d5b      	ldr	r5, [pc, #364]	; (8002db0 <HAL_RCC_ClockConfig+0x17c>)
 8002c44:	9a01      	ldr	r2, [sp, #4]
 8002c46:	682b      	ldr	r3, [r5, #0]
 8002c48:	4033      	ands	r3, r6
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d331      	bcc.n	8002cb2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	0793      	lsls	r3, r2, #30
 8002c52:	d443      	bmi.n	8002cdc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c54:	07d3      	lsls	r3, r2, #31
 8002c56:	d449      	bmi.n	8002cec <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	2601      	movs	r6, #1
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	9a01      	ldr	r2, [sp, #4]
 8002c5e:	4033      	ands	r3, r6
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d909      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	43b3      	bics	r3, r6
 8002c68:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002c6a:	f7fe fcbb 	bl	80015e4 <HAL_GetTick>
 8002c6e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	4233      	tst	r3, r6
 8002c74:	d000      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x44>
 8002c76:	e08c      	b.n	8002d92 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	4d4e      	ldr	r5, [pc, #312]	; (8002db4 <HAL_RCC_ClockConfig+0x180>)
 8002c7c:	0753      	lsls	r3, r2, #29
 8002c7e:	d500      	bpl.n	8002c82 <HAL_RCC_ClockConfig+0x4e>
 8002c80:	e08f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	0713      	lsls	r3, r2, #28
 8002c84:	d506      	bpl.n	8002c94 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c86:	68ea      	ldr	r2, [r5, #12]
 8002c88:	6923      	ldr	r3, [r4, #16]
 8002c8a:	494b      	ldr	r1, [pc, #300]	; (8002db8 <HAL_RCC_ClockConfig+0x184>)
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	400a      	ands	r2, r1
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c94:	f7ff fd02 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8002c98:	68eb      	ldr	r3, [r5, #12]
 8002c9a:	4a48      	ldr	r2, [pc, #288]	; (8002dbc <HAL_RCC_ClockConfig+0x188>)
 8002c9c:	061b      	lsls	r3, r3, #24
 8002c9e:	0f1b      	lsrs	r3, r3, #28
 8002ca0:	5cd3      	ldrb	r3, [r2, r3]
 8002ca2:	40d8      	lsrs	r0, r3
 8002ca4:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_RCC_ClockConfig+0x18c>)
 8002ca6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002ca8:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <HAL_RCC_ClockConfig+0x190>)
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	f7fe fc56 	bl	800155c <HAL_InitTick>
  if(status != HAL_OK)
 8002cb0:	e7c5      	b.n	8002c3e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	682b      	ldr	r3, [r5, #0]
 8002cb4:	9a01      	ldr	r2, [sp, #4]
 8002cb6:	43b3      	bics	r3, r6
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fc92 	bl	80015e4 <HAL_GetTick>
 8002cc0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	9a01      	ldr	r2, [sp, #4]
 8002cc6:	4033      	ands	r3, r6
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d0c0      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fe fc8a 	bl	80015e4 <HAL_GetTick>
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCC_ClockConfig+0x194>)
 8002cd2:	1bc0      	subs	r0, r0, r7
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	d9f4      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002cd8:	2003      	movs	r0, #3
 8002cda:	e7b0      	b.n	8002c3e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	20f0      	movs	r0, #240	; 0xf0
 8002cde:	4935      	ldr	r1, [pc, #212]	; (8002db4 <HAL_RCC_ClockConfig+0x180>)
 8002ce0:	68cb      	ldr	r3, [r1, #12]
 8002ce2:	4383      	bics	r3, r0
 8002ce4:	68a0      	ldr	r0, [r4, #8]
 8002ce6:	4303      	orrs	r3, r0
 8002ce8:	60cb      	str	r3, [r1, #12]
 8002cea:	e7b3      	b.n	8002c54 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cec:	4e31      	ldr	r6, [pc, #196]	; (8002db4 <HAL_RCC_ClockConfig+0x180>)
 8002cee:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf0:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	2a02      	cmp	r2, #2
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf6:	039b      	lsls	r3, r3, #14
 8002cf8:	d5a0      	bpl.n	8002c3c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfa:	2103      	movs	r1, #3
 8002cfc:	68f3      	ldr	r3, [r6, #12]
 8002cfe:	438b      	bics	r3, r1
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002d04:	f7fe fc6e 	bl	80015e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d08:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002d0a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d118      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d10:	220c      	movs	r2, #12
 8002d12:	68f3      	ldr	r3, [r6, #12]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d09e      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7fe fc63 	bl	80015e4 <HAL_GetTick>
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <HAL_RCC_ClockConfig+0x194>)
 8002d20:	1bc0      	subs	r0, r0, r7
 8002d22:	4298      	cmp	r0, r3
 8002d24:	d9f4      	bls.n	8002d10 <HAL_RCC_ClockConfig+0xdc>
 8002d26:	e7d7      	b.n	8002cd8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d28:	2a03      	cmp	r2, #3
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	d4e4      	bmi.n	8002cfa <HAL_RCC_ClockConfig+0xc6>
 8002d30:	e784      	b.n	8002c3c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d32:	2a01      	cmp	r2, #1
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d36:	075b      	lsls	r3, r3, #29
 8002d38:	d4df      	bmi.n	8002cfa <HAL_RCC_ClockConfig+0xc6>
 8002d3a:	e77f      	b.n	8002c3c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d3c:	059b      	lsls	r3, r3, #22
 8002d3e:	d4dc      	bmi.n	8002cfa <HAL_RCC_ClockConfig+0xc6>
 8002d40:	e77c      	b.n	8002c3c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d46:	220c      	movs	r2, #12
 8002d48:	68f3      	ldr	r3, [r6, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d083      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d50:	f7fe fc48 	bl	80015e4 <HAL_GetTick>
 8002d54:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_RCC_ClockConfig+0x194>)
 8002d56:	1bc0      	subs	r0, r0, r7
 8002d58:	4298      	cmp	r0, r3
 8002d5a:	d9f4      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x112>
 8002d5c:	e7bc      	b.n	8002cd8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d011      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d62:	220c      	movs	r2, #12
 8002d64:	68f3      	ldr	r3, [r6, #12]
 8002d66:	4213      	tst	r3, r2
 8002d68:	d100      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x138>
 8002d6a:	e775      	b.n	8002c58 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fe fc3a 	bl	80015e4 <HAL_GetTick>
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCC_ClockConfig+0x194>)
 8002d72:	1bc0      	subs	r0, r0, r7
 8002d74:	4298      	cmp	r0, r3
 8002d76:	d9f4      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x12e>
 8002d78:	e7ae      	b.n	8002cd8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7a:	f7fe fc33 	bl	80015e4 <HAL_GetTick>
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_RCC_ClockConfig+0x194>)
 8002d80:	1bc0      	subs	r0, r0, r7
 8002d82:	4298      	cmp	r0, r3
 8002d84:	d8a8      	bhi.n	8002cd8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d86:	220c      	movs	r2, #12
 8002d88:	68f3      	ldr	r3, [r6, #12]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d1f4      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x146>
 8002d90:	e762      	b.n	8002c58 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d92:	f7fe fc27 	bl	80015e4 <HAL_GetTick>
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_RCC_ClockConfig+0x194>)
 8002d98:	1bc0      	subs	r0, r0, r7
 8002d9a:	4298      	cmp	r0, r3
 8002d9c:	d800      	bhi.n	8002da0 <HAL_RCC_ClockConfig+0x16c>
 8002d9e:	e767      	b.n	8002c70 <HAL_RCC_ClockConfig+0x3c>
 8002da0:	e79a      	b.n	8002cd8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da2:	68eb      	ldr	r3, [r5, #12]
 8002da4:	4909      	ldr	r1, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x198>)
 8002da6:	400b      	ands	r3, r1
 8002da8:	68e1      	ldr	r1, [r4, #12]
 8002daa:	430b      	orrs	r3, r1
 8002dac:	60eb      	str	r3, [r5, #12]
 8002dae:	e768      	b.n	8002c82 <HAL_RCC_ClockConfig+0x4e>
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40021000 	.word	0x40021000
 8002db8:	ffffc7ff 	.word	0xffffc7ff
 8002dbc:	08004ba2 	.word	0x08004ba2
 8002dc0:	20000010 	.word	0x20000010
 8002dc4:	20000018 	.word	0x20000018
 8002dc8:	00001388 	.word	0x00001388
 8002dcc:	fffff8ff 	.word	0xfffff8ff

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	055b      	lsls	r3, r3, #21
 8002dd8:	0f5b      	lsrs	r3, r3, #29
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	4a03      	ldr	r2, [pc, #12]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002dde:	6810      	ldr	r0, [r2, #0]
 8002de0:	40d8      	lsrs	r0, r3
}
 8002de2:	4770      	bx	lr
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08004bb2 	.word	0x08004bb2
 8002dec:	20000010 	.word	0x20000010

08002df0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	049b      	lsls	r3, r3, #18
 8002df8:	0f5b      	lsrs	r3, r3, #29
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002dfe:	6810      	ldr	r0, [r2, #0]
 8002e00:	40d8      	lsrs	r0, r3
}
 8002e02:	4770      	bx	lr
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08004bb2 	.word	0x08004bb2
 8002e0c:	20000010 	.word	0x20000010

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002e10:	2382      	movs	r3, #130	; 0x82
{
 8002e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e14:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002e16:	011b      	lsls	r3, r3, #4
{
 8002e18:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e1a:	421a      	tst	r2, r3
 8002e1c:	d047      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x9e>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002e20:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4c60      	ldr	r4, [pc, #384]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002e24:	055b      	lsls	r3, r3, #21
 8002e26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8002e28:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	421a      	tst	r2, r3
 8002e2c:	d104      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e30:	4313      	orrs	r3, r2
 8002e32:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	2780      	movs	r7, #128	; 0x80
 8002e3a:	4e5b      	ldr	r6, [pc, #364]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002e3c:	007f      	lsls	r7, r7, #1
 8002e3e:	6833      	ldr	r3, [r6, #0]
 8002e40:	423b      	tst	r3, r7
 8002e42:	d06d      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002e44:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002e46:	21c0      	movs	r1, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002e48:	001e      	movs	r6, r3
 8002e4a:	22c0      	movs	r2, #192	; 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002e4c:	6820      	ldr	r0, [r4, #0]
 8002e4e:	0389      	lsls	r1, r1, #14
 8002e50:	4008      	ands	r0, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002e52:	400e      	ands	r6, r1
 8002e54:	0292      	lsls	r2, r2, #10
 8002e56:	4286      	cmp	r6, r0
 8002e58:	d103      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x52>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002e5a:	68a8      	ldr	r0, [r5, #8]
 8002e5c:	4001      	ands	r1, r0
 8002e5e:	42b1      	cmp	r1, r6
 8002e60:	d007      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002e62:	0019      	movs	r1, r3
 8002e64:	4011      	ands	r1, r2
 8002e66:	4291      	cmp	r1, r2
 8002e68:	d103      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e6a:	6821      	ldr	r1, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e6e:	0389      	lsls	r1, r1, #14
 8002e70:	d466      	bmi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002e72:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002e74:	0008      	movs	r0, r1
 8002e76:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e78:	4211      	tst	r1, r2
 8002e7a:	d162      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7c:	6869      	ldr	r1, [r5, #4]
 8002e7e:	23c0      	movs	r3, #192	; 0xc0
 8002e80:	000a      	movs	r2, r1
 8002e82:	029b      	lsls	r3, r3, #10
 8002e84:	401a      	ands	r2, r3
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d107      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	4847      	ldr	r0, [pc, #284]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002e8e:	4003      	ands	r3, r0
 8002e90:	20c0      	movs	r0, #192	; 0xc0
 8002e92:	0380      	lsls	r0, r0, #14
 8002e94:	4001      	ands	r1, r0
 8002e96:	430b      	orrs	r3, r1
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e9c:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e9e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea0:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d103      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ea8:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eae:	682b      	ldr	r3, [r5, #0]
 8002eb0:	07da      	lsls	r2, r3, #31
 8002eb2:	d506      	bpl.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb4:	2003      	movs	r0, #3
 8002eb6:	493b      	ldr	r1, [pc, #236]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002eb8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002eba:	4382      	bics	r2, r0
 8002ebc:	68e8      	ldr	r0, [r5, #12]
 8002ebe:	4302      	orrs	r2, r0
 8002ec0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec2:	079a      	lsls	r2, r3, #30
 8002ec4:	d506      	bpl.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec6:	200c      	movs	r0, #12
 8002ec8:	4936      	ldr	r1, [pc, #216]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002eca:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002ecc:	4382      	bics	r2, r0
 8002ece:	6928      	ldr	r0, [r5, #16]
 8002ed0:	4302      	orrs	r2, r0
 8002ed2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed4:	075a      	lsls	r2, r3, #29
 8002ed6:	d506      	bpl.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed8:	4932      	ldr	r1, [pc, #200]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002eda:	4836      	ldr	r0, [pc, #216]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002edc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002ede:	4002      	ands	r2, r0
 8002ee0:	6968      	ldr	r0, [r5, #20]
 8002ee2:	4302      	orrs	r2, r0
 8002ee4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee6:	071a      	lsls	r2, r3, #28
 8002ee8:	d506      	bpl.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eea:	492e      	ldr	r1, [pc, #184]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002eec:	4832      	ldr	r0, [pc, #200]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002eee:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002ef0:	4002      	ands	r2, r0
 8002ef2:	69a8      	ldr	r0, [r5, #24]
 8002ef4:	4302      	orrs	r2, r0
 8002ef6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ef8:	065a      	lsls	r2, r3, #25
 8002efa:	d506      	bpl.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002efc:	4929      	ldr	r1, [pc, #164]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002efe:	482f      	ldr	r0, [pc, #188]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f00:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002f02:	4002      	ands	r2, r0
 8002f04:	6a28      	ldr	r0, [r5, #32]
 8002f06:	4302      	orrs	r2, r0
 8002f08:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002f0a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	d517      	bpl.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f10:	4a24      	ldr	r2, [pc, #144]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f12:	492b      	ldr	r1, [pc, #172]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f14:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002f16:	400b      	ands	r3, r1
 8002f18:	69e9      	ldr	r1, [r5, #28]
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f1e:	e00f      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f20:	6833      	ldr	r3, [r6, #0]
 8002f22:	433b      	orrs	r3, r7
 8002f24:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002f26:	f7fe fb5d 	bl	80015e4 <HAL_GetTick>
 8002f2a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	6833      	ldr	r3, [r6, #0]
 8002f2e:	423b      	tst	r3, r7
 8002f30:	d188      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f32:	f7fe fb57 	bl	80015e4 <HAL_GetTick>
 8002f36:	9b01      	ldr	r3, [sp, #4]
 8002f38:	1ac0      	subs	r0, r0, r3
 8002f3a:	2864      	cmp	r0, #100	; 0x64
 8002f3c:	d9f6      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8002f3e:	2003      	movs	r0, #3
}
 8002f40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f42:	6829      	ldr	r1, [r5, #0]
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002f44:	4013      	ands	r3, r2
 8002f46:	4298      	cmp	r0, r3
 8002f48:	d001      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f4a:	068b      	lsls	r3, r1, #26
 8002f4c:	d409      	bmi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x152>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002f4e:	23c0      	movs	r3, #192	; 0xc0
 8002f50:	68aa      	ldr	r2, [r5, #8]
 8002f52:	029b      	lsls	r3, r3, #10
 8002f54:	4013      	ands	r3, r2
 8002f56:	4283      	cmp	r3, r0
 8002f58:	d100      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f5a:	e78f      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002f5c:	050b      	lsls	r3, r1, #20
 8002f5e:	d400      	bmi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f60:	e78c      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f62:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002f64:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f66:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002f68:	0312      	lsls	r2, r2, #12
 8002f6a:	4302      	orrs	r2, r0
 8002f6c:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f72:	4815      	ldr	r0, [pc, #84]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002f74:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f76:	4002      	ands	r2, r0
 8002f78:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002f7a:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002f7c:	05cb      	lsls	r3, r1, #23
 8002f7e:	d400      	bmi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002f80:	e77c      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8002f82:	f7fe fb2f 	bl	80015e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f86:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002f88:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f8a:	00bf      	lsls	r7, r7, #2
 8002f8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f8e:	423b      	tst	r3, r7
 8002f90:	d000      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002f92:	e773      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe fb26 	bl	80015e4 <HAL_GetTick>
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f9a:	1b80      	subs	r0, r0, r6
 8002f9c:	4298      	cmp	r0, r3
 8002f9e:	d9f5      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002fa0:	e7cd      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	ffcfffff 	.word	0xffcfffff
 8002fb0:	efffffff 	.word	0xefffffff
 8002fb4:	fffff3ff 	.word	0xfffff3ff
 8002fb8:	ffffcfff 	.word	0xffffcfff
 8002fbc:	fbffffff 	.word	0xfbffffff
 8002fc0:	fff3ffff 	.word	0xfff3ffff
 8002fc4:	fffcffff 	.word	0xfffcffff
 8002fc8:	fff7ffff 	.word	0xfff7ffff
 8002fcc:	00001388 	.word	0x00001388

08002fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fd4:	6925      	ldr	r5, [r4, #16]
 8002fd6:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fd8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fda:	4329      	orrs	r1, r5
 8002fdc:	6965      	ldr	r5, [r4, #20]
 8002fde:	69c3      	ldr	r3, [r0, #28]
 8002fe0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fe2:	6810      	ldr	r0, [r2, #0]
 8002fe4:	4d72      	ldr	r5, [pc, #456]	; (80031b0 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fe6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fe8:	4028      	ands	r0, r5
 8002fea:	4301      	orrs	r1, r0
 8002fec:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fee:	6851      	ldr	r1, [r2, #4]
 8002ff0:	4870      	ldr	r0, [pc, #448]	; (80031b4 <UART_SetConfig+0x1e4>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ff2:	4d71      	ldr	r5, [pc, #452]	; (80031b8 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff4:	4001      	ands	r1, r0
 8002ff6:	68e0      	ldr	r0, [r4, #12]
 8002ff8:	4301      	orrs	r1, r0
 8002ffa:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ffc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ffe:	42aa      	cmp	r2, r5
 8003000:	d001      	beq.n	8003006 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003002:	6a21      	ldr	r1, [r4, #32]
 8003004:	4308      	orrs	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003006:	6891      	ldr	r1, [r2, #8]
 8003008:	4e6c      	ldr	r6, [pc, #432]	; (80031bc <UART_SetConfig+0x1ec>)
 800300a:	4031      	ands	r1, r6
 800300c:	4301      	orrs	r1, r0
 800300e:	6091      	str	r1, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003010:	496b      	ldr	r1, [pc, #428]	; (80031c0 <UART_SetConfig+0x1f0>)
 8003012:	428a      	cmp	r2, r1
 8003014:	d10f      	bne.n	8003036 <UART_SetConfig+0x66>
 8003016:	2103      	movs	r1, #3
 8003018:	4a6a      	ldr	r2, [pc, #424]	; (80031c4 <UART_SetConfig+0x1f4>)
 800301a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800301c:	400a      	ands	r2, r1
 800301e:	3a01      	subs	r2, #1
 8003020:	4969      	ldr	r1, [pc, #420]	; (80031c8 <UART_SetConfig+0x1f8>)
 8003022:	2a02      	cmp	r2, #2
 8003024:	d90f      	bls.n	8003046 <UART_SetConfig+0x76>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	0212      	lsls	r2, r2, #8
 800302a:	4293      	cmp	r3, r2
 800302c:	d100      	bne.n	8003030 <UART_SetConfig+0x60>
 800302e:	e069      	b.n	8003104 <UART_SetConfig+0x134>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003030:	f7ff fede 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
        break;
 8003034:	e09c      	b.n	8003170 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003036:	4965      	ldr	r1, [pc, #404]	; (80031cc <UART_SetConfig+0x1fc>)
 8003038:	428a      	cmp	r2, r1
 800303a:	d113      	bne.n	8003064 <UART_SetConfig+0x94>
 800303c:	210c      	movs	r1, #12
 800303e:	4a61      	ldr	r2, [pc, #388]	; (80031c4 <UART_SetConfig+0x1f4>)
 8003040:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003042:	400a      	ands	r2, r1
 8003044:	4962      	ldr	r1, [pc, #392]	; (80031d0 <UART_SetConfig+0x200>)
 8003046:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	0212      	lsls	r2, r2, #8
 800304c:	4293      	cmp	r3, r2
 800304e:	d000      	beq.n	8003052 <UART_SetConfig+0x82>
 8003050:	e07f      	b.n	8003152 <UART_SetConfig+0x182>
    switch (clocksource)
 8003052:	2808      	cmp	r0, #8
 8003054:	d818      	bhi.n	8003088 <UART_SetConfig+0xb8>
 8003056:	f7fd f857 	bl	8000108 <__gnu_thumb1_case_uqi>
 800305a:	5550      	.short	0x5550
 800305c:	17791758 	.word	0x17791758
 8003060:	1717      	.short	0x1717
 8003062:	63          	.byte	0x63
 8003063:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003064:	42aa      	cmp	r2, r5
 8003066:	d10f      	bne.n	8003088 <UART_SetConfig+0xb8>
 8003068:	21c0      	movs	r1, #192	; 0xc0
 800306a:	2080      	movs	r0, #128	; 0x80
 800306c:	4a55      	ldr	r2, [pc, #340]	; (80031c4 <UART_SetConfig+0x1f4>)
 800306e:	0109      	lsls	r1, r1, #4
 8003070:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003072:	0100      	lsls	r0, r0, #4
 8003074:	400b      	ands	r3, r1
 8003076:	4283      	cmp	r3, r0
 8003078:	d016      	beq.n	80030a8 <UART_SetConfig+0xd8>
 800307a:	d807      	bhi.n	800308c <UART_SetConfig+0xbc>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <UART_SetConfig+0xc6>
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	00d2      	lsls	r2, r2, #3
 8003084:	4293      	cmp	r3, r2
 8003086:	d035      	beq.n	80030f4 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003088:	2001      	movs	r0, #1
 800308a:	e009      	b.n	80030a0 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800308c:	428b      	cmp	r3, r1
 800308e:	d1fb      	bne.n	8003088 <UART_SetConfig+0xb8>
 8003090:	2080      	movs	r0, #128	; 0x80
 8003092:	0200      	lsls	r0, r0, #8
 8003094:	e012      	b.n	80030bc <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003096:	f7ff fe9b 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800309a:	2800      	cmp	r0, #0
 800309c:	d10e      	bne.n	80030bc <UART_SetConfig+0xec>
 800309e:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80030a4:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 80030a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a8:	2310      	movs	r3, #16
 80030aa:	6810      	ldr	r0, [r2, #0]
 80030ac:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030ae:	4243      	negs	r3, r0
 80030b0:	4158      	adcs	r0, r3
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <UART_SetConfig+0x204>)
 80030b4:	4240      	negs	r0, r0
 80030b6:	4018      	ands	r0, r3
 80030b8:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <UART_SetConfig+0x208>)
 80030ba:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030bc:	2203      	movs	r2, #3
 80030be:	6863      	ldr	r3, [r4, #4]
 80030c0:	435a      	muls	r2, r3
 80030c2:	4282      	cmp	r2, r0
 80030c4:	d8e0      	bhi.n	8003088 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030c6:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030c8:	4282      	cmp	r2, r0
 80030ca:	d3dd      	bcc.n	8003088 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030cc:	2700      	movs	r7, #0
 80030ce:	0e02      	lsrs	r2, r0, #24
 80030d0:	0201      	lsls	r1, r0, #8
 80030d2:	085e      	lsrs	r6, r3, #1
 80030d4:	1989      	adds	r1, r1, r6
 80030d6:	417a      	adcs	r2, r7
 80030d8:	0008      	movs	r0, r1
 80030da:	0011      	movs	r1, r2
 80030dc:	001a      	movs	r2, r3
 80030de:	003b      	movs	r3, r7
 80030e0:	f7fd f8b2 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030e4:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <UART_SetConfig+0x20c>)
 80030e6:	18c2      	adds	r2, r0, r3
 80030e8:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d8cc      	bhi.n	8003088 <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	60d8      	str	r0, [r3, #12]
 80030f2:	e7d4      	b.n	800309e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80030f4:	f7ff fad2 	bl	800269c <HAL_RCC_GetSysClockFreq>
        break;
 80030f8:	e7cf      	b.n	800309a <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 80030fa:	f7ff fe69 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80030fe:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003100:	d0cd      	beq.n	800309e <UART_SetConfig+0xce>
 8003102:	e00d      	b.n	8003120 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7ff fe74 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8003108:	e7f9      	b.n	80030fe <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800310c:	4a32      	ldr	r2, [pc, #200]	; (80031d8 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	2310      	movs	r3, #16
 8003112:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003114:	4243      	negs	r3, r0
 8003116:	4158      	adcs	r0, r3
 8003118:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <UART_SetConfig+0x204>)
 800311a:	4240      	negs	r0, r0
 800311c:	4003      	ands	r3, r0
 800311e:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003120:	0058      	lsls	r0, r3, #1
 8003122:	6863      	ldr	r3, [r4, #4]
 8003124:	6861      	ldr	r1, [r4, #4]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	18c0      	adds	r0, r0, r3
 800312a:	f7fd f801 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800312e:	492d      	ldr	r1, [pc, #180]	; (80031e4 <UART_SetConfig+0x214>)
 8003130:	b282      	uxth	r2, r0
 8003132:	3a10      	subs	r2, #16
 8003134:	0403      	lsls	r3, r0, #16
 8003136:	428a      	cmp	r2, r1
 8003138:	d8a6      	bhi.n	8003088 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800313a:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800313c:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800313e:	4390      	bics	r0, r2
 8003140:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003142:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003144:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8003146:	4318      	orrs	r0, r3
 8003148:	60d0      	str	r0, [r2, #12]
 800314a:	e7a8      	b.n	800309e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800314c:	f7ff faa6 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8003150:	e7d5      	b.n	80030fe <UART_SetConfig+0x12e>
    switch (clocksource)
 8003152:	2808      	cmp	r0, #8
 8003154:	d898      	bhi.n	8003088 <UART_SetConfig+0xb8>
 8003156:	f7fc ffe1 	bl	800011c <__gnu_thumb1_case_shi>
 800315a:	0009      	.short	0x0009
 800315c:	000fff6b 	.word	0x000fff6b
 8003160:	0025ff97 	.word	0x0025ff97
 8003164:	ff97ff97 	.word	0xff97ff97
 8003168:	0028ff97 	.word	0x0028ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7ff fe30 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003170:	2800      	cmp	r0, #0
 8003172:	d100      	bne.n	8003176 <UART_SetConfig+0x1a6>
 8003174:	e793      	b.n	800309e <UART_SetConfig+0xce>
 8003176:	e00a      	b.n	800318e <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <UART_SetConfig+0x1f4>)
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	2310      	movs	r3, #16
 800317e:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003180:	4243      	negs	r3, r0
 8003182:	4158      	adcs	r0, r3
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <UART_SetConfig+0x204>)
 8003186:	4240      	negs	r0, r0
 8003188:	4018      	ands	r0, r3
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <UART_SetConfig+0x208>)
 800318c:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800318e:	6863      	ldr	r3, [r4, #4]
 8003190:	6861      	ldr	r1, [r4, #4]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	1818      	adds	r0, r3, r0
 8003196:	f7fc ffcb 	bl	8000130 <__udivsi3>
 800319a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319c:	0002      	movs	r2, r0
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <UART_SetConfig+0x214>)
 80031a0:	3a10      	subs	r2, #16
 80031a2:	e7a2      	b.n	80030ea <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 80031a4:	f7ff fa7a 	bl	800269c <HAL_RCC_GetSysClockFreq>
        break;
 80031a8:	e7e2      	b.n	8003170 <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031aa:	2080      	movs	r0, #128	; 0x80
 80031ac:	0200      	lsls	r0, r0, #8
 80031ae:	e7ee      	b.n	800318e <UART_SetConfig+0x1be>
 80031b0:	efff69f3 	.word	0xefff69f3
 80031b4:	ffffcfff 	.word	0xffffcfff
 80031b8:	40004800 	.word	0x40004800
 80031bc:	fffff4ff 	.word	0xfffff4ff
 80031c0:	40013800 	.word	0x40013800
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08004bc3 	.word	0x08004bc3
 80031cc:	40004400 	.word	0x40004400
 80031d0:	08004bc6 	.word	0x08004bc6
 80031d4:	00b71b00 	.word	0x00b71b00
 80031d8:	003d0900 	.word	0x003d0900
 80031dc:	fffffd00 	.word	0xfffffd00
 80031e0:	000ffcff 	.word	0x000ffcff
 80031e4:	0000ffef 	.word	0x0000ffef

080031e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80031ea:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ec:	07da      	lsls	r2, r3, #31
 80031ee:	d506      	bpl.n	80031fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031f0:	6801      	ldr	r1, [r0, #0]
 80031f2:	4c28      	ldr	r4, [pc, #160]	; (8003294 <UART_AdvFeatureConfig+0xac>)
 80031f4:	684a      	ldr	r2, [r1, #4]
 80031f6:	4022      	ands	r2, r4
 80031f8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80031fa:	4322      	orrs	r2, r4
 80031fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031fe:	079a      	lsls	r2, r3, #30
 8003200:	d506      	bpl.n	8003210 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003202:	6801      	ldr	r1, [r0, #0]
 8003204:	4c24      	ldr	r4, [pc, #144]	; (8003298 <UART_AdvFeatureConfig+0xb0>)
 8003206:	684a      	ldr	r2, [r1, #4]
 8003208:	4022      	ands	r2, r4
 800320a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800320c:	4322      	orrs	r2, r4
 800320e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003210:	075a      	lsls	r2, r3, #29
 8003212:	d506      	bpl.n	8003222 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003214:	6801      	ldr	r1, [r0, #0]
 8003216:	4c21      	ldr	r4, [pc, #132]	; (800329c <UART_AdvFeatureConfig+0xb4>)
 8003218:	684a      	ldr	r2, [r1, #4]
 800321a:	4022      	ands	r2, r4
 800321c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800321e:	4322      	orrs	r2, r4
 8003220:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003222:	071a      	lsls	r2, r3, #28
 8003224:	d506      	bpl.n	8003234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003226:	6801      	ldr	r1, [r0, #0]
 8003228:	4c1d      	ldr	r4, [pc, #116]	; (80032a0 <UART_AdvFeatureConfig+0xb8>)
 800322a:	684a      	ldr	r2, [r1, #4]
 800322c:	4022      	ands	r2, r4
 800322e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003230:	4322      	orrs	r2, r4
 8003232:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003234:	06da      	lsls	r2, r3, #27
 8003236:	d506      	bpl.n	8003246 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003238:	6801      	ldr	r1, [r0, #0]
 800323a:	4c1a      	ldr	r4, [pc, #104]	; (80032a4 <UART_AdvFeatureConfig+0xbc>)
 800323c:	688a      	ldr	r2, [r1, #8]
 800323e:	4022      	ands	r2, r4
 8003240:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003242:	4322      	orrs	r2, r4
 8003244:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003246:	069a      	lsls	r2, r3, #26
 8003248:	d506      	bpl.n	8003258 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800324a:	6801      	ldr	r1, [r0, #0]
 800324c:	4c16      	ldr	r4, [pc, #88]	; (80032a8 <UART_AdvFeatureConfig+0xc0>)
 800324e:	688a      	ldr	r2, [r1, #8]
 8003250:	4022      	ands	r2, r4
 8003252:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003254:	4322      	orrs	r2, r4
 8003256:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003258:	065a      	lsls	r2, r3, #25
 800325a:	d510      	bpl.n	800327e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800325c:	6801      	ldr	r1, [r0, #0]
 800325e:	4d13      	ldr	r5, [pc, #76]	; (80032ac <UART_AdvFeatureConfig+0xc4>)
 8003260:	684a      	ldr	r2, [r1, #4]
 8003262:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003264:	402a      	ands	r2, r5
 8003266:	4322      	orrs	r2, r4
 8003268:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	0352      	lsls	r2, r2, #13
 800326e:	4294      	cmp	r4, r2
 8003270:	d105      	bne.n	800327e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003272:	684a      	ldr	r2, [r1, #4]
 8003274:	4c0e      	ldr	r4, [pc, #56]	; (80032b0 <UART_AdvFeatureConfig+0xc8>)
 8003276:	4022      	ands	r2, r4
 8003278:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800327a:	4322      	orrs	r2, r4
 800327c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	d506      	bpl.n	8003290 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003282:	6802      	ldr	r2, [r0, #0]
 8003284:	490b      	ldr	r1, [pc, #44]	; (80032b4 <UART_AdvFeatureConfig+0xcc>)
 8003286:	6853      	ldr	r3, [r2, #4]
 8003288:	400b      	ands	r3, r1
 800328a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800328c:	430b      	orrs	r3, r1
 800328e:	6053      	str	r3, [r2, #4]
  }
}
 8003290:	bd30      	pop	{r4, r5, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	fffdffff 	.word	0xfffdffff
 8003298:	fffeffff 	.word	0xfffeffff
 800329c:	fffbffff 	.word	0xfffbffff
 80032a0:	ffff7fff 	.word	0xffff7fff
 80032a4:	ffffefff 	.word	0xffffefff
 80032a8:	ffffdfff 	.word	0xffffdfff
 80032ac:	ffefffff 	.word	0xffefffff
 80032b0:	ff9fffff 	.word	0xff9fffff
 80032b4:	fff7ffff 	.word	0xfff7ffff

080032b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032ba:	2780      	movs	r7, #128	; 0x80
{
 80032bc:	0004      	movs	r4, r0
 80032be:	000d      	movs	r5, r1
 80032c0:	0016      	movs	r6, r2
 80032c2:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032c4:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c6:	6822      	ldr	r2, [r4, #0]
 80032c8:	69d3      	ldr	r3, [r2, #28]
 80032ca:	402b      	ands	r3, r5
 80032cc:	1b5b      	subs	r3, r3, r5
 80032ce:	4259      	negs	r1, r3
 80032d0:	414b      	adcs	r3, r1
 80032d2:	42b3      	cmp	r3, r6
 80032d4:	d001      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80032d6:	2000      	movs	r0, #0
 80032d8:	e028      	b.n	800332c <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80032da:	9b08      	ldr	r3, [sp, #32]
 80032dc:	3301      	adds	r3, #1
 80032de:	d0f3      	beq.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e0:	f7fe f980 	bl	80015e4 <HAL_GetTick>
 80032e4:	9b01      	ldr	r3, [sp, #4]
 80032e6:	1ac0      	subs	r0, r0, r3
 80032e8:	9b08      	ldr	r3, [sp, #32]
 80032ea:	4298      	cmp	r0, r3
 80032ec:	d801      	bhi.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x3a>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11d      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f2:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f6:	2201      	movs	r2, #1
 80032f8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032fc:	6821      	ldr	r1, [r4, #0]
 80032fe:	4d1e      	ldr	r5, [pc, #120]	; (8003378 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8003300:	680b      	ldr	r3, [r1, #0]
 8003302:	402b      	ands	r3, r5
 8003304:	600b      	str	r3, [r1, #0]
 8003306:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	6821      	ldr	r1, [r4, #0]
 8003314:	688b      	ldr	r3, [r1, #8]
 8003316:	4393      	bics	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
 800331a:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800331e:	2320      	movs	r3, #32
 8003320:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003322:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003324:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003326:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003328:	3474      	adds	r4, #116	; 0x74
 800332a:	7023      	strb	r3, [r4, #0]
}
 800332c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800332e:	2104      	movs	r1, #4
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	420a      	tst	r2, r1
 8003336:	d0c6      	beq.n	80032c6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	423a      	tst	r2, r7
 800333c:	d0c3      	beq.n	80032c6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800333e:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003340:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003344:	2201      	movs	r2, #1
 8003346:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334a:	6821      	ldr	r1, [r4, #0]
 800334c:	4d0a      	ldr	r5, [pc, #40]	; (8003378 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800334e:	680b      	ldr	r3, [r1, #0]
 8003350:	402b      	ands	r3, r5
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003358:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003360:	6821      	ldr	r1, [r4, #0]
 8003362:	688b      	ldr	r3, [r1, #8]
 8003364:	4393      	bics	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
 8003368:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800336c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800336e:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8003370:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003372:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003374:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003376:	e7d5      	b.n	8003324 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003378:	fffffe5f 	.word	0xfffffe5f

0800337c <HAL_UART_Transmit>:
{
 800337c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337e:	b087      	sub	sp, #28
 8003380:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8003382:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8003384:	0004      	movs	r4, r0
 8003386:	000d      	movs	r5, r1
 8003388:	0016      	movs	r6, r2
    return HAL_BUSY;
 800338a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800338c:	2b20      	cmp	r3, #32
 800338e:	d151      	bne.n	8003434 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8003390:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003392:	2900      	cmp	r1, #0
 8003394:	d04e      	beq.n	8003434 <HAL_UART_Transmit+0xb8>
 8003396:	2a00      	cmp	r2, #0
 8003398:	d04c      	beq.n	8003434 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	68a2      	ldr	r2, [r4, #8]
 800339e:	015b      	lsls	r3, r3, #5
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d104      	bne.n	80033ae <HAL_UART_Transmit+0x32>
 80033a4:	6923      	ldr	r3, [r4, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80033aa:	4201      	tst	r1, r0
 80033ac:	d142      	bne.n	8003434 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 80033ae:	0023      	movs	r3, r4
 80033b0:	3374      	adds	r3, #116	; 0x74
 80033b2:	9303      	str	r3, [sp, #12]
 80033b4:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 80033b6:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d03b      	beq.n	8003434 <HAL_UART_Transmit+0xb8>
 80033bc:	2301      	movs	r3, #1
 80033be:	9a03      	ldr	r2, [sp, #12]
 80033c0:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c2:	2200      	movs	r2, #0
 80033c4:	1d23      	adds	r3, r4, #4
 80033c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c8:	2321      	movs	r3, #33	; 0x21
 80033ca:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80033cc:	f7fe f90a 	bl	80015e4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80033d0:	0023      	movs	r3, r4
 80033d2:	3350      	adds	r3, #80	; 0x50
 80033d4:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80033d6:	3302      	adds	r3, #2
 80033d8:	801e      	strh	r6, [r3, #0]
 80033da:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80033e0:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80033e2:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e4:	015b      	lsls	r3, r3, #5
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d104      	bne.n	80033f4 <HAL_UART_Transmit+0x78>
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	42b3      	cmp	r3, r6
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_Transmit+0x78>
 80033f0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80033f2:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 80033f4:	2300      	movs	r3, #0
 80033f6:	9a03      	ldr	r2, [sp, #12]
 80033f8:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 80033fa:	0023      	movs	r3, r4
 80033fc:	3352      	adds	r3, #82	; 0x52
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29a      	uxth	r2, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003406:	9b05      	ldr	r3, [sp, #20]
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	0020      	movs	r0, r4
 800340e:	003b      	movs	r3, r7
 8003410:	f7ff ff52 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 8003414:	2800      	cmp	r0, #0
 8003416:	d10c      	bne.n	8003432 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8003418:	2320      	movs	r3, #32
 800341a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800341c:	e00a      	b.n	8003434 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341e:	9b05      	ldr	r3, [sp, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	003b      	movs	r3, r7
 8003428:	0020      	movs	r0, r4
 800342a:	f7ff ff45 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 800342e:	2800      	cmp	r0, #0
 8003430:	d002      	beq.n	8003438 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 8003432:	2003      	movs	r0, #3
}
 8003434:	b007      	add	sp, #28
 8003436:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	2d00      	cmp	r5, #0
 800343c:	d10b      	bne.n	8003456 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003440:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003442:	05db      	lsls	r3, r3, #23
 8003444:	0ddb      	lsrs	r3, r3, #23
 8003446:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003448:	9b04      	ldr	r3, [sp, #16]
 800344a:	9a04      	ldr	r2, [sp, #16]
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	3b01      	subs	r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	8013      	strh	r3, [r2, #0]
 8003454:	e7d1      	b.n	80033fa <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003456:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003458:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800345a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 800345c:	e7f4      	b.n	8003448 <HAL_UART_Transmit+0xcc>
	...

08003460 <HAL_UART_Receive>:
{
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b087      	sub	sp, #28
 8003464:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8003466:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8003468:	0004      	movs	r4, r0
 800346a:	000f      	movs	r7, r1
 800346c:	0015      	movs	r5, r2
    return HAL_BUSY;
 800346e:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003470:	2b20      	cmp	r3, #32
 8003472:	d144      	bne.n	80034fe <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 8003474:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003476:	2900      	cmp	r1, #0
 8003478:	d041      	beq.n	80034fe <HAL_UART_Receive+0x9e>
 800347a:	2a00      	cmp	r2, #0
 800347c:	d03f      	beq.n	80034fe <HAL_UART_Receive+0x9e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	68a2      	ldr	r2, [r4, #8]
 8003482:	015b      	lsls	r3, r3, #5
 8003484:	429a      	cmp	r2, r3
 8003486:	d104      	bne.n	8003492 <HAL_UART_Receive+0x32>
 8003488:	6923      	ldr	r3, [r4, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800348e:	4201      	tst	r1, r0
 8003490:	d135      	bne.n	80034fe <HAL_UART_Receive+0x9e>
    __HAL_LOCK(huart);
 8003492:	0026      	movs	r6, r4
 8003494:	3674      	adds	r6, #116	; 0x74
 8003496:	7833      	ldrb	r3, [r6, #0]
    return HAL_BUSY;
 8003498:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800349a:	2b01      	cmp	r3, #1
 800349c:	d02f      	beq.n	80034fe <HAL_UART_Receive+0x9e>
 800349e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	2200      	movs	r2, #0
    __HAL_LOCK(huart);
 80034a2:	7033      	strb	r3, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	1d23      	adds	r3, r4, #4
 80034a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034a8:	2322      	movs	r3, #34	; 0x22
 80034aa:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	6622      	str	r2, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 80034ae:	f7fe f899 	bl	80015e4 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80034b2:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 80034b8:	3358      	adds	r3, #88	; 0x58
 80034ba:	801d      	strh	r5, [r3, #0]
    huart->RxXferCount = Size;
 80034bc:	805d      	strh	r5, [r3, #2]
    tickstart = HAL_GetTick();
 80034be:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 80034c0:	0149      	lsls	r1, r1, #5
 80034c2:	3304      	adds	r3, #4
 80034c4:	428a      	cmp	r2, r1
 80034c6:	d11e      	bne.n	8003506 <HAL_UART_Receive+0xa6>
 80034c8:	6921      	ldr	r1, [r4, #16]
 80034ca:	2900      	cmp	r1, #0
 80034cc:	d119      	bne.n	8003502 <HAL_UART_Receive+0xa2>
 80034ce:	4925      	ldr	r1, [pc, #148]	; (8003564 <HAL_UART_Receive+0x104>)
 80034d0:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 80034d2:	881b      	ldrh	r3, [r3, #0]
      pdata16bits = NULL;
 80034d4:	2500      	movs	r5, #0
    uhMask = huart->Mask;
 80034d6:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	015b      	lsls	r3, r3, #5
 80034dc:	429a      	cmp	r2, r3
 80034de:	d104      	bne.n	80034ea <HAL_UART_Receive+0x8a>
 80034e0:	6923      	ldr	r3, [r4, #16]
 80034e2:	42ab      	cmp	r3, r5
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Receive+0x8a>
 80034e6:	003d      	movs	r5, r7
      pdata8bits  = NULL;
 80034e8:	001f      	movs	r7, r3
    __HAL_UNLOCK(huart);
 80034ea:	2300      	movs	r3, #0
 80034ec:	7033      	strb	r3, [r6, #0]
    while (huart->RxXferCount > 0U)
 80034ee:	0026      	movs	r6, r4
 80034f0:	365a      	adds	r6, #90	; 0x5a
 80034f2:	8833      	ldrh	r3, [r6, #0]
 80034f4:	b298      	uxth	r0, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d117      	bne.n	800352a <HAL_UART_Receive+0xca>
    huart->RxState = HAL_UART_STATE_READY;
 80034fa:	3320      	adds	r3, #32
 80034fc:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80034fe:	b007      	add	sp, #28
 8003500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8003502:	21ff      	movs	r1, #255	; 0xff
 8003504:	e7e4      	b.n	80034d0 <HAL_UART_Receive+0x70>
 8003506:	2a00      	cmp	r2, #0
 8003508:	d104      	bne.n	8003514 <HAL_UART_Receive+0xb4>
 800350a:	6921      	ldr	r1, [r4, #16]
 800350c:	2900      	cmp	r1, #0
 800350e:	d0f8      	beq.n	8003502 <HAL_UART_Receive+0xa2>
 8003510:	217f      	movs	r1, #127	; 0x7f
 8003512:	e7dd      	b.n	80034d0 <HAL_UART_Receive+0x70>
 8003514:	2180      	movs	r1, #128	; 0x80
 8003516:	0549      	lsls	r1, r1, #21
 8003518:	428a      	cmp	r2, r1
 800351a:	d104      	bne.n	8003526 <HAL_UART_Receive+0xc6>
 800351c:	6921      	ldr	r1, [r4, #16]
 800351e:	2900      	cmp	r1, #0
 8003520:	d0f6      	beq.n	8003510 <HAL_UART_Receive+0xb0>
 8003522:	213f      	movs	r1, #63	; 0x3f
 8003524:	e7d4      	b.n	80034d0 <HAL_UART_Receive+0x70>
 8003526:	2100      	movs	r1, #0
 8003528:	e7d2      	b.n	80034d0 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800352a:	9b05      	ldr	r3, [sp, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2120      	movs	r1, #32
 8003532:	0020      	movs	r0, r4
 8003534:	9b04      	ldr	r3, [sp, #16]
 8003536:	f7ff febf 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 800353a:	2800      	cmp	r0, #0
 800353c:	d10f      	bne.n	800355e <HAL_UART_Receive+0xfe>
      if (pdata8bits == NULL)
 800353e:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003540:	9a03      	ldr	r2, [sp, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 8003546:	2f00      	cmp	r7, #0
 8003548:	d106      	bne.n	8003558 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800354a:	802b      	strh	r3, [r5, #0]
        pdata16bits++;
 800354c:	3502      	adds	r5, #2
      huart->RxXferCount--;
 800354e:	8833      	ldrh	r3, [r6, #0]
 8003550:	3b01      	subs	r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	8033      	strh	r3, [r6, #0]
 8003556:	e7ca      	b.n	80034ee <HAL_UART_Receive+0x8e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003558:	703b      	strb	r3, [r7, #0]
        pdata8bits++;
 800355a:	3701      	adds	r7, #1
 800355c:	e7f7      	b.n	800354e <HAL_UART_Receive+0xee>
        return HAL_TIMEOUT;
 800355e:	2003      	movs	r0, #3
 8003560:	e7cd      	b.n	80034fe <HAL_UART_Receive+0x9e>
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	000001ff 	.word	0x000001ff

08003568 <UART_CheckIdleState>:
{
 8003568:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356a:	2600      	movs	r6, #0
{
 800356c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356e:	1d03      	adds	r3, r0, #4
 8003570:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003572:	f7fe f837 	bl	80015e4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003576:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003578:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	d416      	bmi.n	80035ae <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	075b      	lsls	r3, r3, #29
 8003586:	d50a      	bpl.n	800359e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <UART_CheckIdleState+0x60>)
 800358c:	2200      	movs	r2, #0
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	0020      	movs	r0, r4
 8003592:	002b      	movs	r3, r5
 8003594:	03c9      	lsls	r1, r1, #15
 8003596:	f7ff fe8f 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 800359a:	2800      	cmp	r0, #0
 800359c:	d112      	bne.n	80035c4 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800359e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80035a2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035a4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a6:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80035a8:	3474      	adds	r4, #116	; 0x74
 80035aa:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80035ac:	e00b      	b.n	80035c6 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <UART_CheckIdleState+0x60>)
 80035b2:	0032      	movs	r2, r6
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	0389      	lsls	r1, r1, #14
 80035b8:	0003      	movs	r3, r0
 80035ba:	0020      	movs	r0, r4
 80035bc:	f7ff fe7c 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d0dd      	beq.n	8003580 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80035c4:	2003      	movs	r0, #3
}
 80035c6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80035c8:	01ffffff 	.word	0x01ffffff

080035cc <HAL_UART_Init>:
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80035d2:	2001      	movs	r0, #1
}
 80035d4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80035dc:	0002      	movs	r2, r0
 80035de:	3274      	adds	r2, #116	; 0x74
 80035e0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80035e2:	f7fd ff61 	bl	80014a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80035e6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80035e8:	2101      	movs	r1, #1
 80035ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80035ec:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80035ee:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035f0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80035f2:	438b      	bics	r3, r1
 80035f4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035f6:	f7ff fceb 	bl	8002fd0 <UART_SetConfig>
 80035fa:	2801      	cmp	r0, #1
 80035fc:	d0e9      	beq.n	80035d2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8003604:	0020      	movs	r0, r4
 8003606:	f7ff fdef 	bl	80031e8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	4907      	ldr	r1, [pc, #28]	; (800362c <HAL_UART_Init+0x60>)
 800360e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003610:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003612:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003614:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003616:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	438a      	bics	r2, r1
 800361c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800361e:	2201      	movs	r2, #1
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003626:	f7ff ff9f 	bl	8003568 <UART_CheckIdleState>
 800362a:	e7d3      	b.n	80035d4 <HAL_UART_Init+0x8>
 800362c:	ffffb7ff 	.word	0xffffb7ff

08003630 <__errno>:
 8003630:	4b01      	ldr	r3, [pc, #4]	; (8003638 <__errno+0x8>)
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	4770      	bx	lr
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	2000001c 	.word	0x2000001c

0800363c <__libc_init_array>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	2600      	movs	r6, #0
 8003640:	4d0c      	ldr	r5, [pc, #48]	; (8003674 <__libc_init_array+0x38>)
 8003642:	4c0d      	ldr	r4, [pc, #52]	; (8003678 <__libc_init_array+0x3c>)
 8003644:	1b64      	subs	r4, r4, r5
 8003646:	10a4      	asrs	r4, r4, #2
 8003648:	42a6      	cmp	r6, r4
 800364a:	d109      	bne.n	8003660 <__libc_init_array+0x24>
 800364c:	2600      	movs	r6, #0
 800364e:	f001 fa65 	bl	8004b1c <_init>
 8003652:	4d0a      	ldr	r5, [pc, #40]	; (800367c <__libc_init_array+0x40>)
 8003654:	4c0a      	ldr	r4, [pc, #40]	; (8003680 <__libc_init_array+0x44>)
 8003656:	1b64      	subs	r4, r4, r5
 8003658:	10a4      	asrs	r4, r4, #2
 800365a:	42a6      	cmp	r6, r4
 800365c:	d105      	bne.n	800366a <__libc_init_array+0x2e>
 800365e:	bd70      	pop	{r4, r5, r6, pc}
 8003660:	00b3      	lsls	r3, r6, #2
 8003662:	58eb      	ldr	r3, [r5, r3]
 8003664:	4798      	blx	r3
 8003666:	3601      	adds	r6, #1
 8003668:	e7ee      	b.n	8003648 <__libc_init_array+0xc>
 800366a:	00b3      	lsls	r3, r6, #2
 800366c:	58eb      	ldr	r3, [r5, r3]
 800366e:	4798      	blx	r3
 8003670:	3601      	adds	r6, #1
 8003672:	e7f2      	b.n	800365a <__libc_init_array+0x1e>
 8003674:	08004c74 	.word	0x08004c74
 8003678:	08004c74 	.word	0x08004c74
 800367c:	08004c74 	.word	0x08004c74
 8003680:	08004c78 	.word	0x08004c78

08003684 <memcpy>:
 8003684:	2300      	movs	r3, #0
 8003686:	b510      	push	{r4, lr}
 8003688:	429a      	cmp	r2, r3
 800368a:	d100      	bne.n	800368e <memcpy+0xa>
 800368c:	bd10      	pop	{r4, pc}
 800368e:	5ccc      	ldrb	r4, [r1, r3]
 8003690:	54c4      	strb	r4, [r0, r3]
 8003692:	3301      	adds	r3, #1
 8003694:	e7f8      	b.n	8003688 <memcpy+0x4>

08003696 <memset>:
 8003696:	0003      	movs	r3, r0
 8003698:	1882      	adds	r2, r0, r2
 800369a:	4293      	cmp	r3, r2
 800369c:	d100      	bne.n	80036a0 <memset+0xa>
 800369e:	4770      	bx	lr
 80036a0:	7019      	strb	r1, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	e7f9      	b.n	800369a <memset+0x4>
	...

080036a8 <iprintf>:
 80036a8:	b40f      	push	{r0, r1, r2, r3}
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <iprintf+0x30>)
 80036ac:	b513      	push	{r0, r1, r4, lr}
 80036ae:	681c      	ldr	r4, [r3, #0]
 80036b0:	2c00      	cmp	r4, #0
 80036b2:	d005      	beq.n	80036c0 <iprintf+0x18>
 80036b4:	69a3      	ldr	r3, [r4, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <iprintf+0x18>
 80036ba:	0020      	movs	r0, r4
 80036bc:	f000 faba 	bl	8003c34 <__sinit>
 80036c0:	ab05      	add	r3, sp, #20
 80036c2:	0020      	movs	r0, r4
 80036c4:	9a04      	ldr	r2, [sp, #16]
 80036c6:	68a1      	ldr	r1, [r4, #8]
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	f000 fdf5 	bl	80042b8 <_vfiprintf_r>
 80036ce:	bc16      	pop	{r1, r2, r4}
 80036d0:	bc08      	pop	{r3}
 80036d2:	b004      	add	sp, #16
 80036d4:	4718      	bx	r3
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	2000001c 	.word	0x2000001c

080036dc <putchar>:
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <putchar+0x24>)
 80036de:	b570      	push	{r4, r5, r6, lr}
 80036e0:	681c      	ldr	r4, [r3, #0]
 80036e2:	0005      	movs	r5, r0
 80036e4:	2c00      	cmp	r4, #0
 80036e6:	d005      	beq.n	80036f4 <putchar+0x18>
 80036e8:	69a3      	ldr	r3, [r4, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <putchar+0x18>
 80036ee:	0020      	movs	r0, r4
 80036f0:	f000 faa0 	bl	8003c34 <__sinit>
 80036f4:	0029      	movs	r1, r5
 80036f6:	0020      	movs	r0, r4
 80036f8:	68a2      	ldr	r2, [r4, #8]
 80036fa:	f001 f899 	bl	8004830 <_putc_r>
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	2000001c 	.word	0x2000001c

08003704 <_puts_r>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	0005      	movs	r5, r0
 8003708:	000e      	movs	r6, r1
 800370a:	2800      	cmp	r0, #0
 800370c:	d004      	beq.n	8003718 <_puts_r+0x14>
 800370e:	6983      	ldr	r3, [r0, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <_puts_r+0x14>
 8003714:	f000 fa8e 	bl	8003c34 <__sinit>
 8003718:	69ab      	ldr	r3, [r5, #24]
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <_puts_r+0x22>
 8003720:	0028      	movs	r0, r5
 8003722:	f000 fa87 	bl	8003c34 <__sinit>
 8003726:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <_puts_r+0xd8>)
 8003728:	429c      	cmp	r4, r3
 800372a:	d122      	bne.n	8003772 <_puts_r+0x6e>
 800372c:	686c      	ldr	r4, [r5, #4]
 800372e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003730:	07db      	lsls	r3, r3, #31
 8003732:	d405      	bmi.n	8003740 <_puts_r+0x3c>
 8003734:	89a3      	ldrh	r3, [r4, #12]
 8003736:	059b      	lsls	r3, r3, #22
 8003738:	d402      	bmi.n	8003740 <_puts_r+0x3c>
 800373a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800373c:	f000 fb1b 	bl	8003d76 <__retarget_lock_acquire_recursive>
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	071b      	lsls	r3, r3, #28
 8003744:	d502      	bpl.n	800374c <_puts_r+0x48>
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d129      	bne.n	80037a0 <_puts_r+0x9c>
 800374c:	0021      	movs	r1, r4
 800374e:	0028      	movs	r0, r5
 8003750:	f000 f8ca 	bl	80038e8 <__swsetup_r>
 8003754:	2800      	cmp	r0, #0
 8003756:	d023      	beq.n	80037a0 <_puts_r+0x9c>
 8003758:	2501      	movs	r5, #1
 800375a:	426d      	negs	r5, r5
 800375c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800375e:	07db      	lsls	r3, r3, #31
 8003760:	d405      	bmi.n	800376e <_puts_r+0x6a>
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	059b      	lsls	r3, r3, #22
 8003766:	d402      	bmi.n	800376e <_puts_r+0x6a>
 8003768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376a:	f000 fb05 	bl	8003d78 <__retarget_lock_release_recursive>
 800376e:	0028      	movs	r0, r5
 8003770:	bd70      	pop	{r4, r5, r6, pc}
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <_puts_r+0xdc>)
 8003774:	429c      	cmp	r4, r3
 8003776:	d101      	bne.n	800377c <_puts_r+0x78>
 8003778:	68ac      	ldr	r4, [r5, #8]
 800377a:	e7d8      	b.n	800372e <_puts_r+0x2a>
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <_puts_r+0xe0>)
 800377e:	429c      	cmp	r4, r3
 8003780:	d1d5      	bne.n	800372e <_puts_r+0x2a>
 8003782:	68ec      	ldr	r4, [r5, #12]
 8003784:	e7d3      	b.n	800372e <_puts_r+0x2a>
 8003786:	3601      	adds	r6, #1
 8003788:	60a3      	str	r3, [r4, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	da04      	bge.n	8003798 <_puts_r+0x94>
 800378e:	69a2      	ldr	r2, [r4, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	dc16      	bgt.n	80037c2 <_puts_r+0xbe>
 8003794:	290a      	cmp	r1, #10
 8003796:	d014      	beq.n	80037c2 <_puts_r+0xbe>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	6022      	str	r2, [r4, #0]
 800379e:	7019      	strb	r1, [r3, #0]
 80037a0:	68a3      	ldr	r3, [r4, #8]
 80037a2:	7831      	ldrb	r1, [r6, #0]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d1ed      	bne.n	8003786 <_puts_r+0x82>
 80037aa:	60a3      	str	r3, [r4, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da0f      	bge.n	80037d0 <_puts_r+0xcc>
 80037b0:	0028      	movs	r0, r5
 80037b2:	0022      	movs	r2, r4
 80037b4:	310a      	adds	r1, #10
 80037b6:	f000 f841 	bl	800383c <__swbuf_r>
 80037ba:	250a      	movs	r5, #10
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d1cd      	bne.n	800375c <_puts_r+0x58>
 80037c0:	e7ca      	b.n	8003758 <_puts_r+0x54>
 80037c2:	0022      	movs	r2, r4
 80037c4:	0028      	movs	r0, r5
 80037c6:	f000 f839 	bl	800383c <__swbuf_r>
 80037ca:	1c43      	adds	r3, r0, #1
 80037cc:	d1e8      	bne.n	80037a0 <_puts_r+0x9c>
 80037ce:	e7c3      	b.n	8003758 <_puts_r+0x54>
 80037d0:	250a      	movs	r5, #10
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	6022      	str	r2, [r4, #0]
 80037d8:	701d      	strb	r5, [r3, #0]
 80037da:	e7bf      	b.n	800375c <_puts_r+0x58>
 80037dc:	08004bf8 	.word	0x08004bf8
 80037e0:	08004c18 	.word	0x08004c18
 80037e4:	08004bd8 	.word	0x08004bd8

080037e8 <puts>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <puts+0x10>)
 80037ec:	0001      	movs	r1, r0
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	f7ff ff88 	bl	8003704 <_puts_r>
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	2000001c 	.word	0x2000001c

080037fc <siprintf>:
 80037fc:	b40e      	push	{r1, r2, r3}
 80037fe:	b500      	push	{lr}
 8003800:	490b      	ldr	r1, [pc, #44]	; (8003830 <siprintf+0x34>)
 8003802:	b09c      	sub	sp, #112	; 0x70
 8003804:	ab1d      	add	r3, sp, #116	; 0x74
 8003806:	9002      	str	r0, [sp, #8]
 8003808:	9006      	str	r0, [sp, #24]
 800380a:	9107      	str	r1, [sp, #28]
 800380c:	9104      	str	r1, [sp, #16]
 800380e:	4809      	ldr	r0, [pc, #36]	; (8003834 <siprintf+0x38>)
 8003810:	4909      	ldr	r1, [pc, #36]	; (8003838 <siprintf+0x3c>)
 8003812:	cb04      	ldmia	r3!, {r2}
 8003814:	9105      	str	r1, [sp, #20]
 8003816:	6800      	ldr	r0, [r0, #0]
 8003818:	a902      	add	r1, sp, #8
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	f000 fc24 	bl	8004068 <_svfiprintf_r>
 8003820:	2300      	movs	r3, #0
 8003822:	9a02      	ldr	r2, [sp, #8]
 8003824:	7013      	strb	r3, [r2, #0]
 8003826:	b01c      	add	sp, #112	; 0x70
 8003828:	bc08      	pop	{r3}
 800382a:	b003      	add	sp, #12
 800382c:	4718      	bx	r3
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	7fffffff 	.word	0x7fffffff
 8003834:	2000001c 	.word	0x2000001c
 8003838:	ffff0208 	.word	0xffff0208

0800383c <__swbuf_r>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	0005      	movs	r5, r0
 8003840:	000e      	movs	r6, r1
 8003842:	0014      	movs	r4, r2
 8003844:	2800      	cmp	r0, #0
 8003846:	d004      	beq.n	8003852 <__swbuf_r+0x16>
 8003848:	6983      	ldr	r3, [r0, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <__swbuf_r+0x16>
 800384e:	f000 f9f1 	bl	8003c34 <__sinit>
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <__swbuf_r+0xa0>)
 8003854:	429c      	cmp	r4, r3
 8003856:	d12e      	bne.n	80038b6 <__swbuf_r+0x7a>
 8003858:	686c      	ldr	r4, [r5, #4]
 800385a:	69a3      	ldr	r3, [r4, #24]
 800385c:	60a3      	str	r3, [r4, #8]
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	071b      	lsls	r3, r3, #28
 8003862:	d532      	bpl.n	80038ca <__swbuf_r+0x8e>
 8003864:	6923      	ldr	r3, [r4, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02f      	beq.n	80038ca <__swbuf_r+0x8e>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	6922      	ldr	r2, [r4, #16]
 800386e:	b2f7      	uxtb	r7, r6
 8003870:	1a98      	subs	r0, r3, r2
 8003872:	6963      	ldr	r3, [r4, #20]
 8003874:	b2f6      	uxtb	r6, r6
 8003876:	4283      	cmp	r3, r0
 8003878:	dc05      	bgt.n	8003886 <__swbuf_r+0x4a>
 800387a:	0021      	movs	r1, r4
 800387c:	0028      	movs	r0, r5
 800387e:	f000 f937 	bl	8003af0 <_fflush_r>
 8003882:	2800      	cmp	r0, #0
 8003884:	d127      	bne.n	80038d6 <__swbuf_r+0x9a>
 8003886:	68a3      	ldr	r3, [r4, #8]
 8003888:	3001      	adds	r0, #1
 800388a:	3b01      	subs	r3, #1
 800388c:	60a3      	str	r3, [r4, #8]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	6022      	str	r2, [r4, #0]
 8003894:	701f      	strb	r7, [r3, #0]
 8003896:	6963      	ldr	r3, [r4, #20]
 8003898:	4283      	cmp	r3, r0
 800389a:	d004      	beq.n	80038a6 <__swbuf_r+0x6a>
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	07db      	lsls	r3, r3, #31
 80038a0:	d507      	bpl.n	80038b2 <__swbuf_r+0x76>
 80038a2:	2e0a      	cmp	r6, #10
 80038a4:	d105      	bne.n	80038b2 <__swbuf_r+0x76>
 80038a6:	0021      	movs	r1, r4
 80038a8:	0028      	movs	r0, r5
 80038aa:	f000 f921 	bl	8003af0 <_fflush_r>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d111      	bne.n	80038d6 <__swbuf_r+0x9a>
 80038b2:	0030      	movs	r0, r6
 80038b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <__swbuf_r+0xa4>)
 80038b8:	429c      	cmp	r4, r3
 80038ba:	d101      	bne.n	80038c0 <__swbuf_r+0x84>
 80038bc:	68ac      	ldr	r4, [r5, #8]
 80038be:	e7cc      	b.n	800385a <__swbuf_r+0x1e>
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <__swbuf_r+0xa8>)
 80038c2:	429c      	cmp	r4, r3
 80038c4:	d1c9      	bne.n	800385a <__swbuf_r+0x1e>
 80038c6:	68ec      	ldr	r4, [r5, #12]
 80038c8:	e7c7      	b.n	800385a <__swbuf_r+0x1e>
 80038ca:	0021      	movs	r1, r4
 80038cc:	0028      	movs	r0, r5
 80038ce:	f000 f80b 	bl	80038e8 <__swsetup_r>
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d0c9      	beq.n	800386a <__swbuf_r+0x2e>
 80038d6:	2601      	movs	r6, #1
 80038d8:	4276      	negs	r6, r6
 80038da:	e7ea      	b.n	80038b2 <__swbuf_r+0x76>
 80038dc:	08004bf8 	.word	0x08004bf8
 80038e0:	08004c18 	.word	0x08004c18
 80038e4:	08004bd8 	.word	0x08004bd8

080038e8 <__swsetup_r>:
 80038e8:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <__swsetup_r+0xe0>)
 80038ea:	b570      	push	{r4, r5, r6, lr}
 80038ec:	681d      	ldr	r5, [r3, #0]
 80038ee:	0006      	movs	r6, r0
 80038f0:	000c      	movs	r4, r1
 80038f2:	2d00      	cmp	r5, #0
 80038f4:	d005      	beq.n	8003902 <__swsetup_r+0x1a>
 80038f6:	69ab      	ldr	r3, [r5, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <__swsetup_r+0x1a>
 80038fc:	0028      	movs	r0, r5
 80038fe:	f000 f999 	bl	8003c34 <__sinit>
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <__swsetup_r+0xe4>)
 8003904:	429c      	cmp	r4, r3
 8003906:	d10f      	bne.n	8003928 <__swsetup_r+0x40>
 8003908:	686c      	ldr	r4, [r5, #4]
 800390a:	230c      	movs	r3, #12
 800390c:	5ee2      	ldrsh	r2, [r4, r3]
 800390e:	b293      	uxth	r3, r2
 8003910:	0711      	lsls	r1, r2, #28
 8003912:	d42d      	bmi.n	8003970 <__swsetup_r+0x88>
 8003914:	06d9      	lsls	r1, r3, #27
 8003916:	d411      	bmi.n	800393c <__swsetup_r+0x54>
 8003918:	2309      	movs	r3, #9
 800391a:	2001      	movs	r0, #1
 800391c:	6033      	str	r3, [r6, #0]
 800391e:	3337      	adds	r3, #55	; 0x37
 8003920:	4313      	orrs	r3, r2
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	4240      	negs	r0, r0
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <__swsetup_r+0xe8>)
 800392a:	429c      	cmp	r4, r3
 800392c:	d101      	bne.n	8003932 <__swsetup_r+0x4a>
 800392e:	68ac      	ldr	r4, [r5, #8]
 8003930:	e7eb      	b.n	800390a <__swsetup_r+0x22>
 8003932:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <__swsetup_r+0xec>)
 8003934:	429c      	cmp	r4, r3
 8003936:	d1e8      	bne.n	800390a <__swsetup_r+0x22>
 8003938:	68ec      	ldr	r4, [r5, #12]
 800393a:	e7e6      	b.n	800390a <__swsetup_r+0x22>
 800393c:	075b      	lsls	r3, r3, #29
 800393e:	d513      	bpl.n	8003968 <__swsetup_r+0x80>
 8003940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003942:	2900      	cmp	r1, #0
 8003944:	d008      	beq.n	8003958 <__swsetup_r+0x70>
 8003946:	0023      	movs	r3, r4
 8003948:	3344      	adds	r3, #68	; 0x44
 800394a:	4299      	cmp	r1, r3
 800394c:	d002      	beq.n	8003954 <__swsetup_r+0x6c>
 800394e:	0030      	movs	r0, r6
 8003950:	f000 fa80 	bl	8003e54 <_free_r>
 8003954:	2300      	movs	r3, #0
 8003956:	6363      	str	r3, [r4, #52]	; 0x34
 8003958:	2224      	movs	r2, #36	; 0x24
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	4393      	bics	r3, r2
 800395e:	81a3      	strh	r3, [r4, #12]
 8003960:	2300      	movs	r3, #0
 8003962:	6063      	str	r3, [r4, #4]
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	6023      	str	r3, [r4, #0]
 8003968:	2308      	movs	r3, #8
 800396a:	89a2      	ldrh	r2, [r4, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	81a3      	strh	r3, [r4, #12]
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <__swsetup_r+0xa6>
 8003976:	21a0      	movs	r1, #160	; 0xa0
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	0089      	lsls	r1, r1, #2
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	400b      	ands	r3, r1
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <__swsetup_r+0xa6>
 8003986:	0021      	movs	r1, r4
 8003988:	0030      	movs	r0, r6
 800398a:	f000 fa1f 	bl	8003dcc <__smakebuf_r>
 800398e:	220c      	movs	r2, #12
 8003990:	5ea3      	ldrsh	r3, [r4, r2]
 8003992:	2001      	movs	r0, #1
 8003994:	001a      	movs	r2, r3
 8003996:	b299      	uxth	r1, r3
 8003998:	4002      	ands	r2, r0
 800399a:	4203      	tst	r3, r0
 800399c:	d00f      	beq.n	80039be <__swsetup_r+0xd6>
 800399e:	2200      	movs	r2, #0
 80039a0:	60a2      	str	r2, [r4, #8]
 80039a2:	6962      	ldr	r2, [r4, #20]
 80039a4:	4252      	negs	r2, r2
 80039a6:	61a2      	str	r2, [r4, #24]
 80039a8:	2000      	movs	r0, #0
 80039aa:	6922      	ldr	r2, [r4, #16]
 80039ac:	4282      	cmp	r2, r0
 80039ae:	d1ba      	bne.n	8003926 <__swsetup_r+0x3e>
 80039b0:	060a      	lsls	r2, r1, #24
 80039b2:	d5b8      	bpl.n	8003926 <__swsetup_r+0x3e>
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	4313      	orrs	r3, r2
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	3801      	subs	r0, #1
 80039bc:	e7b3      	b.n	8003926 <__swsetup_r+0x3e>
 80039be:	0788      	lsls	r0, r1, #30
 80039c0:	d400      	bmi.n	80039c4 <__swsetup_r+0xdc>
 80039c2:	6962      	ldr	r2, [r4, #20]
 80039c4:	60a2      	str	r2, [r4, #8]
 80039c6:	e7ef      	b.n	80039a8 <__swsetup_r+0xc0>
 80039c8:	2000001c 	.word	0x2000001c
 80039cc:	08004bf8 	.word	0x08004bf8
 80039d0:	08004c18 	.word	0x08004c18
 80039d4:	08004bd8 	.word	0x08004bd8

080039d8 <__sflush_r>:
 80039d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039da:	898b      	ldrh	r3, [r1, #12]
 80039dc:	0005      	movs	r5, r0
 80039de:	000c      	movs	r4, r1
 80039e0:	071a      	lsls	r2, r3, #28
 80039e2:	d45f      	bmi.n	8003aa4 <__sflush_r+0xcc>
 80039e4:	684a      	ldr	r2, [r1, #4]
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	dc04      	bgt.n	80039f4 <__sflush_r+0x1c>
 80039ea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	dc01      	bgt.n	80039f4 <__sflush_r+0x1c>
 80039f0:	2000      	movs	r0, #0
 80039f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80039f6:	2f00      	cmp	r7, #0
 80039f8:	d0fa      	beq.n	80039f0 <__sflush_r+0x18>
 80039fa:	2200      	movs	r2, #0
 80039fc:	2180      	movs	r1, #128	; 0x80
 80039fe:	682e      	ldr	r6, [r5, #0]
 8003a00:	602a      	str	r2, [r5, #0]
 8003a02:	001a      	movs	r2, r3
 8003a04:	0149      	lsls	r1, r1, #5
 8003a06:	400a      	ands	r2, r1
 8003a08:	420b      	tst	r3, r1
 8003a0a:	d034      	beq.n	8003a76 <__sflush_r+0x9e>
 8003a0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a0e:	89a3      	ldrh	r3, [r4, #12]
 8003a10:	075b      	lsls	r3, r3, #29
 8003a12:	d506      	bpl.n	8003a22 <__sflush_r+0x4a>
 8003a14:	6863      	ldr	r3, [r4, #4]
 8003a16:	1ac0      	subs	r0, r0, r3
 8003a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <__sflush_r+0x4a>
 8003a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a20:	1ac0      	subs	r0, r0, r3
 8003a22:	0002      	movs	r2, r0
 8003a24:	6a21      	ldr	r1, [r4, #32]
 8003a26:	2300      	movs	r3, #0
 8003a28:	0028      	movs	r0, r5
 8003a2a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a2c:	47b8      	blx	r7
 8003a2e:	89a1      	ldrh	r1, [r4, #12]
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d106      	bne.n	8003a42 <__sflush_r+0x6a>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	2b1d      	cmp	r3, #29
 8003a38:	d831      	bhi.n	8003a9e <__sflush_r+0xc6>
 8003a3a:	4a2c      	ldr	r2, [pc, #176]	; (8003aec <__sflush_r+0x114>)
 8003a3c:	40da      	lsrs	r2, r3
 8003a3e:	07d3      	lsls	r3, r2, #31
 8003a40:	d52d      	bpl.n	8003a9e <__sflush_r+0xc6>
 8003a42:	2300      	movs	r3, #0
 8003a44:	6063      	str	r3, [r4, #4]
 8003a46:	6923      	ldr	r3, [r4, #16]
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	04cb      	lsls	r3, r1, #19
 8003a4c:	d505      	bpl.n	8003a5a <__sflush_r+0x82>
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	d102      	bne.n	8003a58 <__sflush_r+0x80>
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d100      	bne.n	8003a5a <__sflush_r+0x82>
 8003a58:	6560      	str	r0, [r4, #84]	; 0x54
 8003a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a5c:	602e      	str	r6, [r5, #0]
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	d0c6      	beq.n	80039f0 <__sflush_r+0x18>
 8003a62:	0023      	movs	r3, r4
 8003a64:	3344      	adds	r3, #68	; 0x44
 8003a66:	4299      	cmp	r1, r3
 8003a68:	d002      	beq.n	8003a70 <__sflush_r+0x98>
 8003a6a:	0028      	movs	r0, r5
 8003a6c:	f000 f9f2 	bl	8003e54 <_free_r>
 8003a70:	2000      	movs	r0, #0
 8003a72:	6360      	str	r0, [r4, #52]	; 0x34
 8003a74:	e7bd      	b.n	80039f2 <__sflush_r+0x1a>
 8003a76:	2301      	movs	r3, #1
 8003a78:	0028      	movs	r0, r5
 8003a7a:	6a21      	ldr	r1, [r4, #32]
 8003a7c:	47b8      	blx	r7
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	d1c5      	bne.n	8003a0e <__sflush_r+0x36>
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0c2      	beq.n	8003a0e <__sflush_r+0x36>
 8003a88:	2b1d      	cmp	r3, #29
 8003a8a:	d001      	beq.n	8003a90 <__sflush_r+0xb8>
 8003a8c:	2b16      	cmp	r3, #22
 8003a8e:	d101      	bne.n	8003a94 <__sflush_r+0xbc>
 8003a90:	602e      	str	r6, [r5, #0]
 8003a92:	e7ad      	b.n	80039f0 <__sflush_r+0x18>
 8003a94:	2340      	movs	r3, #64	; 0x40
 8003a96:	89a2      	ldrh	r2, [r4, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	81a3      	strh	r3, [r4, #12]
 8003a9c:	e7a9      	b.n	80039f2 <__sflush_r+0x1a>
 8003a9e:	2340      	movs	r3, #64	; 0x40
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	e7fa      	b.n	8003a9a <__sflush_r+0xc2>
 8003aa4:	690f      	ldr	r7, [r1, #16]
 8003aa6:	2f00      	cmp	r7, #0
 8003aa8:	d0a2      	beq.n	80039f0 <__sflush_r+0x18>
 8003aaa:	680a      	ldr	r2, [r1, #0]
 8003aac:	600f      	str	r7, [r1, #0]
 8003aae:	1bd2      	subs	r2, r2, r7
 8003ab0:	9201      	str	r2, [sp, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	079b      	lsls	r3, r3, #30
 8003ab6:	d100      	bne.n	8003aba <__sflush_r+0xe2>
 8003ab8:	694a      	ldr	r2, [r1, #20]
 8003aba:	60a2      	str	r2, [r4, #8]
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	dc00      	bgt.n	8003ac4 <__sflush_r+0xec>
 8003ac2:	e795      	b.n	80039f0 <__sflush_r+0x18>
 8003ac4:	003a      	movs	r2, r7
 8003ac6:	0028      	movs	r0, r5
 8003ac8:	9b01      	ldr	r3, [sp, #4]
 8003aca:	6a21      	ldr	r1, [r4, #32]
 8003acc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ace:	47b0      	blx	r6
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	dc06      	bgt.n	8003ae2 <__sflush_r+0x10a>
 8003ad4:	2340      	movs	r3, #64	; 0x40
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	89a2      	ldrh	r2, [r4, #12]
 8003ada:	4240      	negs	r0, r0
 8003adc:	4313      	orrs	r3, r2
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	e787      	b.n	80039f2 <__sflush_r+0x1a>
 8003ae2:	9b01      	ldr	r3, [sp, #4]
 8003ae4:	183f      	adds	r7, r7, r0
 8003ae6:	1a1b      	subs	r3, r3, r0
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	e7e7      	b.n	8003abc <__sflush_r+0xe4>
 8003aec:	20400001 	.word	0x20400001

08003af0 <_fflush_r>:
 8003af0:	690b      	ldr	r3, [r1, #16]
 8003af2:	b570      	push	{r4, r5, r6, lr}
 8003af4:	0005      	movs	r5, r0
 8003af6:	000c      	movs	r4, r1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <_fflush_r+0x12>
 8003afc:	2500      	movs	r5, #0
 8003afe:	0028      	movs	r0, r5
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d004      	beq.n	8003b10 <_fflush_r+0x20>
 8003b06:	6983      	ldr	r3, [r0, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <_fflush_r+0x20>
 8003b0c:	f000 f892 	bl	8003c34 <__sinit>
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <_fflush_r+0x74>)
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d11b      	bne.n	8003b4e <_fflush_r+0x5e>
 8003b16:	686c      	ldr	r4, [r5, #4]
 8003b18:	220c      	movs	r2, #12
 8003b1a:	5ea3      	ldrsh	r3, [r4, r2]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ed      	beq.n	8003afc <_fflush_r+0xc>
 8003b20:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b22:	07d2      	lsls	r2, r2, #31
 8003b24:	d404      	bmi.n	8003b30 <_fflush_r+0x40>
 8003b26:	059b      	lsls	r3, r3, #22
 8003b28:	d402      	bmi.n	8003b30 <_fflush_r+0x40>
 8003b2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b2c:	f000 f923 	bl	8003d76 <__retarget_lock_acquire_recursive>
 8003b30:	0028      	movs	r0, r5
 8003b32:	0021      	movs	r1, r4
 8003b34:	f7ff ff50 	bl	80039d8 <__sflush_r>
 8003b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b3a:	0005      	movs	r5, r0
 8003b3c:	07db      	lsls	r3, r3, #31
 8003b3e:	d4de      	bmi.n	8003afe <_fflush_r+0xe>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	059b      	lsls	r3, r3, #22
 8003b44:	d4db      	bmi.n	8003afe <_fflush_r+0xe>
 8003b46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b48:	f000 f916 	bl	8003d78 <__retarget_lock_release_recursive>
 8003b4c:	e7d7      	b.n	8003afe <_fflush_r+0xe>
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <_fflush_r+0x78>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	d101      	bne.n	8003b58 <_fflush_r+0x68>
 8003b54:	68ac      	ldr	r4, [r5, #8]
 8003b56:	e7df      	b.n	8003b18 <_fflush_r+0x28>
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <_fflush_r+0x7c>)
 8003b5a:	429c      	cmp	r4, r3
 8003b5c:	d1dc      	bne.n	8003b18 <_fflush_r+0x28>
 8003b5e:	68ec      	ldr	r4, [r5, #12]
 8003b60:	e7da      	b.n	8003b18 <_fflush_r+0x28>
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	08004bf8 	.word	0x08004bf8
 8003b68:	08004c18 	.word	0x08004c18
 8003b6c:	08004bd8 	.word	0x08004bd8

08003b70 <std>:
 8003b70:	2300      	movs	r3, #0
 8003b72:	b510      	push	{r4, lr}
 8003b74:	0004      	movs	r4, r0
 8003b76:	6003      	str	r3, [r0, #0]
 8003b78:	6043      	str	r3, [r0, #4]
 8003b7a:	6083      	str	r3, [r0, #8]
 8003b7c:	8181      	strh	r1, [r0, #12]
 8003b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b80:	0019      	movs	r1, r3
 8003b82:	81c2      	strh	r2, [r0, #14]
 8003b84:	6103      	str	r3, [r0, #16]
 8003b86:	6143      	str	r3, [r0, #20]
 8003b88:	6183      	str	r3, [r0, #24]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	305c      	adds	r0, #92	; 0x5c
 8003b8e:	f7ff fd82 	bl	8003696 <memset>
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <std+0x38>)
 8003b94:	6263      	str	r3, [r4, #36]	; 0x24
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <std+0x3c>)
 8003b98:	6224      	str	r4, [r4, #32]
 8003b9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <std+0x40>)
 8003b9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <std+0x44>)
 8003ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8003ba4:	bd10      	pop	{r4, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	080048e9 	.word	0x080048e9
 8003bac:	08004911 	.word	0x08004911
 8003bb0:	08004949 	.word	0x08004949
 8003bb4:	08004975 	.word	0x08004975

08003bb8 <_cleanup_r>:
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	4902      	ldr	r1, [pc, #8]	; (8003bc4 <_cleanup_r+0xc>)
 8003bbc:	f000 f8ba 	bl	8003d34 <_fwalk_reent>
 8003bc0:	bd10      	pop	{r4, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	08003af1 	.word	0x08003af1

08003bc8 <__sfmoreglue>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	2568      	movs	r5, #104	; 0x68
 8003bcc:	1e4a      	subs	r2, r1, #1
 8003bce:	4355      	muls	r5, r2
 8003bd0:	000e      	movs	r6, r1
 8003bd2:	0029      	movs	r1, r5
 8003bd4:	3174      	adds	r1, #116	; 0x74
 8003bd6:	f000 f987 	bl	8003ee8 <_malloc_r>
 8003bda:	1e04      	subs	r4, r0, #0
 8003bdc:	d008      	beq.n	8003bf0 <__sfmoreglue+0x28>
 8003bde:	2100      	movs	r1, #0
 8003be0:	002a      	movs	r2, r5
 8003be2:	6001      	str	r1, [r0, #0]
 8003be4:	6046      	str	r6, [r0, #4]
 8003be6:	300c      	adds	r0, #12
 8003be8:	60a0      	str	r0, [r4, #8]
 8003bea:	3268      	adds	r2, #104	; 0x68
 8003bec:	f7ff fd53 	bl	8003696 <memset>
 8003bf0:	0020      	movs	r0, r4
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}

08003bf4 <__sfp_lock_acquire>:
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	4802      	ldr	r0, [pc, #8]	; (8003c00 <__sfp_lock_acquire+0xc>)
 8003bf8:	f000 f8bd 	bl	8003d76 <__retarget_lock_acquire_recursive>
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	20000c44 	.word	0x20000c44

08003c04 <__sfp_lock_release>:
 8003c04:	b510      	push	{r4, lr}
 8003c06:	4802      	ldr	r0, [pc, #8]	; (8003c10 <__sfp_lock_release+0xc>)
 8003c08:	f000 f8b6 	bl	8003d78 <__retarget_lock_release_recursive>
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	20000c44 	.word	0x20000c44

08003c14 <__sinit_lock_acquire>:
 8003c14:	b510      	push	{r4, lr}
 8003c16:	4802      	ldr	r0, [pc, #8]	; (8003c20 <__sinit_lock_acquire+0xc>)
 8003c18:	f000 f8ad 	bl	8003d76 <__retarget_lock_acquire_recursive>
 8003c1c:	bd10      	pop	{r4, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	20000c3f 	.word	0x20000c3f

08003c24 <__sinit_lock_release>:
 8003c24:	b510      	push	{r4, lr}
 8003c26:	4802      	ldr	r0, [pc, #8]	; (8003c30 <__sinit_lock_release+0xc>)
 8003c28:	f000 f8a6 	bl	8003d78 <__retarget_lock_release_recursive>
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000c3f 	.word	0x20000c3f

08003c34 <__sinit>:
 8003c34:	b513      	push	{r0, r1, r4, lr}
 8003c36:	0004      	movs	r4, r0
 8003c38:	f7ff ffec 	bl	8003c14 <__sinit_lock_acquire>
 8003c3c:	69a3      	ldr	r3, [r4, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <__sinit+0x14>
 8003c42:	f7ff ffef 	bl	8003c24 <__sinit_lock_release>
 8003c46:	bd13      	pop	{r0, r1, r4, pc}
 8003c48:	64a3      	str	r3, [r4, #72]	; 0x48
 8003c4a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <__sinit+0x68>)
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <__sinit+0x6c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	d101      	bne.n	8003c60 <__sinit+0x2c>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	61a3      	str	r3, [r4, #24]
 8003c60:	0020      	movs	r0, r4
 8003c62:	f000 f81f 	bl	8003ca4 <__sfp>
 8003c66:	6060      	str	r0, [r4, #4]
 8003c68:	0020      	movs	r0, r4
 8003c6a:	f000 f81b 	bl	8003ca4 <__sfp>
 8003c6e:	60a0      	str	r0, [r4, #8]
 8003c70:	0020      	movs	r0, r4
 8003c72:	f000 f817 	bl	8003ca4 <__sfp>
 8003c76:	2200      	movs	r2, #0
 8003c78:	2104      	movs	r1, #4
 8003c7a:	60e0      	str	r0, [r4, #12]
 8003c7c:	6860      	ldr	r0, [r4, #4]
 8003c7e:	f7ff ff77 	bl	8003b70 <std>
 8003c82:	2201      	movs	r2, #1
 8003c84:	2109      	movs	r1, #9
 8003c86:	68a0      	ldr	r0, [r4, #8]
 8003c88:	f7ff ff72 	bl	8003b70 <std>
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	2112      	movs	r1, #18
 8003c90:	68e0      	ldr	r0, [r4, #12]
 8003c92:	f7ff ff6d 	bl	8003b70 <std>
 8003c96:	2301      	movs	r3, #1
 8003c98:	61a3      	str	r3, [r4, #24]
 8003c9a:	e7d2      	b.n	8003c42 <__sinit+0xe>
 8003c9c:	08004bd4 	.word	0x08004bd4
 8003ca0:	08003bb9 	.word	0x08003bb9

08003ca4 <__sfp>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	0007      	movs	r7, r0
 8003ca8:	f7ff ffa4 	bl	8003bf4 <__sfp_lock_acquire>
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <__sfp+0x88>)
 8003cae:	681e      	ldr	r6, [r3, #0]
 8003cb0:	69b3      	ldr	r3, [r6, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <__sfp+0x18>
 8003cb6:	0030      	movs	r0, r6
 8003cb8:	f7ff ffbc 	bl	8003c34 <__sinit>
 8003cbc:	3648      	adds	r6, #72	; 0x48
 8003cbe:	68b4      	ldr	r4, [r6, #8]
 8003cc0:	6873      	ldr	r3, [r6, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	d504      	bpl.n	8003cd0 <__sfp+0x2c>
 8003cc6:	6833      	ldr	r3, [r6, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d022      	beq.n	8003d12 <__sfp+0x6e>
 8003ccc:	6836      	ldr	r6, [r6, #0]
 8003cce:	e7f6      	b.n	8003cbe <__sfp+0x1a>
 8003cd0:	220c      	movs	r2, #12
 8003cd2:	5ea5      	ldrsh	r5, [r4, r2]
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	d11a      	bne.n	8003d0e <__sfp+0x6a>
 8003cd8:	0020      	movs	r0, r4
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <__sfp+0x8c>)
 8003cdc:	3058      	adds	r0, #88	; 0x58
 8003cde:	60e3      	str	r3, [r4, #12]
 8003ce0:	6665      	str	r5, [r4, #100]	; 0x64
 8003ce2:	f000 f847 	bl	8003d74 <__retarget_lock_init_recursive>
 8003ce6:	f7ff ff8d 	bl	8003c04 <__sfp_lock_release>
 8003cea:	0020      	movs	r0, r4
 8003cec:	2208      	movs	r2, #8
 8003cee:	0029      	movs	r1, r5
 8003cf0:	6025      	str	r5, [r4, #0]
 8003cf2:	60a5      	str	r5, [r4, #8]
 8003cf4:	6065      	str	r5, [r4, #4]
 8003cf6:	6125      	str	r5, [r4, #16]
 8003cf8:	6165      	str	r5, [r4, #20]
 8003cfa:	61a5      	str	r5, [r4, #24]
 8003cfc:	305c      	adds	r0, #92	; 0x5c
 8003cfe:	f7ff fcca 	bl	8003696 <memset>
 8003d02:	6365      	str	r5, [r4, #52]	; 0x34
 8003d04:	63a5      	str	r5, [r4, #56]	; 0x38
 8003d06:	64a5      	str	r5, [r4, #72]	; 0x48
 8003d08:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d0e:	3468      	adds	r4, #104	; 0x68
 8003d10:	e7d7      	b.n	8003cc2 <__sfp+0x1e>
 8003d12:	2104      	movs	r1, #4
 8003d14:	0038      	movs	r0, r7
 8003d16:	f7ff ff57 	bl	8003bc8 <__sfmoreglue>
 8003d1a:	1e04      	subs	r4, r0, #0
 8003d1c:	6030      	str	r0, [r6, #0]
 8003d1e:	d1d5      	bne.n	8003ccc <__sfp+0x28>
 8003d20:	f7ff ff70 	bl	8003c04 <__sfp_lock_release>
 8003d24:	230c      	movs	r3, #12
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	e7ef      	b.n	8003d0a <__sfp+0x66>
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	08004bd4 	.word	0x08004bd4
 8003d30:	ffff0001 	.word	0xffff0001

08003d34 <_fwalk_reent>:
 8003d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d36:	0004      	movs	r4, r0
 8003d38:	0006      	movs	r6, r0
 8003d3a:	2700      	movs	r7, #0
 8003d3c:	9101      	str	r1, [sp, #4]
 8003d3e:	3448      	adds	r4, #72	; 0x48
 8003d40:	6863      	ldr	r3, [r4, #4]
 8003d42:	68a5      	ldr	r5, [r4, #8]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	9b00      	ldr	r3, [sp, #0]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	d504      	bpl.n	8003d58 <_fwalk_reent+0x24>
 8003d4e:	6824      	ldr	r4, [r4, #0]
 8003d50:	2c00      	cmp	r4, #0
 8003d52:	d1f5      	bne.n	8003d40 <_fwalk_reent+0xc>
 8003d54:	0038      	movs	r0, r7
 8003d56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d58:	89ab      	ldrh	r3, [r5, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d908      	bls.n	8003d70 <_fwalk_reent+0x3c>
 8003d5e:	220e      	movs	r2, #14
 8003d60:	5eab      	ldrsh	r3, [r5, r2]
 8003d62:	3301      	adds	r3, #1
 8003d64:	d004      	beq.n	8003d70 <_fwalk_reent+0x3c>
 8003d66:	0029      	movs	r1, r5
 8003d68:	0030      	movs	r0, r6
 8003d6a:	9b01      	ldr	r3, [sp, #4]
 8003d6c:	4798      	blx	r3
 8003d6e:	4307      	orrs	r7, r0
 8003d70:	3568      	adds	r5, #104	; 0x68
 8003d72:	e7e8      	b.n	8003d46 <_fwalk_reent+0x12>

08003d74 <__retarget_lock_init_recursive>:
 8003d74:	4770      	bx	lr

08003d76 <__retarget_lock_acquire_recursive>:
 8003d76:	4770      	bx	lr

08003d78 <__retarget_lock_release_recursive>:
 8003d78:	4770      	bx	lr
	...

08003d7c <__swhatbuf_r>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	000e      	movs	r6, r1
 8003d80:	001d      	movs	r5, r3
 8003d82:	230e      	movs	r3, #14
 8003d84:	5ec9      	ldrsh	r1, [r1, r3]
 8003d86:	0014      	movs	r4, r2
 8003d88:	b096      	sub	sp, #88	; 0x58
 8003d8a:	2900      	cmp	r1, #0
 8003d8c:	da07      	bge.n	8003d9e <__swhatbuf_r+0x22>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	89b3      	ldrh	r3, [r6, #12]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	d411      	bmi.n	8003dbc <__swhatbuf_r+0x40>
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	e00f      	b.n	8003dbe <__swhatbuf_r+0x42>
 8003d9e:	466a      	mov	r2, sp
 8003da0:	f000 fe14 	bl	80049cc <_fstat_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	dbf2      	blt.n	8003d8e <__swhatbuf_r+0x12>
 8003da8:	23f0      	movs	r3, #240	; 0xf0
 8003daa:	9901      	ldr	r1, [sp, #4]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	4019      	ands	r1, r3
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <__swhatbuf_r+0x4c>)
 8003db2:	18c9      	adds	r1, r1, r3
 8003db4:	424b      	negs	r3, r1
 8003db6:	4159      	adcs	r1, r3
 8003db8:	6029      	str	r1, [r5, #0]
 8003dba:	e7ed      	b.n	8003d98 <__swhatbuf_r+0x1c>
 8003dbc:	2340      	movs	r3, #64	; 0x40
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	b016      	add	sp, #88	; 0x58
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	ffffe000 	.word	0xffffe000

08003dcc <__smakebuf_r>:
 8003dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dce:	2602      	movs	r6, #2
 8003dd0:	898b      	ldrh	r3, [r1, #12]
 8003dd2:	0005      	movs	r5, r0
 8003dd4:	000c      	movs	r4, r1
 8003dd6:	4233      	tst	r3, r6
 8003dd8:	d006      	beq.n	8003de8 <__smakebuf_r+0x1c>
 8003dda:	0023      	movs	r3, r4
 8003ddc:	3347      	adds	r3, #71	; 0x47
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	6123      	str	r3, [r4, #16]
 8003de2:	2301      	movs	r3, #1
 8003de4:	6163      	str	r3, [r4, #20]
 8003de6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003de8:	466a      	mov	r2, sp
 8003dea:	ab01      	add	r3, sp, #4
 8003dec:	f7ff ffc6 	bl	8003d7c <__swhatbuf_r>
 8003df0:	9900      	ldr	r1, [sp, #0]
 8003df2:	0007      	movs	r7, r0
 8003df4:	0028      	movs	r0, r5
 8003df6:	f000 f877 	bl	8003ee8 <_malloc_r>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d108      	bne.n	8003e10 <__smakebuf_r+0x44>
 8003dfe:	220c      	movs	r2, #12
 8003e00:	5ea3      	ldrsh	r3, [r4, r2]
 8003e02:	059a      	lsls	r2, r3, #22
 8003e04:	d4ef      	bmi.n	8003de6 <__smakebuf_r+0x1a>
 8003e06:	2203      	movs	r2, #3
 8003e08:	4393      	bics	r3, r2
 8003e0a:	431e      	orrs	r6, r3
 8003e0c:	81a6      	strh	r6, [r4, #12]
 8003e0e:	e7e4      	b.n	8003dda <__smakebuf_r+0xe>
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <__smakebuf_r+0x84>)
 8003e12:	62ab      	str	r3, [r5, #40]	; 0x28
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	89a2      	ldrh	r2, [r4, #12]
 8003e18:	6020      	str	r0, [r4, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	81a3      	strh	r3, [r4, #12]
 8003e1e:	9b00      	ldr	r3, [sp, #0]
 8003e20:	6120      	str	r0, [r4, #16]
 8003e22:	6163      	str	r3, [r4, #20]
 8003e24:	9b01      	ldr	r3, [sp, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <__smakebuf_r+0x7a>
 8003e2a:	0028      	movs	r0, r5
 8003e2c:	230e      	movs	r3, #14
 8003e2e:	5ee1      	ldrsh	r1, [r4, r3]
 8003e30:	f000 fdde 	bl	80049f0 <_isatty_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d006      	beq.n	8003e46 <__smakebuf_r+0x7a>
 8003e38:	2203      	movs	r2, #3
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	001a      	movs	r2, r3
 8003e40:	2301      	movs	r3, #1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	81a3      	strh	r3, [r4, #12]
 8003e46:	89a0      	ldrh	r0, [r4, #12]
 8003e48:	4307      	orrs	r7, r0
 8003e4a:	81a7      	strh	r7, [r4, #12]
 8003e4c:	e7cb      	b.n	8003de6 <__smakebuf_r+0x1a>
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	08003bb9 	.word	0x08003bb9

08003e54 <_free_r>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	0005      	movs	r5, r0
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d010      	beq.n	8003e7e <_free_r+0x2a>
 8003e5c:	1f0c      	subs	r4, r1, #4
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	da00      	bge.n	8003e66 <_free_r+0x12>
 8003e64:	18e4      	adds	r4, r4, r3
 8003e66:	0028      	movs	r0, r5
 8003e68:	f000 fe06 	bl	8004a78 <__malloc_lock>
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <_free_r+0x90>)
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <_free_r+0x2c>
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	6014      	str	r4, [r2, #0]
 8003e78:	0028      	movs	r0, r5
 8003e7a:	f000 fe05 	bl	8004a88 <__malloc_unlock>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	42a3      	cmp	r3, r4
 8003e82:	d908      	bls.n	8003e96 <_free_r+0x42>
 8003e84:	6821      	ldr	r1, [r4, #0]
 8003e86:	1860      	adds	r0, r4, r1
 8003e88:	4283      	cmp	r3, r0
 8003e8a:	d1f3      	bne.n	8003e74 <_free_r+0x20>
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	1841      	adds	r1, r0, r1
 8003e92:	6021      	str	r1, [r4, #0]
 8003e94:	e7ee      	b.n	8003e74 <_free_r+0x20>
 8003e96:	001a      	movs	r2, r3
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <_free_r+0x4e>
 8003e9e:	42a3      	cmp	r3, r4
 8003ea0:	d9f9      	bls.n	8003e96 <_free_r+0x42>
 8003ea2:	6811      	ldr	r1, [r2, #0]
 8003ea4:	1850      	adds	r0, r2, r1
 8003ea6:	42a0      	cmp	r0, r4
 8003ea8:	d10b      	bne.n	8003ec2 <_free_r+0x6e>
 8003eaa:	6820      	ldr	r0, [r4, #0]
 8003eac:	1809      	adds	r1, r1, r0
 8003eae:	1850      	adds	r0, r2, r1
 8003eb0:	6011      	str	r1, [r2, #0]
 8003eb2:	4283      	cmp	r3, r0
 8003eb4:	d1e0      	bne.n	8003e78 <_free_r+0x24>
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	1841      	adds	r1, r0, r1
 8003ebc:	6011      	str	r1, [r2, #0]
 8003ebe:	6053      	str	r3, [r2, #4]
 8003ec0:	e7da      	b.n	8003e78 <_free_r+0x24>
 8003ec2:	42a0      	cmp	r0, r4
 8003ec4:	d902      	bls.n	8003ecc <_free_r+0x78>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	e7d5      	b.n	8003e78 <_free_r+0x24>
 8003ecc:	6821      	ldr	r1, [r4, #0]
 8003ece:	1860      	adds	r0, r4, r1
 8003ed0:	4283      	cmp	r3, r0
 8003ed2:	d103      	bne.n	8003edc <_free_r+0x88>
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	1841      	adds	r1, r0, r1
 8003eda:	6021      	str	r1, [r4, #0]
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6054      	str	r4, [r2, #4]
 8003ee0:	e7ca      	b.n	8003e78 <_free_r+0x24>
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	200001b0 	.word	0x200001b0

08003ee8 <_malloc_r>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	2303      	movs	r3, #3
 8003eec:	1ccd      	adds	r5, r1, #3
 8003eee:	439d      	bics	r5, r3
 8003ef0:	3508      	adds	r5, #8
 8003ef2:	0006      	movs	r6, r0
 8003ef4:	2d0c      	cmp	r5, #12
 8003ef6:	d21f      	bcs.n	8003f38 <_malloc_r+0x50>
 8003ef8:	250c      	movs	r5, #12
 8003efa:	42a9      	cmp	r1, r5
 8003efc:	d81e      	bhi.n	8003f3c <_malloc_r+0x54>
 8003efe:	0030      	movs	r0, r6
 8003f00:	f000 fdba 	bl	8004a78 <__malloc_lock>
 8003f04:	4925      	ldr	r1, [pc, #148]	; (8003f9c <_malloc_r+0xb4>)
 8003f06:	680a      	ldr	r2, [r1, #0]
 8003f08:	0014      	movs	r4, r2
 8003f0a:	2c00      	cmp	r4, #0
 8003f0c:	d11a      	bne.n	8003f44 <_malloc_r+0x5c>
 8003f0e:	4f24      	ldr	r7, [pc, #144]	; (8003fa0 <_malloc_r+0xb8>)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <_malloc_r+0x38>
 8003f16:	0021      	movs	r1, r4
 8003f18:	0030      	movs	r0, r6
 8003f1a:	f000 fcd3 	bl	80048c4 <_sbrk_r>
 8003f1e:	6038      	str	r0, [r7, #0]
 8003f20:	0029      	movs	r1, r5
 8003f22:	0030      	movs	r0, r6
 8003f24:	f000 fcce 	bl	80048c4 <_sbrk_r>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d12b      	bne.n	8003f84 <_malloc_r+0x9c>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	0030      	movs	r0, r6
 8003f30:	6033      	str	r3, [r6, #0]
 8003f32:	f000 fda9 	bl	8004a88 <__malloc_unlock>
 8003f36:	e003      	b.n	8003f40 <_malloc_r+0x58>
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	dade      	bge.n	8003efa <_malloc_r+0x12>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	6033      	str	r3, [r6, #0]
 8003f40:	2000      	movs	r0, #0
 8003f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	1b5b      	subs	r3, r3, r5
 8003f48:	d419      	bmi.n	8003f7e <_malloc_r+0x96>
 8003f4a:	2b0b      	cmp	r3, #11
 8003f4c:	d903      	bls.n	8003f56 <_malloc_r+0x6e>
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	18e4      	adds	r4, r4, r3
 8003f52:	6025      	str	r5, [r4, #0]
 8003f54:	e003      	b.n	8003f5e <_malloc_r+0x76>
 8003f56:	6863      	ldr	r3, [r4, #4]
 8003f58:	42a2      	cmp	r2, r4
 8003f5a:	d10e      	bne.n	8003f7a <_malloc_r+0x92>
 8003f5c:	600b      	str	r3, [r1, #0]
 8003f5e:	0030      	movs	r0, r6
 8003f60:	f000 fd92 	bl	8004a88 <__malloc_unlock>
 8003f64:	0020      	movs	r0, r4
 8003f66:	2207      	movs	r2, #7
 8003f68:	300b      	adds	r0, #11
 8003f6a:	1d23      	adds	r3, r4, #4
 8003f6c:	4390      	bics	r0, r2
 8003f6e:	1ac2      	subs	r2, r0, r3
 8003f70:	4298      	cmp	r0, r3
 8003f72:	d0e6      	beq.n	8003f42 <_malloc_r+0x5a>
 8003f74:	1a1b      	subs	r3, r3, r0
 8003f76:	50a3      	str	r3, [r4, r2]
 8003f78:	e7e3      	b.n	8003f42 <_malloc_r+0x5a>
 8003f7a:	6053      	str	r3, [r2, #4]
 8003f7c:	e7ef      	b.n	8003f5e <_malloc_r+0x76>
 8003f7e:	0022      	movs	r2, r4
 8003f80:	6864      	ldr	r4, [r4, #4]
 8003f82:	e7c2      	b.n	8003f0a <_malloc_r+0x22>
 8003f84:	2303      	movs	r3, #3
 8003f86:	1cc4      	adds	r4, r0, #3
 8003f88:	439c      	bics	r4, r3
 8003f8a:	42a0      	cmp	r0, r4
 8003f8c:	d0e1      	beq.n	8003f52 <_malloc_r+0x6a>
 8003f8e:	1a21      	subs	r1, r4, r0
 8003f90:	0030      	movs	r0, r6
 8003f92:	f000 fc97 	bl	80048c4 <_sbrk_r>
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	d1db      	bne.n	8003f52 <_malloc_r+0x6a>
 8003f9a:	e7c7      	b.n	8003f2c <_malloc_r+0x44>
 8003f9c:	200001b0 	.word	0x200001b0
 8003fa0:	200001b4 	.word	0x200001b4

08003fa4 <__ssputs_r>:
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa6:	688e      	ldr	r6, [r1, #8]
 8003fa8:	b085      	sub	sp, #20
 8003faa:	0007      	movs	r7, r0
 8003fac:	000c      	movs	r4, r1
 8003fae:	9203      	str	r2, [sp, #12]
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	429e      	cmp	r6, r3
 8003fb4:	d83c      	bhi.n	8004030 <__ssputs_r+0x8c>
 8003fb6:	2390      	movs	r3, #144	; 0x90
 8003fb8:	898a      	ldrh	r2, [r1, #12]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	421a      	tst	r2, r3
 8003fbe:	d034      	beq.n	800402a <__ssputs_r+0x86>
 8003fc0:	2503      	movs	r5, #3
 8003fc2:	6909      	ldr	r1, [r1, #16]
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	1a5b      	subs	r3, r3, r1
 8003fc8:	9302      	str	r3, [sp, #8]
 8003fca:	6963      	ldr	r3, [r4, #20]
 8003fcc:	9802      	ldr	r0, [sp, #8]
 8003fce:	435d      	muls	r5, r3
 8003fd0:	0feb      	lsrs	r3, r5, #31
 8003fd2:	195d      	adds	r5, r3, r5
 8003fd4:	9b01      	ldr	r3, [sp, #4]
 8003fd6:	106d      	asrs	r5, r5, #1
 8003fd8:	3301      	adds	r3, #1
 8003fda:	181b      	adds	r3, r3, r0
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	d900      	bls.n	8003fe2 <__ssputs_r+0x3e>
 8003fe0:	001d      	movs	r5, r3
 8003fe2:	0553      	lsls	r3, r2, #21
 8003fe4:	d532      	bpl.n	800404c <__ssputs_r+0xa8>
 8003fe6:	0029      	movs	r1, r5
 8003fe8:	0038      	movs	r0, r7
 8003fea:	f7ff ff7d 	bl	8003ee8 <_malloc_r>
 8003fee:	1e06      	subs	r6, r0, #0
 8003ff0:	d109      	bne.n	8004006 <__ssputs_r+0x62>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	2340      	movs	r3, #64	; 0x40
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	89a2      	ldrh	r2, [r4, #12]
 8003ffc:	4240      	negs	r0, r0
 8003ffe:	4313      	orrs	r3, r2
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	b005      	add	sp, #20
 8004004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004006:	9a02      	ldr	r2, [sp, #8]
 8004008:	6921      	ldr	r1, [r4, #16]
 800400a:	f7ff fb3b 	bl	8003684 <memcpy>
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <__ssputs_r+0xc0>)
 8004012:	401a      	ands	r2, r3
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	4313      	orrs	r3, r2
 8004018:	81a3      	strh	r3, [r4, #12]
 800401a:	9b02      	ldr	r3, [sp, #8]
 800401c:	6126      	str	r6, [r4, #16]
 800401e:	18f6      	adds	r6, r6, r3
 8004020:	6026      	str	r6, [r4, #0]
 8004022:	6165      	str	r5, [r4, #20]
 8004024:	9e01      	ldr	r6, [sp, #4]
 8004026:	1aed      	subs	r5, r5, r3
 8004028:	60a5      	str	r5, [r4, #8]
 800402a:	9b01      	ldr	r3, [sp, #4]
 800402c:	429e      	cmp	r6, r3
 800402e:	d900      	bls.n	8004032 <__ssputs_r+0x8e>
 8004030:	9e01      	ldr	r6, [sp, #4]
 8004032:	0032      	movs	r2, r6
 8004034:	9903      	ldr	r1, [sp, #12]
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	f000 fd0b 	bl	8004a52 <memmove>
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	2000      	movs	r0, #0
 8004040:	1b9b      	subs	r3, r3, r6
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	199e      	adds	r6, r3, r6
 8004048:	6026      	str	r6, [r4, #0]
 800404a:	e7da      	b.n	8004002 <__ssputs_r+0x5e>
 800404c:	002a      	movs	r2, r5
 800404e:	0038      	movs	r0, r7
 8004050:	f000 fd22 	bl	8004a98 <_realloc_r>
 8004054:	1e06      	subs	r6, r0, #0
 8004056:	d1e0      	bne.n	800401a <__ssputs_r+0x76>
 8004058:	0038      	movs	r0, r7
 800405a:	6921      	ldr	r1, [r4, #16]
 800405c:	f7ff fefa 	bl	8003e54 <_free_r>
 8004060:	e7c7      	b.n	8003ff2 <__ssputs_r+0x4e>
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	fffffb7f 	.word	0xfffffb7f

08004068 <_svfiprintf_r>:
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	b0a1      	sub	sp, #132	; 0x84
 800406c:	9003      	str	r0, [sp, #12]
 800406e:	001d      	movs	r5, r3
 8004070:	898b      	ldrh	r3, [r1, #12]
 8004072:	000f      	movs	r7, r1
 8004074:	0016      	movs	r6, r2
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	d511      	bpl.n	800409e <_svfiprintf_r+0x36>
 800407a:	690b      	ldr	r3, [r1, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10e      	bne.n	800409e <_svfiprintf_r+0x36>
 8004080:	2140      	movs	r1, #64	; 0x40
 8004082:	f7ff ff31 	bl	8003ee8 <_malloc_r>
 8004086:	6038      	str	r0, [r7, #0]
 8004088:	6138      	str	r0, [r7, #16]
 800408a:	2800      	cmp	r0, #0
 800408c:	d105      	bne.n	800409a <_svfiprintf_r+0x32>
 800408e:	230c      	movs	r3, #12
 8004090:	9a03      	ldr	r2, [sp, #12]
 8004092:	3801      	subs	r0, #1
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	b021      	add	sp, #132	; 0x84
 8004098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	ac08      	add	r4, sp, #32
 80040a2:	6163      	str	r3, [r4, #20]
 80040a4:	3320      	adds	r3, #32
 80040a6:	7663      	strb	r3, [r4, #25]
 80040a8:	3310      	adds	r3, #16
 80040aa:	76a3      	strb	r3, [r4, #26]
 80040ac:	9507      	str	r5, [sp, #28]
 80040ae:	0035      	movs	r5, r6
 80040b0:	782b      	ldrb	r3, [r5, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <_svfiprintf_r+0x52>
 80040b6:	2b25      	cmp	r3, #37	; 0x25
 80040b8:	d147      	bne.n	800414a <_svfiprintf_r+0xe2>
 80040ba:	1bab      	subs	r3, r5, r6
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	42b5      	cmp	r5, r6
 80040c0:	d00c      	beq.n	80040dc <_svfiprintf_r+0x74>
 80040c2:	0032      	movs	r2, r6
 80040c4:	0039      	movs	r1, r7
 80040c6:	9803      	ldr	r0, [sp, #12]
 80040c8:	f7ff ff6c 	bl	8003fa4 <__ssputs_r>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d100      	bne.n	80040d2 <_svfiprintf_r+0x6a>
 80040d0:	e0ae      	b.n	8004230 <_svfiprintf_r+0x1c8>
 80040d2:	6962      	ldr	r2, [r4, #20]
 80040d4:	9b05      	ldr	r3, [sp, #20]
 80040d6:	4694      	mov	ip, r2
 80040d8:	4463      	add	r3, ip
 80040da:	6163      	str	r3, [r4, #20]
 80040dc:	782b      	ldrb	r3, [r5, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d100      	bne.n	80040e4 <_svfiprintf_r+0x7c>
 80040e2:	e0a5      	b.n	8004230 <_svfiprintf_r+0x1c8>
 80040e4:	2201      	movs	r2, #1
 80040e6:	2300      	movs	r3, #0
 80040e8:	4252      	negs	r2, r2
 80040ea:	6062      	str	r2, [r4, #4]
 80040ec:	a904      	add	r1, sp, #16
 80040ee:	3254      	adds	r2, #84	; 0x54
 80040f0:	1852      	adds	r2, r2, r1
 80040f2:	1c6e      	adds	r6, r5, #1
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	60e3      	str	r3, [r4, #12]
 80040f8:	60a3      	str	r3, [r4, #8]
 80040fa:	7013      	strb	r3, [r2, #0]
 80040fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80040fe:	2205      	movs	r2, #5
 8004100:	7831      	ldrb	r1, [r6, #0]
 8004102:	4854      	ldr	r0, [pc, #336]	; (8004254 <_svfiprintf_r+0x1ec>)
 8004104:	f000 fc9a 	bl	8004a3c <memchr>
 8004108:	1c75      	adds	r5, r6, #1
 800410a:	2800      	cmp	r0, #0
 800410c:	d11f      	bne.n	800414e <_svfiprintf_r+0xe6>
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	06d3      	lsls	r3, r2, #27
 8004112:	d504      	bpl.n	800411e <_svfiprintf_r+0xb6>
 8004114:	2353      	movs	r3, #83	; 0x53
 8004116:	a904      	add	r1, sp, #16
 8004118:	185b      	adds	r3, r3, r1
 800411a:	2120      	movs	r1, #32
 800411c:	7019      	strb	r1, [r3, #0]
 800411e:	0713      	lsls	r3, r2, #28
 8004120:	d504      	bpl.n	800412c <_svfiprintf_r+0xc4>
 8004122:	2353      	movs	r3, #83	; 0x53
 8004124:	a904      	add	r1, sp, #16
 8004126:	185b      	adds	r3, r3, r1
 8004128:	212b      	movs	r1, #43	; 0x2b
 800412a:	7019      	strb	r1, [r3, #0]
 800412c:	7833      	ldrb	r3, [r6, #0]
 800412e:	2b2a      	cmp	r3, #42	; 0x2a
 8004130:	d016      	beq.n	8004160 <_svfiprintf_r+0xf8>
 8004132:	0035      	movs	r5, r6
 8004134:	2100      	movs	r1, #0
 8004136:	200a      	movs	r0, #10
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	782a      	ldrb	r2, [r5, #0]
 800413c:	1c6e      	adds	r6, r5, #1
 800413e:	3a30      	subs	r2, #48	; 0x30
 8004140:	2a09      	cmp	r2, #9
 8004142:	d94e      	bls.n	80041e2 <_svfiprintf_r+0x17a>
 8004144:	2900      	cmp	r1, #0
 8004146:	d111      	bne.n	800416c <_svfiprintf_r+0x104>
 8004148:	e017      	b.n	800417a <_svfiprintf_r+0x112>
 800414a:	3501      	adds	r5, #1
 800414c:	e7b0      	b.n	80040b0 <_svfiprintf_r+0x48>
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <_svfiprintf_r+0x1ec>)
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	1ac0      	subs	r0, r0, r3
 8004154:	2301      	movs	r3, #1
 8004156:	4083      	lsls	r3, r0
 8004158:	4313      	orrs	r3, r2
 800415a:	002e      	movs	r6, r5
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	e7ce      	b.n	80040fe <_svfiprintf_r+0x96>
 8004160:	9b07      	ldr	r3, [sp, #28]
 8004162:	1d19      	adds	r1, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	9107      	str	r1, [sp, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db01      	blt.n	8004170 <_svfiprintf_r+0x108>
 800416c:	930b      	str	r3, [sp, #44]	; 0x2c
 800416e:	e004      	b.n	800417a <_svfiprintf_r+0x112>
 8004170:	425b      	negs	r3, r3
 8004172:	60e3      	str	r3, [r4, #12]
 8004174:	2302      	movs	r3, #2
 8004176:	4313      	orrs	r3, r2
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	782b      	ldrb	r3, [r5, #0]
 800417c:	2b2e      	cmp	r3, #46	; 0x2e
 800417e:	d10a      	bne.n	8004196 <_svfiprintf_r+0x12e>
 8004180:	786b      	ldrb	r3, [r5, #1]
 8004182:	2b2a      	cmp	r3, #42	; 0x2a
 8004184:	d135      	bne.n	80041f2 <_svfiprintf_r+0x18a>
 8004186:	9b07      	ldr	r3, [sp, #28]
 8004188:	3502      	adds	r5, #2
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	9207      	str	r2, [sp, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db2b      	blt.n	80041ec <_svfiprintf_r+0x184>
 8004194:	9309      	str	r3, [sp, #36]	; 0x24
 8004196:	4e30      	ldr	r6, [pc, #192]	; (8004258 <_svfiprintf_r+0x1f0>)
 8004198:	2203      	movs	r2, #3
 800419a:	0030      	movs	r0, r6
 800419c:	7829      	ldrb	r1, [r5, #0]
 800419e:	f000 fc4d 	bl	8004a3c <memchr>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d006      	beq.n	80041b4 <_svfiprintf_r+0x14c>
 80041a6:	2340      	movs	r3, #64	; 0x40
 80041a8:	1b80      	subs	r0, r0, r6
 80041aa:	4083      	lsls	r3, r0
 80041ac:	6822      	ldr	r2, [r4, #0]
 80041ae:	3501      	adds	r5, #1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	7829      	ldrb	r1, [r5, #0]
 80041b6:	2206      	movs	r2, #6
 80041b8:	4828      	ldr	r0, [pc, #160]	; (800425c <_svfiprintf_r+0x1f4>)
 80041ba:	1c6e      	adds	r6, r5, #1
 80041bc:	7621      	strb	r1, [r4, #24]
 80041be:	f000 fc3d 	bl	8004a3c <memchr>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d03c      	beq.n	8004240 <_svfiprintf_r+0x1d8>
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <_svfiprintf_r+0x1f8>)
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d125      	bne.n	8004218 <_svfiprintf_r+0x1b0>
 80041cc:	2207      	movs	r2, #7
 80041ce:	9b07      	ldr	r3, [sp, #28]
 80041d0:	3307      	adds	r3, #7
 80041d2:	4393      	bics	r3, r2
 80041d4:	3308      	adds	r3, #8
 80041d6:	9307      	str	r3, [sp, #28]
 80041d8:	6963      	ldr	r3, [r4, #20]
 80041da:	9a04      	ldr	r2, [sp, #16]
 80041dc:	189b      	adds	r3, r3, r2
 80041de:	6163      	str	r3, [r4, #20]
 80041e0:	e765      	b.n	80040ae <_svfiprintf_r+0x46>
 80041e2:	4343      	muls	r3, r0
 80041e4:	0035      	movs	r5, r6
 80041e6:	2101      	movs	r1, #1
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	e7a6      	b.n	800413a <_svfiprintf_r+0xd2>
 80041ec:	2301      	movs	r3, #1
 80041ee:	425b      	negs	r3, r3
 80041f0:	e7d0      	b.n	8004194 <_svfiprintf_r+0x12c>
 80041f2:	2300      	movs	r3, #0
 80041f4:	200a      	movs	r0, #10
 80041f6:	001a      	movs	r2, r3
 80041f8:	3501      	adds	r5, #1
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	7829      	ldrb	r1, [r5, #0]
 80041fe:	1c6e      	adds	r6, r5, #1
 8004200:	3930      	subs	r1, #48	; 0x30
 8004202:	2909      	cmp	r1, #9
 8004204:	d903      	bls.n	800420e <_svfiprintf_r+0x1a6>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0c5      	beq.n	8004196 <_svfiprintf_r+0x12e>
 800420a:	9209      	str	r2, [sp, #36]	; 0x24
 800420c:	e7c3      	b.n	8004196 <_svfiprintf_r+0x12e>
 800420e:	4342      	muls	r2, r0
 8004210:	0035      	movs	r5, r6
 8004212:	2301      	movs	r3, #1
 8004214:	1852      	adds	r2, r2, r1
 8004216:	e7f1      	b.n	80041fc <_svfiprintf_r+0x194>
 8004218:	ab07      	add	r3, sp, #28
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	003a      	movs	r2, r7
 800421e:	0021      	movs	r1, r4
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <_svfiprintf_r+0x1fc>)
 8004222:	9803      	ldr	r0, [sp, #12]
 8004224:	e000      	b.n	8004228 <_svfiprintf_r+0x1c0>
 8004226:	bf00      	nop
 8004228:	9004      	str	r0, [sp, #16]
 800422a:	9b04      	ldr	r3, [sp, #16]
 800422c:	3301      	adds	r3, #1
 800422e:	d1d3      	bne.n	80041d8 <_svfiprintf_r+0x170>
 8004230:	89bb      	ldrh	r3, [r7, #12]
 8004232:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004234:	065b      	lsls	r3, r3, #25
 8004236:	d400      	bmi.n	800423a <_svfiprintf_r+0x1d2>
 8004238:	e72d      	b.n	8004096 <_svfiprintf_r+0x2e>
 800423a:	2001      	movs	r0, #1
 800423c:	4240      	negs	r0, r0
 800423e:	e72a      	b.n	8004096 <_svfiprintf_r+0x2e>
 8004240:	ab07      	add	r3, sp, #28
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	003a      	movs	r2, r7
 8004246:	0021      	movs	r1, r4
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <_svfiprintf_r+0x1fc>)
 800424a:	9803      	ldr	r0, [sp, #12]
 800424c:	f000 f9de 	bl	800460c <_printf_i>
 8004250:	e7ea      	b.n	8004228 <_svfiprintf_r+0x1c0>
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	08004c38 	.word	0x08004c38
 8004258:	08004c3e 	.word	0x08004c3e
 800425c:	08004c42 	.word	0x08004c42
 8004260:	00000000 	.word	0x00000000
 8004264:	08003fa5 	.word	0x08003fa5

08004268 <__sfputc_r>:
 8004268:	6893      	ldr	r3, [r2, #8]
 800426a:	b510      	push	{r4, lr}
 800426c:	3b01      	subs	r3, #1
 800426e:	6093      	str	r3, [r2, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	da04      	bge.n	800427e <__sfputc_r+0x16>
 8004274:	6994      	ldr	r4, [r2, #24]
 8004276:	42a3      	cmp	r3, r4
 8004278:	db07      	blt.n	800428a <__sfputc_r+0x22>
 800427a:	290a      	cmp	r1, #10
 800427c:	d005      	beq.n	800428a <__sfputc_r+0x22>
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	1c58      	adds	r0, r3, #1
 8004282:	6010      	str	r0, [r2, #0]
 8004284:	7019      	strb	r1, [r3, #0]
 8004286:	0008      	movs	r0, r1
 8004288:	bd10      	pop	{r4, pc}
 800428a:	f7ff fad7 	bl	800383c <__swbuf_r>
 800428e:	0001      	movs	r1, r0
 8004290:	e7f9      	b.n	8004286 <__sfputc_r+0x1e>

08004292 <__sfputs_r>:
 8004292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004294:	0006      	movs	r6, r0
 8004296:	000f      	movs	r7, r1
 8004298:	0014      	movs	r4, r2
 800429a:	18d5      	adds	r5, r2, r3
 800429c:	42ac      	cmp	r4, r5
 800429e:	d101      	bne.n	80042a4 <__sfputs_r+0x12>
 80042a0:	2000      	movs	r0, #0
 80042a2:	e007      	b.n	80042b4 <__sfputs_r+0x22>
 80042a4:	7821      	ldrb	r1, [r4, #0]
 80042a6:	003a      	movs	r2, r7
 80042a8:	0030      	movs	r0, r6
 80042aa:	f7ff ffdd 	bl	8004268 <__sfputc_r>
 80042ae:	3401      	adds	r4, #1
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d1f3      	bne.n	800429c <__sfputs_r+0xa>
 80042b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042b8 <_vfiprintf_r>:
 80042b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ba:	b0a1      	sub	sp, #132	; 0x84
 80042bc:	0006      	movs	r6, r0
 80042be:	000c      	movs	r4, r1
 80042c0:	001f      	movs	r7, r3
 80042c2:	9203      	str	r2, [sp, #12]
 80042c4:	2800      	cmp	r0, #0
 80042c6:	d004      	beq.n	80042d2 <_vfiprintf_r+0x1a>
 80042c8:	6983      	ldr	r3, [r0, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <_vfiprintf_r+0x1a>
 80042ce:	f7ff fcb1 	bl	8003c34 <__sinit>
 80042d2:	4b8e      	ldr	r3, [pc, #568]	; (800450c <_vfiprintf_r+0x254>)
 80042d4:	429c      	cmp	r4, r3
 80042d6:	d11c      	bne.n	8004312 <_vfiprintf_r+0x5a>
 80042d8:	6874      	ldr	r4, [r6, #4]
 80042da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042dc:	07db      	lsls	r3, r3, #31
 80042de:	d405      	bmi.n	80042ec <_vfiprintf_r+0x34>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	059b      	lsls	r3, r3, #22
 80042e4:	d402      	bmi.n	80042ec <_vfiprintf_r+0x34>
 80042e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042e8:	f7ff fd45 	bl	8003d76 <__retarget_lock_acquire_recursive>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	071b      	lsls	r3, r3, #28
 80042f0:	d502      	bpl.n	80042f8 <_vfiprintf_r+0x40>
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d11d      	bne.n	8004334 <_vfiprintf_r+0x7c>
 80042f8:	0021      	movs	r1, r4
 80042fa:	0030      	movs	r0, r6
 80042fc:	f7ff faf4 	bl	80038e8 <__swsetup_r>
 8004300:	2800      	cmp	r0, #0
 8004302:	d017      	beq.n	8004334 <_vfiprintf_r+0x7c>
 8004304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004306:	07db      	lsls	r3, r3, #31
 8004308:	d50d      	bpl.n	8004326 <_vfiprintf_r+0x6e>
 800430a:	2001      	movs	r0, #1
 800430c:	4240      	negs	r0, r0
 800430e:	b021      	add	sp, #132	; 0x84
 8004310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004312:	4b7f      	ldr	r3, [pc, #508]	; (8004510 <_vfiprintf_r+0x258>)
 8004314:	429c      	cmp	r4, r3
 8004316:	d101      	bne.n	800431c <_vfiprintf_r+0x64>
 8004318:	68b4      	ldr	r4, [r6, #8]
 800431a:	e7de      	b.n	80042da <_vfiprintf_r+0x22>
 800431c:	4b7d      	ldr	r3, [pc, #500]	; (8004514 <_vfiprintf_r+0x25c>)
 800431e:	429c      	cmp	r4, r3
 8004320:	d1db      	bne.n	80042da <_vfiprintf_r+0x22>
 8004322:	68f4      	ldr	r4, [r6, #12]
 8004324:	e7d9      	b.n	80042da <_vfiprintf_r+0x22>
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	059b      	lsls	r3, r3, #22
 800432a:	d4ee      	bmi.n	800430a <_vfiprintf_r+0x52>
 800432c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800432e:	f7ff fd23 	bl	8003d78 <__retarget_lock_release_recursive>
 8004332:	e7ea      	b.n	800430a <_vfiprintf_r+0x52>
 8004334:	2300      	movs	r3, #0
 8004336:	ad08      	add	r5, sp, #32
 8004338:	616b      	str	r3, [r5, #20]
 800433a:	3320      	adds	r3, #32
 800433c:	766b      	strb	r3, [r5, #25]
 800433e:	3310      	adds	r3, #16
 8004340:	76ab      	strb	r3, [r5, #26]
 8004342:	9707      	str	r7, [sp, #28]
 8004344:	9f03      	ldr	r7, [sp, #12]
 8004346:	783b      	ldrb	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <_vfiprintf_r+0x98>
 800434c:	2b25      	cmp	r3, #37	; 0x25
 800434e:	d14e      	bne.n	80043ee <_vfiprintf_r+0x136>
 8004350:	9b03      	ldr	r3, [sp, #12]
 8004352:	1afb      	subs	r3, r7, r3
 8004354:	9305      	str	r3, [sp, #20]
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	429f      	cmp	r7, r3
 800435a:	d00d      	beq.n	8004378 <_vfiprintf_r+0xc0>
 800435c:	9b05      	ldr	r3, [sp, #20]
 800435e:	0021      	movs	r1, r4
 8004360:	0030      	movs	r0, r6
 8004362:	9a03      	ldr	r2, [sp, #12]
 8004364:	f7ff ff95 	bl	8004292 <__sfputs_r>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d100      	bne.n	800436e <_vfiprintf_r+0xb6>
 800436c:	e0b5      	b.n	80044da <_vfiprintf_r+0x222>
 800436e:	696a      	ldr	r2, [r5, #20]
 8004370:	9b05      	ldr	r3, [sp, #20]
 8004372:	4694      	mov	ip, r2
 8004374:	4463      	add	r3, ip
 8004376:	616b      	str	r3, [r5, #20]
 8004378:	783b      	ldrb	r3, [r7, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d100      	bne.n	8004380 <_vfiprintf_r+0xc8>
 800437e:	e0ac      	b.n	80044da <_vfiprintf_r+0x222>
 8004380:	2201      	movs	r2, #1
 8004382:	1c7b      	adds	r3, r7, #1
 8004384:	9303      	str	r3, [sp, #12]
 8004386:	2300      	movs	r3, #0
 8004388:	4252      	negs	r2, r2
 800438a:	606a      	str	r2, [r5, #4]
 800438c:	a904      	add	r1, sp, #16
 800438e:	3254      	adds	r2, #84	; 0x54
 8004390:	1852      	adds	r2, r2, r1
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	60eb      	str	r3, [r5, #12]
 8004396:	60ab      	str	r3, [r5, #8]
 8004398:	7013      	strb	r3, [r2, #0]
 800439a:	65ab      	str	r3, [r5, #88]	; 0x58
 800439c:	9b03      	ldr	r3, [sp, #12]
 800439e:	2205      	movs	r2, #5
 80043a0:	7819      	ldrb	r1, [r3, #0]
 80043a2:	485d      	ldr	r0, [pc, #372]	; (8004518 <_vfiprintf_r+0x260>)
 80043a4:	f000 fb4a 	bl	8004a3c <memchr>
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	1c5f      	adds	r7, r3, #1
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d120      	bne.n	80043f2 <_vfiprintf_r+0x13a>
 80043b0:	682a      	ldr	r2, [r5, #0]
 80043b2:	06d3      	lsls	r3, r2, #27
 80043b4:	d504      	bpl.n	80043c0 <_vfiprintf_r+0x108>
 80043b6:	2353      	movs	r3, #83	; 0x53
 80043b8:	a904      	add	r1, sp, #16
 80043ba:	185b      	adds	r3, r3, r1
 80043bc:	2120      	movs	r1, #32
 80043be:	7019      	strb	r1, [r3, #0]
 80043c0:	0713      	lsls	r3, r2, #28
 80043c2:	d504      	bpl.n	80043ce <_vfiprintf_r+0x116>
 80043c4:	2353      	movs	r3, #83	; 0x53
 80043c6:	a904      	add	r1, sp, #16
 80043c8:	185b      	adds	r3, r3, r1
 80043ca:	212b      	movs	r1, #43	; 0x2b
 80043cc:	7019      	strb	r1, [r3, #0]
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b2a      	cmp	r3, #42	; 0x2a
 80043d4:	d016      	beq.n	8004404 <_vfiprintf_r+0x14c>
 80043d6:	2100      	movs	r1, #0
 80043d8:	68eb      	ldr	r3, [r5, #12]
 80043da:	9f03      	ldr	r7, [sp, #12]
 80043dc:	783a      	ldrb	r2, [r7, #0]
 80043de:	1c78      	adds	r0, r7, #1
 80043e0:	3a30      	subs	r2, #48	; 0x30
 80043e2:	4684      	mov	ip, r0
 80043e4:	2a09      	cmp	r2, #9
 80043e6:	d94f      	bls.n	8004488 <_vfiprintf_r+0x1d0>
 80043e8:	2900      	cmp	r1, #0
 80043ea:	d111      	bne.n	8004410 <_vfiprintf_r+0x158>
 80043ec:	e017      	b.n	800441e <_vfiprintf_r+0x166>
 80043ee:	3701      	adds	r7, #1
 80043f0:	e7a9      	b.n	8004346 <_vfiprintf_r+0x8e>
 80043f2:	4b49      	ldr	r3, [pc, #292]	; (8004518 <_vfiprintf_r+0x260>)
 80043f4:	682a      	ldr	r2, [r5, #0]
 80043f6:	1ac0      	subs	r0, r0, r3
 80043f8:	2301      	movs	r3, #1
 80043fa:	4083      	lsls	r3, r0
 80043fc:	4313      	orrs	r3, r2
 80043fe:	602b      	str	r3, [r5, #0]
 8004400:	9703      	str	r7, [sp, #12]
 8004402:	e7cb      	b.n	800439c <_vfiprintf_r+0xe4>
 8004404:	9b07      	ldr	r3, [sp, #28]
 8004406:	1d19      	adds	r1, r3, #4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	9107      	str	r1, [sp, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	db01      	blt.n	8004414 <_vfiprintf_r+0x15c>
 8004410:	930b      	str	r3, [sp, #44]	; 0x2c
 8004412:	e004      	b.n	800441e <_vfiprintf_r+0x166>
 8004414:	425b      	negs	r3, r3
 8004416:	60eb      	str	r3, [r5, #12]
 8004418:	2302      	movs	r3, #2
 800441a:	4313      	orrs	r3, r2
 800441c:	602b      	str	r3, [r5, #0]
 800441e:	783b      	ldrb	r3, [r7, #0]
 8004420:	2b2e      	cmp	r3, #46	; 0x2e
 8004422:	d10a      	bne.n	800443a <_vfiprintf_r+0x182>
 8004424:	787b      	ldrb	r3, [r7, #1]
 8004426:	2b2a      	cmp	r3, #42	; 0x2a
 8004428:	d137      	bne.n	800449a <_vfiprintf_r+0x1e2>
 800442a:	9b07      	ldr	r3, [sp, #28]
 800442c:	3702      	adds	r7, #2
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	9207      	str	r2, [sp, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	db2d      	blt.n	8004494 <_vfiprintf_r+0x1dc>
 8004438:	9309      	str	r3, [sp, #36]	; 0x24
 800443a:	2203      	movs	r2, #3
 800443c:	7839      	ldrb	r1, [r7, #0]
 800443e:	4837      	ldr	r0, [pc, #220]	; (800451c <_vfiprintf_r+0x264>)
 8004440:	f000 fafc 	bl	8004a3c <memchr>
 8004444:	2800      	cmp	r0, #0
 8004446:	d007      	beq.n	8004458 <_vfiprintf_r+0x1a0>
 8004448:	4b34      	ldr	r3, [pc, #208]	; (800451c <_vfiprintf_r+0x264>)
 800444a:	682a      	ldr	r2, [r5, #0]
 800444c:	1ac0      	subs	r0, r0, r3
 800444e:	2340      	movs	r3, #64	; 0x40
 8004450:	4083      	lsls	r3, r0
 8004452:	4313      	orrs	r3, r2
 8004454:	3701      	adds	r7, #1
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	7839      	ldrb	r1, [r7, #0]
 800445a:	1c7b      	adds	r3, r7, #1
 800445c:	2206      	movs	r2, #6
 800445e:	4830      	ldr	r0, [pc, #192]	; (8004520 <_vfiprintf_r+0x268>)
 8004460:	9303      	str	r3, [sp, #12]
 8004462:	7629      	strb	r1, [r5, #24]
 8004464:	f000 faea 	bl	8004a3c <memchr>
 8004468:	2800      	cmp	r0, #0
 800446a:	d045      	beq.n	80044f8 <_vfiprintf_r+0x240>
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <_vfiprintf_r+0x26c>)
 800446e:	2b00      	cmp	r3, #0
 8004470:	d127      	bne.n	80044c2 <_vfiprintf_r+0x20a>
 8004472:	2207      	movs	r2, #7
 8004474:	9b07      	ldr	r3, [sp, #28]
 8004476:	3307      	adds	r3, #7
 8004478:	4393      	bics	r3, r2
 800447a:	3308      	adds	r3, #8
 800447c:	9307      	str	r3, [sp, #28]
 800447e:	696b      	ldr	r3, [r5, #20]
 8004480:	9a04      	ldr	r2, [sp, #16]
 8004482:	189b      	adds	r3, r3, r2
 8004484:	616b      	str	r3, [r5, #20]
 8004486:	e75d      	b.n	8004344 <_vfiprintf_r+0x8c>
 8004488:	210a      	movs	r1, #10
 800448a:	434b      	muls	r3, r1
 800448c:	4667      	mov	r7, ip
 800448e:	189b      	adds	r3, r3, r2
 8004490:	3909      	subs	r1, #9
 8004492:	e7a3      	b.n	80043dc <_vfiprintf_r+0x124>
 8004494:	2301      	movs	r3, #1
 8004496:	425b      	negs	r3, r3
 8004498:	e7ce      	b.n	8004438 <_vfiprintf_r+0x180>
 800449a:	2300      	movs	r3, #0
 800449c:	001a      	movs	r2, r3
 800449e:	3701      	adds	r7, #1
 80044a0:	606b      	str	r3, [r5, #4]
 80044a2:	7839      	ldrb	r1, [r7, #0]
 80044a4:	1c78      	adds	r0, r7, #1
 80044a6:	3930      	subs	r1, #48	; 0x30
 80044a8:	4684      	mov	ip, r0
 80044aa:	2909      	cmp	r1, #9
 80044ac:	d903      	bls.n	80044b6 <_vfiprintf_r+0x1fe>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0c3      	beq.n	800443a <_vfiprintf_r+0x182>
 80044b2:	9209      	str	r2, [sp, #36]	; 0x24
 80044b4:	e7c1      	b.n	800443a <_vfiprintf_r+0x182>
 80044b6:	230a      	movs	r3, #10
 80044b8:	435a      	muls	r2, r3
 80044ba:	4667      	mov	r7, ip
 80044bc:	1852      	adds	r2, r2, r1
 80044be:	3b09      	subs	r3, #9
 80044c0:	e7ef      	b.n	80044a2 <_vfiprintf_r+0x1ea>
 80044c2:	ab07      	add	r3, sp, #28
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	0022      	movs	r2, r4
 80044c8:	0029      	movs	r1, r5
 80044ca:	0030      	movs	r0, r6
 80044cc:	4b16      	ldr	r3, [pc, #88]	; (8004528 <_vfiprintf_r+0x270>)
 80044ce:	e000      	b.n	80044d2 <_vfiprintf_r+0x21a>
 80044d0:	bf00      	nop
 80044d2:	9004      	str	r0, [sp, #16]
 80044d4:	9b04      	ldr	r3, [sp, #16]
 80044d6:	3301      	adds	r3, #1
 80044d8:	d1d1      	bne.n	800447e <_vfiprintf_r+0x1c6>
 80044da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044dc:	07db      	lsls	r3, r3, #31
 80044de:	d405      	bmi.n	80044ec <_vfiprintf_r+0x234>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	059b      	lsls	r3, r3, #22
 80044e4:	d402      	bmi.n	80044ec <_vfiprintf_r+0x234>
 80044e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e8:	f7ff fc46 	bl	8003d78 <__retarget_lock_release_recursive>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	065b      	lsls	r3, r3, #25
 80044f0:	d500      	bpl.n	80044f4 <_vfiprintf_r+0x23c>
 80044f2:	e70a      	b.n	800430a <_vfiprintf_r+0x52>
 80044f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80044f6:	e70a      	b.n	800430e <_vfiprintf_r+0x56>
 80044f8:	ab07      	add	r3, sp, #28
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	0022      	movs	r2, r4
 80044fe:	0029      	movs	r1, r5
 8004500:	0030      	movs	r0, r6
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <_vfiprintf_r+0x270>)
 8004504:	f000 f882 	bl	800460c <_printf_i>
 8004508:	e7e3      	b.n	80044d2 <_vfiprintf_r+0x21a>
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	08004bf8 	.word	0x08004bf8
 8004510:	08004c18 	.word	0x08004c18
 8004514:	08004bd8 	.word	0x08004bd8
 8004518:	08004c38 	.word	0x08004c38
 800451c:	08004c3e 	.word	0x08004c3e
 8004520:	08004c42 	.word	0x08004c42
 8004524:	00000000 	.word	0x00000000
 8004528:	08004293 	.word	0x08004293

0800452c <_printf_common>:
 800452c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800452e:	0015      	movs	r5, r2
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	688a      	ldr	r2, [r1, #8]
 8004534:	690b      	ldr	r3, [r1, #16]
 8004536:	000c      	movs	r4, r1
 8004538:	9000      	str	r0, [sp, #0]
 800453a:	4293      	cmp	r3, r2
 800453c:	da00      	bge.n	8004540 <_printf_common+0x14>
 800453e:	0013      	movs	r3, r2
 8004540:	0022      	movs	r2, r4
 8004542:	602b      	str	r3, [r5, #0]
 8004544:	3243      	adds	r2, #67	; 0x43
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	2a00      	cmp	r2, #0
 800454a:	d001      	beq.n	8004550 <_printf_common+0x24>
 800454c:	3301      	adds	r3, #1
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	069b      	lsls	r3, r3, #26
 8004554:	d502      	bpl.n	800455c <_printf_common+0x30>
 8004556:	682b      	ldr	r3, [r5, #0]
 8004558:	3302      	adds	r3, #2
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	2306      	movs	r3, #6
 8004560:	0017      	movs	r7, r2
 8004562:	401f      	ands	r7, r3
 8004564:	421a      	tst	r2, r3
 8004566:	d027      	beq.n	80045b8 <_printf_common+0x8c>
 8004568:	0023      	movs	r3, r4
 800456a:	3343      	adds	r3, #67	; 0x43
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	1e5a      	subs	r2, r3, #1
 8004570:	4193      	sbcs	r3, r2
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	0692      	lsls	r2, r2, #26
 8004576:	d430      	bmi.n	80045da <_printf_common+0xae>
 8004578:	0022      	movs	r2, r4
 800457a:	9901      	ldr	r1, [sp, #4]
 800457c:	9800      	ldr	r0, [sp, #0]
 800457e:	9e08      	ldr	r6, [sp, #32]
 8004580:	3243      	adds	r2, #67	; 0x43
 8004582:	47b0      	blx	r6
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d025      	beq.n	80045d4 <_printf_common+0xa8>
 8004588:	2306      	movs	r3, #6
 800458a:	6820      	ldr	r0, [r4, #0]
 800458c:	682a      	ldr	r2, [r5, #0]
 800458e:	68e1      	ldr	r1, [r4, #12]
 8004590:	2500      	movs	r5, #0
 8004592:	4003      	ands	r3, r0
 8004594:	2b04      	cmp	r3, #4
 8004596:	d103      	bne.n	80045a0 <_printf_common+0x74>
 8004598:	1a8d      	subs	r5, r1, r2
 800459a:	43eb      	mvns	r3, r5
 800459c:	17db      	asrs	r3, r3, #31
 800459e:	401d      	ands	r5, r3
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	6922      	ldr	r2, [r4, #16]
 80045a4:	4293      	cmp	r3, r2
 80045a6:	dd01      	ble.n	80045ac <_printf_common+0x80>
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	18ed      	adds	r5, r5, r3
 80045ac:	2700      	movs	r7, #0
 80045ae:	42bd      	cmp	r5, r7
 80045b0:	d120      	bne.n	80045f4 <_printf_common+0xc8>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e010      	b.n	80045d8 <_printf_common+0xac>
 80045b6:	3701      	adds	r7, #1
 80045b8:	68e3      	ldr	r3, [r4, #12]
 80045ba:	682a      	ldr	r2, [r5, #0]
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	42bb      	cmp	r3, r7
 80045c0:	ddd2      	ble.n	8004568 <_printf_common+0x3c>
 80045c2:	0022      	movs	r2, r4
 80045c4:	2301      	movs	r3, #1
 80045c6:	9901      	ldr	r1, [sp, #4]
 80045c8:	9800      	ldr	r0, [sp, #0]
 80045ca:	9e08      	ldr	r6, [sp, #32]
 80045cc:	3219      	adds	r2, #25
 80045ce:	47b0      	blx	r6
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d1f0      	bne.n	80045b6 <_printf_common+0x8a>
 80045d4:	2001      	movs	r0, #1
 80045d6:	4240      	negs	r0, r0
 80045d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045da:	2030      	movs	r0, #48	; 0x30
 80045dc:	18e1      	adds	r1, r4, r3
 80045de:	3143      	adds	r1, #67	; 0x43
 80045e0:	7008      	strb	r0, [r1, #0]
 80045e2:	0021      	movs	r1, r4
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	3145      	adds	r1, #69	; 0x45
 80045e8:	7809      	ldrb	r1, [r1, #0]
 80045ea:	18a2      	adds	r2, r4, r2
 80045ec:	3243      	adds	r2, #67	; 0x43
 80045ee:	3302      	adds	r3, #2
 80045f0:	7011      	strb	r1, [r2, #0]
 80045f2:	e7c1      	b.n	8004578 <_printf_common+0x4c>
 80045f4:	0022      	movs	r2, r4
 80045f6:	2301      	movs	r3, #1
 80045f8:	9901      	ldr	r1, [sp, #4]
 80045fa:	9800      	ldr	r0, [sp, #0]
 80045fc:	9e08      	ldr	r6, [sp, #32]
 80045fe:	321a      	adds	r2, #26
 8004600:	47b0      	blx	r6
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d0e6      	beq.n	80045d4 <_printf_common+0xa8>
 8004606:	3701      	adds	r7, #1
 8004608:	e7d1      	b.n	80045ae <_printf_common+0x82>
	...

0800460c <_printf_i>:
 800460c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460e:	b08b      	sub	sp, #44	; 0x2c
 8004610:	9206      	str	r2, [sp, #24]
 8004612:	000a      	movs	r2, r1
 8004614:	3243      	adds	r2, #67	; 0x43
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	9005      	str	r0, [sp, #20]
 800461a:	9204      	str	r2, [sp, #16]
 800461c:	7e0a      	ldrb	r2, [r1, #24]
 800461e:	000c      	movs	r4, r1
 8004620:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004622:	2a78      	cmp	r2, #120	; 0x78
 8004624:	d806      	bhi.n	8004634 <_printf_i+0x28>
 8004626:	2a62      	cmp	r2, #98	; 0x62
 8004628:	d808      	bhi.n	800463c <_printf_i+0x30>
 800462a:	2a00      	cmp	r2, #0
 800462c:	d100      	bne.n	8004630 <_printf_i+0x24>
 800462e:	e0c0      	b.n	80047b2 <_printf_i+0x1a6>
 8004630:	2a58      	cmp	r2, #88	; 0x58
 8004632:	d052      	beq.n	80046da <_printf_i+0xce>
 8004634:	0026      	movs	r6, r4
 8004636:	3642      	adds	r6, #66	; 0x42
 8004638:	7032      	strb	r2, [r6, #0]
 800463a:	e022      	b.n	8004682 <_printf_i+0x76>
 800463c:	0010      	movs	r0, r2
 800463e:	3863      	subs	r0, #99	; 0x63
 8004640:	2815      	cmp	r0, #21
 8004642:	d8f7      	bhi.n	8004634 <_printf_i+0x28>
 8004644:	f7fb fd6a 	bl	800011c <__gnu_thumb1_case_shi>
 8004648:	001f0016 	.word	0x001f0016
 800464c:	fff6fff6 	.word	0xfff6fff6
 8004650:	fff6fff6 	.word	0xfff6fff6
 8004654:	fff6001f 	.word	0xfff6001f
 8004658:	fff6fff6 	.word	0xfff6fff6
 800465c:	00a8fff6 	.word	0x00a8fff6
 8004660:	009a0036 	.word	0x009a0036
 8004664:	fff6fff6 	.word	0xfff6fff6
 8004668:	fff600b9 	.word	0xfff600b9
 800466c:	fff60036 	.word	0xfff60036
 8004670:	009efff6 	.word	0x009efff6
 8004674:	0026      	movs	r6, r4
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	3642      	adds	r6, #66	; 0x42
 800467a:	1d11      	adds	r1, r2, #4
 800467c:	6019      	str	r1, [r3, #0]
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	7033      	strb	r3, [r6, #0]
 8004682:	2301      	movs	r3, #1
 8004684:	e0a7      	b.n	80047d6 <_printf_i+0x1ca>
 8004686:	6808      	ldr	r0, [r1, #0]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	1d0a      	adds	r2, r1, #4
 800468c:	0605      	lsls	r5, r0, #24
 800468e:	d50b      	bpl.n	80046a8 <_printf_i+0x9c>
 8004690:	680d      	ldr	r5, [r1, #0]
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	2d00      	cmp	r5, #0
 8004696:	da03      	bge.n	80046a0 <_printf_i+0x94>
 8004698:	232d      	movs	r3, #45	; 0x2d
 800469a:	9a04      	ldr	r2, [sp, #16]
 800469c:	426d      	negs	r5, r5
 800469e:	7013      	strb	r3, [r2, #0]
 80046a0:	4b61      	ldr	r3, [pc, #388]	; (8004828 <_printf_i+0x21c>)
 80046a2:	270a      	movs	r7, #10
 80046a4:	9303      	str	r3, [sp, #12]
 80046a6:	e032      	b.n	800470e <_printf_i+0x102>
 80046a8:	680d      	ldr	r5, [r1, #0]
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	0641      	lsls	r1, r0, #25
 80046ae:	d5f1      	bpl.n	8004694 <_printf_i+0x88>
 80046b0:	b22d      	sxth	r5, r5
 80046b2:	e7ef      	b.n	8004694 <_printf_i+0x88>
 80046b4:	680d      	ldr	r5, [r1, #0]
 80046b6:	6819      	ldr	r1, [r3, #0]
 80046b8:	1d08      	adds	r0, r1, #4
 80046ba:	6018      	str	r0, [r3, #0]
 80046bc:	062e      	lsls	r6, r5, #24
 80046be:	d501      	bpl.n	80046c4 <_printf_i+0xb8>
 80046c0:	680d      	ldr	r5, [r1, #0]
 80046c2:	e003      	b.n	80046cc <_printf_i+0xc0>
 80046c4:	066d      	lsls	r5, r5, #25
 80046c6:	d5fb      	bpl.n	80046c0 <_printf_i+0xb4>
 80046c8:	680d      	ldr	r5, [r1, #0]
 80046ca:	b2ad      	uxth	r5, r5
 80046cc:	4b56      	ldr	r3, [pc, #344]	; (8004828 <_printf_i+0x21c>)
 80046ce:	270a      	movs	r7, #10
 80046d0:	9303      	str	r3, [sp, #12]
 80046d2:	2a6f      	cmp	r2, #111	; 0x6f
 80046d4:	d117      	bne.n	8004706 <_printf_i+0xfa>
 80046d6:	2708      	movs	r7, #8
 80046d8:	e015      	b.n	8004706 <_printf_i+0xfa>
 80046da:	3145      	adds	r1, #69	; 0x45
 80046dc:	700a      	strb	r2, [r1, #0]
 80046de:	4a52      	ldr	r2, [pc, #328]	; (8004828 <_printf_i+0x21c>)
 80046e0:	9203      	str	r2, [sp, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	6821      	ldr	r1, [r4, #0]
 80046e6:	ca20      	ldmia	r2!, {r5}
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	0608      	lsls	r0, r1, #24
 80046ec:	d550      	bpl.n	8004790 <_printf_i+0x184>
 80046ee:	07cb      	lsls	r3, r1, #31
 80046f0:	d502      	bpl.n	80046f8 <_printf_i+0xec>
 80046f2:	2320      	movs	r3, #32
 80046f4:	4319      	orrs	r1, r3
 80046f6:	6021      	str	r1, [r4, #0]
 80046f8:	2710      	movs	r7, #16
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	d103      	bne.n	8004706 <_printf_i+0xfa>
 80046fe:	2320      	movs	r3, #32
 8004700:	6822      	ldr	r2, [r4, #0]
 8004702:	439a      	bics	r2, r3
 8004704:	6022      	str	r2, [r4, #0]
 8004706:	0023      	movs	r3, r4
 8004708:	2200      	movs	r2, #0
 800470a:	3343      	adds	r3, #67	; 0x43
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	6863      	ldr	r3, [r4, #4]
 8004710:	60a3      	str	r3, [r4, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	db03      	blt.n	800471e <_printf_i+0x112>
 8004716:	2204      	movs	r2, #4
 8004718:	6821      	ldr	r1, [r4, #0]
 800471a:	4391      	bics	r1, r2
 800471c:	6021      	str	r1, [r4, #0]
 800471e:	2d00      	cmp	r5, #0
 8004720:	d102      	bne.n	8004728 <_printf_i+0x11c>
 8004722:	9e04      	ldr	r6, [sp, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00c      	beq.n	8004742 <_printf_i+0x136>
 8004728:	9e04      	ldr	r6, [sp, #16]
 800472a:	0028      	movs	r0, r5
 800472c:	0039      	movs	r1, r7
 800472e:	f7fb fd85 	bl	800023c <__aeabi_uidivmod>
 8004732:	9b03      	ldr	r3, [sp, #12]
 8004734:	3e01      	subs	r6, #1
 8004736:	5c5b      	ldrb	r3, [r3, r1]
 8004738:	7033      	strb	r3, [r6, #0]
 800473a:	002b      	movs	r3, r5
 800473c:	0005      	movs	r5, r0
 800473e:	429f      	cmp	r7, r3
 8004740:	d9f3      	bls.n	800472a <_printf_i+0x11e>
 8004742:	2f08      	cmp	r7, #8
 8004744:	d109      	bne.n	800475a <_printf_i+0x14e>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	07db      	lsls	r3, r3, #31
 800474a:	d506      	bpl.n	800475a <_printf_i+0x14e>
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	6922      	ldr	r2, [r4, #16]
 8004750:	4293      	cmp	r3, r2
 8004752:	dc02      	bgt.n	800475a <_printf_i+0x14e>
 8004754:	2330      	movs	r3, #48	; 0x30
 8004756:	3e01      	subs	r6, #1
 8004758:	7033      	strb	r3, [r6, #0]
 800475a:	9b04      	ldr	r3, [sp, #16]
 800475c:	1b9b      	subs	r3, r3, r6
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	9b07      	ldr	r3, [sp, #28]
 8004762:	0021      	movs	r1, r4
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	9805      	ldr	r0, [sp, #20]
 8004768:	9b06      	ldr	r3, [sp, #24]
 800476a:	aa09      	add	r2, sp, #36	; 0x24
 800476c:	f7ff fede 	bl	800452c <_printf_common>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d135      	bne.n	80047e0 <_printf_i+0x1d4>
 8004774:	2001      	movs	r0, #1
 8004776:	4240      	negs	r0, r0
 8004778:	b00b      	add	sp, #44	; 0x2c
 800477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800477c:	2220      	movs	r2, #32
 800477e:	6809      	ldr	r1, [r1, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	6022      	str	r2, [r4, #0]
 8004784:	0022      	movs	r2, r4
 8004786:	2178      	movs	r1, #120	; 0x78
 8004788:	3245      	adds	r2, #69	; 0x45
 800478a:	7011      	strb	r1, [r2, #0]
 800478c:	4a27      	ldr	r2, [pc, #156]	; (800482c <_printf_i+0x220>)
 800478e:	e7a7      	b.n	80046e0 <_printf_i+0xd4>
 8004790:	0648      	lsls	r0, r1, #25
 8004792:	d5ac      	bpl.n	80046ee <_printf_i+0xe2>
 8004794:	b2ad      	uxth	r5, r5
 8004796:	e7aa      	b.n	80046ee <_printf_i+0xe2>
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	680d      	ldr	r5, [r1, #0]
 800479c:	1d10      	adds	r0, r2, #4
 800479e:	6949      	ldr	r1, [r1, #20]
 80047a0:	6018      	str	r0, [r3, #0]
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	062e      	lsls	r6, r5, #24
 80047a6:	d501      	bpl.n	80047ac <_printf_i+0x1a0>
 80047a8:	6019      	str	r1, [r3, #0]
 80047aa:	e002      	b.n	80047b2 <_printf_i+0x1a6>
 80047ac:	066d      	lsls	r5, r5, #25
 80047ae:	d5fb      	bpl.n	80047a8 <_printf_i+0x19c>
 80047b0:	8019      	strh	r1, [r3, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9e04      	ldr	r6, [sp, #16]
 80047b6:	6123      	str	r3, [r4, #16]
 80047b8:	e7d2      	b.n	8004760 <_printf_i+0x154>
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	1d11      	adds	r1, r2, #4
 80047be:	6019      	str	r1, [r3, #0]
 80047c0:	6816      	ldr	r6, [r2, #0]
 80047c2:	2100      	movs	r1, #0
 80047c4:	0030      	movs	r0, r6
 80047c6:	6862      	ldr	r2, [r4, #4]
 80047c8:	f000 f938 	bl	8004a3c <memchr>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d001      	beq.n	80047d4 <_printf_i+0x1c8>
 80047d0:	1b80      	subs	r0, r0, r6
 80047d2:	6060      	str	r0, [r4, #4]
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	2300      	movs	r3, #0
 80047da:	9a04      	ldr	r2, [sp, #16]
 80047dc:	7013      	strb	r3, [r2, #0]
 80047de:	e7bf      	b.n	8004760 <_printf_i+0x154>
 80047e0:	6923      	ldr	r3, [r4, #16]
 80047e2:	0032      	movs	r2, r6
 80047e4:	9906      	ldr	r1, [sp, #24]
 80047e6:	9805      	ldr	r0, [sp, #20]
 80047e8:	9d07      	ldr	r5, [sp, #28]
 80047ea:	47a8      	blx	r5
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d0c1      	beq.n	8004774 <_printf_i+0x168>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	079b      	lsls	r3, r3, #30
 80047f4:	d415      	bmi.n	8004822 <_printf_i+0x216>
 80047f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f8:	68e0      	ldr	r0, [r4, #12]
 80047fa:	4298      	cmp	r0, r3
 80047fc:	dabc      	bge.n	8004778 <_printf_i+0x16c>
 80047fe:	0018      	movs	r0, r3
 8004800:	e7ba      	b.n	8004778 <_printf_i+0x16c>
 8004802:	0022      	movs	r2, r4
 8004804:	2301      	movs	r3, #1
 8004806:	9906      	ldr	r1, [sp, #24]
 8004808:	9805      	ldr	r0, [sp, #20]
 800480a:	9e07      	ldr	r6, [sp, #28]
 800480c:	3219      	adds	r2, #25
 800480e:	47b0      	blx	r6
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d0af      	beq.n	8004774 <_printf_i+0x168>
 8004814:	3501      	adds	r5, #1
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	42ab      	cmp	r3, r5
 800481e:	dcf0      	bgt.n	8004802 <_printf_i+0x1f6>
 8004820:	e7e9      	b.n	80047f6 <_printf_i+0x1ea>
 8004822:	2500      	movs	r5, #0
 8004824:	e7f7      	b.n	8004816 <_printf_i+0x20a>
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	08004c49 	.word	0x08004c49
 800482c:	08004c5a 	.word	0x08004c5a

08004830 <_putc_r>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	0006      	movs	r6, r0
 8004834:	000d      	movs	r5, r1
 8004836:	0014      	movs	r4, r2
 8004838:	2800      	cmp	r0, #0
 800483a:	d004      	beq.n	8004846 <_putc_r+0x16>
 800483c:	6983      	ldr	r3, [r0, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <_putc_r+0x16>
 8004842:	f7ff f9f7 	bl	8003c34 <__sinit>
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <_putc_r+0x88>)
 8004848:	429c      	cmp	r4, r3
 800484a:	d124      	bne.n	8004896 <_putc_r+0x66>
 800484c:	6874      	ldr	r4, [r6, #4]
 800484e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004850:	07db      	lsls	r3, r3, #31
 8004852:	d405      	bmi.n	8004860 <_putc_r+0x30>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	059b      	lsls	r3, r3, #22
 8004858:	d402      	bmi.n	8004860 <_putc_r+0x30>
 800485a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800485c:	f7ff fa8b 	bl	8003d76 <__retarget_lock_acquire_recursive>
 8004860:	68a3      	ldr	r3, [r4, #8]
 8004862:	3b01      	subs	r3, #1
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	da05      	bge.n	8004876 <_putc_r+0x46>
 800486a:	69a2      	ldr	r2, [r4, #24]
 800486c:	4293      	cmp	r3, r2
 800486e:	db1c      	blt.n	80048aa <_putc_r+0x7a>
 8004870:	b2eb      	uxtb	r3, r5
 8004872:	2b0a      	cmp	r3, #10
 8004874:	d019      	beq.n	80048aa <_putc_r+0x7a>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	6022      	str	r2, [r4, #0]
 800487c:	701d      	strb	r5, [r3, #0]
 800487e:	b2ed      	uxtb	r5, r5
 8004880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004882:	07db      	lsls	r3, r3, #31
 8004884:	d405      	bmi.n	8004892 <_putc_r+0x62>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	059b      	lsls	r3, r3, #22
 800488a:	d402      	bmi.n	8004892 <_putc_r+0x62>
 800488c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800488e:	f7ff fa73 	bl	8003d78 <__retarget_lock_release_recursive>
 8004892:	0028      	movs	r0, r5
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <_putc_r+0x8c>)
 8004898:	429c      	cmp	r4, r3
 800489a:	d101      	bne.n	80048a0 <_putc_r+0x70>
 800489c:	68b4      	ldr	r4, [r6, #8]
 800489e:	e7d6      	b.n	800484e <_putc_r+0x1e>
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <_putc_r+0x90>)
 80048a2:	429c      	cmp	r4, r3
 80048a4:	d1d3      	bne.n	800484e <_putc_r+0x1e>
 80048a6:	68f4      	ldr	r4, [r6, #12]
 80048a8:	e7d1      	b.n	800484e <_putc_r+0x1e>
 80048aa:	0029      	movs	r1, r5
 80048ac:	0022      	movs	r2, r4
 80048ae:	0030      	movs	r0, r6
 80048b0:	f7fe ffc4 	bl	800383c <__swbuf_r>
 80048b4:	0005      	movs	r5, r0
 80048b6:	e7e3      	b.n	8004880 <_putc_r+0x50>
 80048b8:	08004bf8 	.word	0x08004bf8
 80048bc:	08004c18 	.word	0x08004c18
 80048c0:	08004bd8 	.word	0x08004bd8

080048c4 <_sbrk_r>:
 80048c4:	2300      	movs	r3, #0
 80048c6:	b570      	push	{r4, r5, r6, lr}
 80048c8:	4d06      	ldr	r5, [pc, #24]	; (80048e4 <_sbrk_r+0x20>)
 80048ca:	0004      	movs	r4, r0
 80048cc:	0008      	movs	r0, r1
 80048ce:	602b      	str	r3, [r5, #0]
 80048d0:	f7fc fda0 	bl	8001414 <_sbrk>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d103      	bne.n	80048e0 <_sbrk_r+0x1c>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d000      	beq.n	80048e0 <_sbrk_r+0x1c>
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	20000c48 	.word	0x20000c48

080048e8 <__sread>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	000c      	movs	r4, r1
 80048ec:	250e      	movs	r5, #14
 80048ee:	5f49      	ldrsh	r1, [r1, r5]
 80048f0:	f000 f8f8 	bl	8004ae4 <_read_r>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	db03      	blt.n	8004900 <__sread+0x18>
 80048f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048fa:	181b      	adds	r3, r3, r0
 80048fc:	6563      	str	r3, [r4, #84]	; 0x54
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	4a02      	ldr	r2, [pc, #8]	; (800490c <__sread+0x24>)
 8004904:	4013      	ands	r3, r2
 8004906:	81a3      	strh	r3, [r4, #12]
 8004908:	e7f9      	b.n	80048fe <__sread+0x16>
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	ffffefff 	.word	0xffffefff

08004910 <__swrite>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	001f      	movs	r7, r3
 8004914:	898b      	ldrh	r3, [r1, #12]
 8004916:	0005      	movs	r5, r0
 8004918:	000c      	movs	r4, r1
 800491a:	0016      	movs	r6, r2
 800491c:	05db      	lsls	r3, r3, #23
 800491e:	d505      	bpl.n	800492c <__swrite+0x1c>
 8004920:	230e      	movs	r3, #14
 8004922:	5ec9      	ldrsh	r1, [r1, r3]
 8004924:	2200      	movs	r2, #0
 8004926:	2302      	movs	r3, #2
 8004928:	f000 f874 	bl	8004a14 <_lseek_r>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	4a05      	ldr	r2, [pc, #20]	; (8004944 <__swrite+0x34>)
 8004930:	0028      	movs	r0, r5
 8004932:	4013      	ands	r3, r2
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	0032      	movs	r2, r6
 8004938:	230e      	movs	r3, #14
 800493a:	5ee1      	ldrsh	r1, [r4, r3]
 800493c:	003b      	movs	r3, r7
 800493e:	f000 f81f 	bl	8004980 <_write_r>
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004944:	ffffefff 	.word	0xffffefff

08004948 <__sseek>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	000c      	movs	r4, r1
 800494c:	250e      	movs	r5, #14
 800494e:	5f49      	ldrsh	r1, [r1, r5]
 8004950:	f000 f860 	bl	8004a14 <_lseek_r>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	1c42      	adds	r2, r0, #1
 8004958:	d103      	bne.n	8004962 <__sseek+0x1a>
 800495a:	4a05      	ldr	r2, [pc, #20]	; (8004970 <__sseek+0x28>)
 800495c:	4013      	ands	r3, r2
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	bd70      	pop	{r4, r5, r6, pc}
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	0152      	lsls	r2, r2, #5
 8004966:	4313      	orrs	r3, r2
 8004968:	81a3      	strh	r3, [r4, #12]
 800496a:	6560      	str	r0, [r4, #84]	; 0x54
 800496c:	e7f8      	b.n	8004960 <__sseek+0x18>
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	ffffefff 	.word	0xffffefff

08004974 <__sclose>:
 8004974:	b510      	push	{r4, lr}
 8004976:	230e      	movs	r3, #14
 8004978:	5ec9      	ldrsh	r1, [r1, r3]
 800497a:	f000 f815 	bl	80049a8 <_close_r>
 800497e:	bd10      	pop	{r4, pc}

08004980 <_write_r>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	0004      	movs	r4, r0
 8004984:	0008      	movs	r0, r1
 8004986:	0011      	movs	r1, r2
 8004988:	001a      	movs	r2, r3
 800498a:	2300      	movs	r3, #0
 800498c:	4d05      	ldr	r5, [pc, #20]	; (80049a4 <_write_r+0x24>)
 800498e:	602b      	str	r3, [r5, #0]
 8004990:	f7fc fd27 	bl	80013e2 <_write>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d103      	bne.n	80049a0 <_write_r+0x20>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d000      	beq.n	80049a0 <_write_r+0x20>
 800499e:	6023      	str	r3, [r4, #0]
 80049a0:	bd70      	pop	{r4, r5, r6, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	20000c48 	.word	0x20000c48

080049a8 <_close_r>:
 80049a8:	2300      	movs	r3, #0
 80049aa:	b570      	push	{r4, r5, r6, lr}
 80049ac:	4d06      	ldr	r5, [pc, #24]	; (80049c8 <_close_r+0x20>)
 80049ae:	0004      	movs	r4, r0
 80049b0:	0008      	movs	r0, r1
 80049b2:	602b      	str	r3, [r5, #0]
 80049b4:	f7fc fd22 	bl	80013fc <_close>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d103      	bne.n	80049c4 <_close_r+0x1c>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d000      	beq.n	80049c4 <_close_r+0x1c>
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	20000c48 	.word	0x20000c48

080049cc <_fstat_r>:
 80049cc:	2300      	movs	r3, #0
 80049ce:	b570      	push	{r4, r5, r6, lr}
 80049d0:	4d06      	ldr	r5, [pc, #24]	; (80049ec <_fstat_r+0x20>)
 80049d2:	0004      	movs	r4, r0
 80049d4:	0008      	movs	r0, r1
 80049d6:	0011      	movs	r1, r2
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	f7fc fd12 	bl	8001402 <_fstat>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d103      	bne.n	80049ea <_fstat_r+0x1e>
 80049e2:	682b      	ldr	r3, [r5, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d000      	beq.n	80049ea <_fstat_r+0x1e>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	20000c48 	.word	0x20000c48

080049f0 <_isatty_r>:
 80049f0:	2300      	movs	r3, #0
 80049f2:	b570      	push	{r4, r5, r6, lr}
 80049f4:	4d06      	ldr	r5, [pc, #24]	; (8004a10 <_isatty_r+0x20>)
 80049f6:	0004      	movs	r4, r0
 80049f8:	0008      	movs	r0, r1
 80049fa:	602b      	str	r3, [r5, #0]
 80049fc:	f7fc fd06 	bl	800140c <_isatty>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d103      	bne.n	8004a0c <_isatty_r+0x1c>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d000      	beq.n	8004a0c <_isatty_r+0x1c>
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20000c48 	.word	0x20000c48

08004a14 <_lseek_r>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	0004      	movs	r4, r0
 8004a18:	0008      	movs	r0, r1
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	2300      	movs	r3, #0
 8004a20:	4d05      	ldr	r5, [pc, #20]	; (8004a38 <_lseek_r+0x24>)
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	f7fc fcf4 	bl	8001410 <_lseek>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d103      	bne.n	8004a34 <_lseek_r+0x20>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d000      	beq.n	8004a34 <_lseek_r+0x20>
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	20000c48 	.word	0x20000c48

08004a3c <memchr>:
 8004a3c:	b2c9      	uxtb	r1, r1
 8004a3e:	1882      	adds	r2, r0, r2
 8004a40:	4290      	cmp	r0, r2
 8004a42:	d101      	bne.n	8004a48 <memchr+0xc>
 8004a44:	2000      	movs	r0, #0
 8004a46:	4770      	bx	lr
 8004a48:	7803      	ldrb	r3, [r0, #0]
 8004a4a:	428b      	cmp	r3, r1
 8004a4c:	d0fb      	beq.n	8004a46 <memchr+0xa>
 8004a4e:	3001      	adds	r0, #1
 8004a50:	e7f6      	b.n	8004a40 <memchr+0x4>

08004a52 <memmove>:
 8004a52:	b510      	push	{r4, lr}
 8004a54:	4288      	cmp	r0, r1
 8004a56:	d902      	bls.n	8004a5e <memmove+0xc>
 8004a58:	188b      	adds	r3, r1, r2
 8004a5a:	4298      	cmp	r0, r3
 8004a5c:	d303      	bcc.n	8004a66 <memmove+0x14>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e007      	b.n	8004a72 <memmove+0x20>
 8004a62:	5c8b      	ldrb	r3, [r1, r2]
 8004a64:	5483      	strb	r3, [r0, r2]
 8004a66:	3a01      	subs	r2, #1
 8004a68:	d2fb      	bcs.n	8004a62 <memmove+0x10>
 8004a6a:	bd10      	pop	{r4, pc}
 8004a6c:	5ccc      	ldrb	r4, [r1, r3]
 8004a6e:	54c4      	strb	r4, [r0, r3]
 8004a70:	3301      	adds	r3, #1
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d1fa      	bne.n	8004a6c <memmove+0x1a>
 8004a76:	e7f8      	b.n	8004a6a <memmove+0x18>

08004a78 <__malloc_lock>:
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	4802      	ldr	r0, [pc, #8]	; (8004a84 <__malloc_lock+0xc>)
 8004a7c:	f7ff f97b 	bl	8003d76 <__retarget_lock_acquire_recursive>
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	20000c40 	.word	0x20000c40

08004a88 <__malloc_unlock>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	4802      	ldr	r0, [pc, #8]	; (8004a94 <__malloc_unlock+0xc>)
 8004a8c:	f7ff f974 	bl	8003d78 <__retarget_lock_release_recursive>
 8004a90:	bd10      	pop	{r4, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	20000c40 	.word	0x20000c40

08004a98 <_realloc_r>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	0007      	movs	r7, r0
 8004a9c:	000d      	movs	r5, r1
 8004a9e:	0016      	movs	r6, r2
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	d105      	bne.n	8004ab0 <_realloc_r+0x18>
 8004aa4:	0011      	movs	r1, r2
 8004aa6:	f7ff fa1f 	bl	8003ee8 <_malloc_r>
 8004aaa:	0004      	movs	r4, r0
 8004aac:	0020      	movs	r0, r4
 8004aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	d103      	bne.n	8004abc <_realloc_r+0x24>
 8004ab4:	f7ff f9ce 	bl	8003e54 <_free_r>
 8004ab8:	0034      	movs	r4, r6
 8004aba:	e7f7      	b.n	8004aac <_realloc_r+0x14>
 8004abc:	f000 f826 	bl	8004b0c <_malloc_usable_size_r>
 8004ac0:	002c      	movs	r4, r5
 8004ac2:	42b0      	cmp	r0, r6
 8004ac4:	d2f2      	bcs.n	8004aac <_realloc_r+0x14>
 8004ac6:	0031      	movs	r1, r6
 8004ac8:	0038      	movs	r0, r7
 8004aca:	f7ff fa0d 	bl	8003ee8 <_malloc_r>
 8004ace:	1e04      	subs	r4, r0, #0
 8004ad0:	d0ec      	beq.n	8004aac <_realloc_r+0x14>
 8004ad2:	0029      	movs	r1, r5
 8004ad4:	0032      	movs	r2, r6
 8004ad6:	f7fe fdd5 	bl	8003684 <memcpy>
 8004ada:	0029      	movs	r1, r5
 8004adc:	0038      	movs	r0, r7
 8004ade:	f7ff f9b9 	bl	8003e54 <_free_r>
 8004ae2:	e7e3      	b.n	8004aac <_realloc_r+0x14>

08004ae4 <_read_r>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	0004      	movs	r4, r0
 8004ae8:	0008      	movs	r0, r1
 8004aea:	0011      	movs	r1, r2
 8004aec:	001a      	movs	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	4d05      	ldr	r5, [pc, #20]	; (8004b08 <_read_r+0x24>)
 8004af2:	602b      	str	r3, [r5, #0]
 8004af4:	f7fc fc68 	bl	80013c8 <_read>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d103      	bne.n	8004b04 <_read_r+0x20>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d000      	beq.n	8004b04 <_read_r+0x20>
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	20000c48 	.word	0x20000c48

08004b0c <_malloc_usable_size_r>:
 8004b0c:	1f0b      	subs	r3, r1, #4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	1f18      	subs	r0, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	da01      	bge.n	8004b1a <_malloc_usable_size_r+0xe>
 8004b16:	580b      	ldr	r3, [r1, r0]
 8004b18:	18c0      	adds	r0, r0, r3
 8004b1a:	4770      	bx	lr

08004b1c <_init>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr

08004b28 <_fini>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr
